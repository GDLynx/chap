Anchored allocation at 55e087bfaea0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c219f0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c21d20 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The most base type"

Anchored allocation at 55e087c22350 of size 628
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c22980 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "list() -> new empty list
list(iterable) -> new list initialized from iterable's items"

Anchored allocation at 55e087c22fb0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c230c0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c231b0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c232e0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "range(stop) -> range object
range(start, stop[, step]) -> range object

Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement)."

Anchored allocation at 55e087c23910 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)"

Anchored allocation at 55e087c23f40 of size 628
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c24570 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c24660 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c24750 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c248a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c24990 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed."

Anchored allocation at 55e087c24d80 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c24ed0 of size c28
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c25b00 of size c28
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c26730 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "int(x=0) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4"

Anchored allocation at 55e087c27360 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c27450 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c27540 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c27600 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c277b0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "super() -> same as super(__class__, <first argument>)
super(type) -> unbound super object
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super().meth(arg)
This works for class methods too:
class C(B):
    @classmethod
    def cmeth(cls, arg):
        super().cmeth(arg)
"

Anchored allocation at 55e087c27990 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "bytearray(iterable_of_ints) -> bytearray
bytearray(string, encoding[, errors]) -> bytearray
bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer
bytearray(int) -> bytes array of size given by the parameter initialized with null bytes
bytearray() -> empty bytes array

Construct a mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a buffer object
  - any object implementing the buffer API.
  - an integer"

Anchored allocation at 55e087c287d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c288e0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "enumerate(iterable[, start]) -> iterator for index, value of iterable

Return an enumerate object.  iterable must be another object that supports
iteration.  The enumerate object yields pairs containing a count (from
start, which defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ..."

Anchored allocation at 55e087c28b00 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c28bf0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "bytes(iterable_of_ints) -> bytes
bytes(string, encoding[, errors]) -> bytes
bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
bytes(int) -> bytes object of size given by the parameter initialized with null bytes
bytes() -> empty bytes object

Construct an immutable array of bytes from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - any object implementing the buffer API.
  - an integer"

Anchored allocation at 55e087c299d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c29ac0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c29df0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "hash_info

A struct sequence providing parameters used for computing
hashes. The attributes are read only."

Anchored allocation at 55e087c2a220 of size e8
This allocation matches pattern PyDictKeysObject.
"a" : "b"
"c" : "d"

Anchored allocation at 55e087c2a310 of size e8
This allocation matches pattern PyDictKeysObject.
"cache_tag" : "cpython-35"
"name" : "cpython"

Anchored allocation at 55e087c2a450 of size 1828
This allocation matches pattern PyDictKeysObject.
"__name__" : "builtins"
"__doc__" : "Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices."

Anchored allocation at 55e087c2bc80 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Program interrupted by user."

Anchored allocation at 55e087c2bd70 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Read beyond end of file."

Anchored allocation at 55e087c2be60 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Import can't find module, or can't find name in module."

Anchored allocation at 55e087c2c010 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for I/O related errors."

Anchored allocation at 55e087c2c1c0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode related error."

Anchored allocation at 55e087c2c370 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Recursion limit exceeded."

Anchored allocation at 55e087c2c460 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2c550 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Method or function hasn't been implemented yet."

Anchored allocation at 55e087c2c640 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Name not found globally."

Anchored allocation at 55e087c2c730 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Local name referenced but not bound to a value."

Anchored allocation at 55e087c2c850 of size 628
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2ce80 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Dictionary that remembers insertion order"

Anchored allocation at 55e087c2d4b0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2d5a0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "staticmethod(function) -> method

Convert a function to be a static method.

A static method does not receive an implicit first argument.
To declare a static method, use this idiom:

     class C:
         @staticmethod
         def f(arg1, arg2, ...):
             ...

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.

Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin."

Anchored allocation at 55e087c2d750 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "slice(stop)
slice(start, stop[, step])

Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])."

Anchored allocation at 55e087c2dcd0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2e000 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2e0b0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "set() -> new empty set object
set(iterable) -> new set object

Build an unordered collection of unique elements."

Anchored allocation at 55e087c2ece0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'."

Anchored allocation at 55e087c2f910 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c2fac0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A simple attribute-based namespace.

SimpleNamespace(**kwargs)"

Anchored allocation at 55e087c2fdf0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.

Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
"

Anchored allocation at 55e087c2ff40 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "complex(real[, imag]) -> complex number

Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0."

Anchored allocation at 55e087c30570 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object

Build an immutable unordered collection of unique elements."

Anchored allocation at 55e087c30ba0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "float(x) -> floating point number

Convert a string or number to a floating point number, if possible."

Anchored allocation at 55e087c317d0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "tuple() -> empty tuple
tuple(iterable) -> tuple initialized from iterable's items

If the argument is a tuple, the return value is the same object."

Anchored allocation at 55e087c31b00 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Create a new memoryview object which references the given object."

Anchored allocation at 55e087c32130 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "reversed(sequence) -> reverse iterator over values of the sequence

Return a reverse iterator"

Anchored allocation at 55e087c322e0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c32490 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c327c0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c32af0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart."

Anchored allocation at 55e087c33120 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c33450 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c33780 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c33ab0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c33de0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c34110 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c342c0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c34470 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c347a0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c34950 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Text I/O implementation using an in-memory buffer.

The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor."

Anchored allocation at 55e087c34c80 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A buffered reader and writer object together.

A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.

reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE."

Anchored allocation at 55e087c35580 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c35730 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c358e0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c35c10 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c35dc0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c35eb0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c36060 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A wrapper object implementing __await__ for coroutines."

Anchored allocation at 55e087c36210 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c36540 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.int_info

A struct sequence that holds information about Python's
internal representation of integers.  The attributes are read only."

Anchored allocation at 55e087c368e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c369d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c36b80 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.float_info

A structseq holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information."

Anchored allocation at 55e087c36eb0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c36fa0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c37090 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c37180 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "filter(function or None, iterable) --> filter object

Return an iterator yielding those items of iterable for which function(item)
is true. If function is None, return the items that are true."

Anchored allocation at 55e087c37330 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "map(func, *iterables) --> map object

Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted."

Anchored allocation at 55e087c374e0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "zip(iter1 [,iter2 [...]]) --> zip object

Return a zip object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration."

Anchored allocation at 55e087c37690 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c37780 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Common base class for all non-exit exceptions."

Anchored allocation at 55e087c37870 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "module(name[, doc])

Create a module object.
The name must be a string; the optional doc argument can have any type."

Anchored allocation at 55e087c37a20 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c37bd0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Common base class for all exceptions"

Anchored allocation at 55e087c37f00 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Inappropriate argument type."

Anchored allocation at 55e087c38010 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unspecified run-time error."

Anchored allocation at 55e087c38100 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Signal the end from iterator.__anext__()."

Anchored allocation at 55e087c381f0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Signal the end from iterator.__next__()."

Anchored allocation at 55e087c382e0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Request that a generator exit."

Anchored allocation at 55e087c383d0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Request to exit from the interpreter."

Anchored allocation at 55e087c384c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Manages the possible clean-up of sys.modules for load_module()."
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c38a20 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c38b10 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c38ba0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c38c90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c38d80 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c38ed0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c393b0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c39440 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c39530 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c395f0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A recursive lock implementation which is able to detect deadlocks
    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to
    take locks B then A).
    "
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c39d60 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A simple _ModuleLock equivalent for Python builds without
    multi-threading support."
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3a2c0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3a700 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3ac40 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3adc0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Thread-local dummy"

Anchored allocation at 55e087c3b290 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3b440 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The specification for a module, used for loading.

    A module's spec is the source for information about the module.  For
    data associated with the module, including source, use the spec's
    loader.

    `name` is the absolute name of the module.  `loader` is the loader
    to use when loading the module.  `parent` is the name of the
    package the module is in.  The parent is derived from the name.

    `is_package` determines if the module is considered a package or
    not.  On modules this is reflected by the `__path__` attribute.

    `origin` is the specific location used by the loader from which to
    load the module, if that information is available.  When filename is
    set, origin will match.

    `has_location` indicates that a spec's "origin" reflects a location.
    When this is True, `__file__` attribute of the module is set.

    `cached` is the location of the cached bytecode file, if any.  It
    corresponds to the `__cached__` attribute.

    `submodule_search_locations` is the sequence of path entries to
    search when importing submodules.  If set, is_package should be
    True--and False otherwise.

    Packages are simply modules that (may) have submodules.  If a spec
    has a non-None value in `submodule_search_locations`, the import
    system will consider modules loaded from the spec as packages.

    Only finders (see importlib.abc.MetaPathFinder and
    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.

    "
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3c100 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c1f0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c2b0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c3a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c490 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c580 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c670 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c820 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c910 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3c9a0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Meta path import for built-in modules.

    All methods are either class or static methods to avoid the need to
    instantiate the class.

    "
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3d0e0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3d170 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3d260 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3d350 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3d440 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3d860 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Meta path import for frozen modules.

    All methods are either class or static methods to avoid the need to
    instantiate the class.

    "
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3e2f0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Context manager for the import lock."
"__module__" : "_frozen_importlib"

Anchored allocation at 55e087c3e4a0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3e560 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3e650 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Attribute not found."

Anchored allocation at 55e087c3e740 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Improper indentation."

Anchored allocation at 55e087c3e830 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Invalid syntax."

Anchored allocation at 55e087c3e9e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3ead0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Improper mixture of spaces and tabs."

Anchored allocation at 55e087c3ebc0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3ecb0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for lookup errors."

Anchored allocation at 55e087c3eda0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Sequence index out of range."

Anchored allocation at 55e087c3ee90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3ef80 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Mapping key not found."

Anchored allocation at 55e087c3f070 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Inappropriate argument value (of correct type)."

Anchored allocation at 55e087c3f160 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3f490 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3f580 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3f670 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode encoding error."

Anchored allocation at 55e087c3f820 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Assertion failed."

Anchored allocation at 55e087c3f910 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode decoding error."

Anchored allocation at 55e087c3fac0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode translation error."

Anchored allocation at 55e087c3fc70 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for arithmetic errors."

Anchored allocation at 55e087c3fd60 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Floating point operation failed."

Anchored allocation at 55e087c3fe50 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c3ff40 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Result too large to be represented."

Anchored allocation at 55e087c40030 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Second argument to a division or modulo operation was zero."

Anchored allocation at 55e087c40120 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Internal error in the Python interpreter.

Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version."

Anchored allocation at 55e087c40210 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Weak ref proxy used after referent went away."

Anchored allocation at 55e087c40300 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Buffer error."

Anchored allocation at 55e087c403f0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Out of memory."

Anchored allocation at 55e087c404e0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warning categories."

Anchored allocation at 55e087c405d0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings generated by user code."

Anchored allocation at 55e087c406c0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about probable mistakes in module imports"

Anchored allocation at 55e087c407b0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about deprecated features."

Anchored allocation at 55e087c408a0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about features which will be deprecated
in the future."

Anchored allocation at 55e087c40990 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about dubious syntax."

Anchored allocation at 55e087c40a80 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about dubious runtime behavior."

Anchored allocation at 55e087c40b70 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about constructs that will change semantically
in the future."

Anchored allocation at 55e087c40c60 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c40e10 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about Unicode related problems, mostly
related to conversion problems."

Anchored allocation at 55e087c40f00 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str."

Anchored allocation at 55e087c40ff0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for warnings about resource usage."

Anchored allocation at 55e087c410e0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Connection error."

Anchored allocation at 55e087c411d0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Operation only works on directories."

Anchored allocation at 55e087c412c0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "I/O operation would block."

Anchored allocation at 55e087c413b0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Broken pipe."

Anchored allocation at 55e087c414a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c41590 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Child process error."

Anchored allocation at 55e087c41680 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Connection aborted."

Anchored allocation at 55e087c41770 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Connection refused."

Anchored allocation at 55e087c41860 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Connection reset."

Anchored allocation at 55e087c41950 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "File already exists."

Anchored allocation at 55e087c41a40 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "File not found."

Anchored allocation at 55e087c41b30 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Operation doesn't work on directories."

Anchored allocation at 55e087c41c20 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for raw binary I/O."

Anchored allocation at 55e087c41dd0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Interrupted by signal."

Anchored allocation at 55e087c41ec0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Not enough permissions."

Anchored allocation at 55e087c41fb0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Process not found."

Anchored allocation at 55e087c420a0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Timeout expired."

Anchored allocation at 55e087c42190 of size 1828
This allocation matches pattern PyDictKeysObject.
"__name__" : "builtins"
"__doc__" : "Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices."
"__package__" : ""

Anchored allocation at 55e087c43da0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.thread_info

A struct sequence holding information about the thread implementation."

Anchored allocation at 55e087c43f50 of size 98
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c44de0 of size c28
This allocation matches pattern PyDictKeysObject.
"version" : "3.5.5 (default, May 16 2018, 12:28:32) 
[GCC 5.3.0]"
"byteorder" : "little"
"__doc__" : "This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a struct sequence with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a struct sequence with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a struct sequence with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a struct sequence with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
"
"abiflags" : "m"
"__package__" : ""
"base_exec_prefix" : "/usr"
"base_prefix" : "/usr"
"exec_prefix" : "/usr"
"prefix" : "/usr"
"float_repr_style" : "short"
"copyright" : "Copyright (c) 2001-2018 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved."
"executable" : "/usr/bin/python"
"platform" : "linux"
"__name__" : "sys"

Anchored allocation at 55e087c45a10 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.version_info

Version information as a named tuple."

Anchored allocation at 55e087c45d40 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.flags

Flags provided through command line arguments or environment vars."

Anchored allocation at 55e087c46220 of size 1828
This allocation matches pattern PyDictKeysObject.
"version" : "3.5.5 (default, May 16 2018, 12:28:32) 
[GCC 5.3.0]"
"byteorder" : "little"
"platform" : "linux"
"base_prefix" : "/usr"
"copyright" : "Copyright (c) 2001-2018 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved."
"prefix" : "/usr"
"__name__" : "sys"
"__doc__" : "This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a struct sequence with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a struct sequence with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a struct sequence with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a struct sequence with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
"
"abiflags" : "m"
"float_repr_style" : "short"
"exec_prefix" : "/usr"
"executable" : "/usr/bin/python"
"base_exec_prefix" : "/usr"

Anchored allocation at 55e087c47a50 of size 3028
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices."
"__name__" : "builtins"

Anchored allocation at 55e087c4aa80 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up."
"_defaultaction" : "default"
"__name__" : "_warnings"

Anchored allocation at 55e087c4ac30 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_imp"
"__package__" : ""
"__doc__" : "(Extremely) low-level import machinery bits as used by importlib and imp."

Anchored allocation at 55e087c4be60 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c4bf50 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c4c010 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c4c1c0 of size 1828
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c4d9f0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "times_result: Result from os.times().

This object may be accessed either as a tuple of
  (user, system, children_user, children_system, elapsed),
or via the attributes user, system, children_user, children_system,
and elapsed.

See os.times for more information."

Anchored allocation at 55e087c4dd20 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "uname_result: Result from os.uname().

This object may be accessed either as a tuple of
  (sysname, nodename, release, version, machine),
or via the attributes sysname, nodename, release, version, and machine.

See os.uname for more information."

Anchored allocation at 55e087c4e050 of size 6028
This allocation matches pattern PyDictKeysObject.
"__name__" : "posix"
"__doc__" : "This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls."

Anchored allocation at 55e087c54080 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface."
"__name__" : "_thread"
"__package__" : ""

Anchored allocation at 55e087c54cb0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Weak-reference support module."
"__name__" : "_weakref"
"__package__" : ""

Anchored allocation at 55e087c55570 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c55660 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "zipimport"

Anchored allocation at 55e087c55b40 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c55c30 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c55cc0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives."
"__name__" : "zipimport"
"__package__" : ""

Anchored allocation at 55e087c56090 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c561a0 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "zipimport"
"__doc__" : "zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives."

Anchored allocation at 55e087c56d60 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c58100 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "signal"

Anchored allocation at 55e087c581f0 of size c28
This allocation matches pattern PyDictKeysObject.
"_ERR_MSG" : "No module named {!r}"
"__doc__" : "Core implementation of import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.

"
"__package__" : ""
"_ERR_MSG_PREFIX" : "No module named "
"__name__" : "_frozen_importlib"

Anchored allocation at 55e087c591c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up."
"_defaultaction" : "default"
"__name__" : "_warnings"
"__package__" : ""

Anchored allocation at 55e087c595b0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Thread-local data"

Anchored allocation at 55e087c596a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c59790 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c59940 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c59af0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c59ec0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c59fd0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface."
"__name__" : "_thread"

Anchored allocation at 55e087c5a600 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5a7b0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "zipimporter(archivepath) -> zipimporter object

Create a new zipimporter instance. 'archivepath' must be a path to
a zipfile, or to a specific path inside a zipfile. For example, it can be
'/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
valid directory inside the archive.

'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
archive.

The 'archive' attribute of zipimporter objects contains the name of the
zipfile targeted."

Anchored allocation at 55e087c5aae0 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_weakref"
"__doc__" : "Weak-reference support module."

Anchored allocation at 55e087c5bd60 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5c3b0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5c4a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5c590 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5c650 of size 328
This allocation matches pattern PyDictKeysObject.
"REGISTRY_KEY" : "Software\Python\PythonCore\{sys_version}\Modules\{fullname}"
"REGISTRY_KEY_DEBUG" : "Software\Python\PythonCore\{sys_version}\Modules\{fullname}\Debug"
"__doc__" : "Meta path finder for modules declared in the Windows registry."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c5d1f0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for text I/O.

This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
"

Anchored allocation at 55e087c5d420 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class of common code needed by both SourceLoader and
    SourcelessFileLoader."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c5d980 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5da50 of size c28
This allocation matches pattern PyDictKeysObject.
"path_sep" : "/"
"__doc__" : "Core implementation of path-based import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.

"
"_PYCACHE" : "__pycache__"
"_OPT" : "opt-"
"path_separators" : "/"
"__name__" : "_frozen_importlib_external"
"__package__" : ""

Anchored allocation at 55e087c5e680 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5e770 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c5ee50 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5ef40 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5f220 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5f310 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5f400 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5f4f0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5f5e0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base file loader class which implements the loader protocol methods that
    require file system usage."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c5fcc0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5fdb0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c5fe70 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Concrete implementation of SourceLoader using the file system."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c603d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c604c0 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Loader which handles sourceless file imports."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c60b10 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c60c00 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Represents a namespace package's path.  It uses the module name
    to find its parent module, and from there it looks up the parent's
    __path__.  When this changes, the module's own path is recomputed,
    using path_finder.  For top-level modules, the parent module's path
    is sys.path."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c60f30 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Loader for extension modules.

    The constructor is designed to work with FileFinder.

    "
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c61610 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c617c0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c61850 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c61cf0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c623d0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Meta path finder for sys.path and package __path__ attributes."
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c62de0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "File-based finder.

    Interactions with the file system are cached for performance, being
    refreshed when the directory the finder is handling has been modified.

    "
"__module__" : "_frozen_importlib_external"

Anchored allocation at 55e087c634c0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "io"

Anchored allocation at 55e087c63960 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c63c90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c63d80 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for buffered IO objects.

The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().

In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.

A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
"

Anchored allocation at 55e087c63fc0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.

This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.

Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise UnsupportedOperation when operations they do not support are
called.

The basic type used for binary data read from or written to a file is
bytes. Other bytes-like objects are accepted as method arguments too.
In some cases (such as readinto), a writable object is required. Text
I/O classes work with str data.

Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.

IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.

IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:

with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
"

Anchored allocation at 55e087c64d70 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c653f0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c65580 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Open a file.

The mode can be 'r' (default), 'w', 'x' or 'a' for reading,
writing, exclusive creation or appending.  The file will be created if it
doesn't exist when opened for writing or appending; it will be truncated
when opened for writing.  A FileExistsError will be raised if it already
exists when opened for creating. Opening a file for creating implies
writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode
to allow simultaneous reading and writing. A custom opener can be used by
passing a callable as *opener*. The underlying file descriptor for the file
object is then obtained by calling opener with (*name*, *flags*).
*opener* must return an open file descriptor (passing os.open as *opener*
results in functionality similar to passing None)."

Anchored allocation at 55e087c65bb0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c65ca0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c65d90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c65e80 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Codec used when reading a file in universal newlines mode.

It wraps another incremental decoder, translating \r\n and \r into \n.
It also records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder."

Anchored allocation at 55e087c66090 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Buffered I/O implementation using an in-memory bytes buffer."

Anchored allocation at 55e087c666c0 of size 1828
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c67ef0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Create a new buffered reader using the given readable raw IO object."

Anchored allocation at 55e087c68520 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A buffer for a writeable sequential RawIO object.

The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE."

Anchored allocation at 55e087c68b50 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A buffered interface to random access streams.

The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE."

Anchored allocation at 55e087c69180 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character."

Anchored allocation at 55e087c697b0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
"
"__name__" : "io"
"__package__" : ""

Anchored allocation at 55e087c69de0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.

Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, floating point numbers, strings, bytes, bytearrays,
tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).

Variables:

version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 shares interned strings and version 2
    uses a binary format for floating point numbers.
    Version 3 shares common object references (New in version 3.4).

Functions:

dump() -- write value to a file
load() -- read value from a file
dumps() -- marshal value as a bytes object
loads() -- read value from a bytes-like object"
"__name__" : "marshal"
"__package__" : ""

Anchored allocation at 55e087c6a700 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Current has only one field: sched_priority");

  sched_priority
    A scheduling parameter."

Anchored allocation at 55e087c6a8b0 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6abe0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "waitid_result: Result from waitid.

This object may be accessed either as a tuple of
  (si_pid, si_uid, si_signo, si_status, si_code),
or via the attributes si_pid, si_uid, and so on.

See os.waitid for more information."

Anchored allocation at 55e087c6b530 of size 628
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6bfd0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6c140 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "stat_result: Result from stat, fstat, or lstat.

This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.

Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.

See os.stat for more information."

Anchored allocation at 55e087c6c770 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "statvfs_result: Result from statvfs or fstatvfs.

This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.

See os.statvfs for more information."

Anchored allocation at 55e087c6caa0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A tuple of (columns, lines) for holding terminal window size"

Anchored allocation at 55e087c6cc50 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6cf20 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6d0a0 of size 338
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6d3e0 of size c28
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c6e010 of size 3028
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls."
"__name__" : "posix"
"__package__" : ""

Anchored allocation at 55e087c72510 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    This allows one to have properties active on an instance, and have virtual
    attributes on the class with the same name (see Enum for an example).

    "
"__module__" : "types"

Anchored allocation at 55e087c72860 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c72a80 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Support for POSIX locales."
"__package__" : ""
"__name__" : "_locale"

Anchored allocation at 55e087c74980 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c74a10 of size 6028
This allocation matches pattern PyDictKeysObject.
"SHLIB_SUFFIX" : ".so"
"OPT" : "-DNDEBUG"
"CONFIGURE_LDFLAGS" : ""
"PLATDIR" : "plat-linux"
"HOST_GNU_TYPE" : "x86_64-pc-linux-gnu"
"LIBSUBDIRS" : "tkinter tkinter/test tkinter/test/test_tkinter \"
"SITEPATH" : ""
"RUNSHARED" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5"
"GITBRANCH" : ""
"PYTHONFRAMEWORKPREFIX" : ""
"CFLAGSFORSHARED" : "-fPIC"
"MULTIARCH" : ""
"TESTOPTS" : ""
"SGI_ABI" : ""
"prefix" : "/usr"
"EXTRAMACHDEPPATH" : ""
"LIBPC" : "/usr/lib/pkgconfig"
"PYTHON_FOR_BUILD" : "./python -E"
"DESTLIB" : "/usr/lib/python3.5"
"PYTHON" : "python"
"CONFIGFILES" : "configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"BINLIBDEST" : "/usr/lib/python3.5"
"GNULD" : "yes"
"CONFIGURE_CFLAGS" : "-O2 -g"
"LIBDIR" : "/usr/lib"
"DISTFILES" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"RANLIB" : "ranlib"
"PYTHONPATH" : ":plat-linux"
"RETSIGTYPE" : "void"
"LIPO_32BIT_FLAGS" : ""
"MACHDEP" : "linux"
"TCLTK_LIBS" : ""
"SYSLIBS" : "-lm"
"CONFIG_ARGS" : "'CFLAGS=-O2 -g' 'CXXFLAGS=-O2 -g' '--prefix=/usr' '--bindir=/usr/bin' '--libdir=/usr/lib' '--enable-shared' '--with-system-expat' '--with-system-ffi' '--with-dbmliborder=gdbm:ndbm' 'PKG_CONFIG_PATH=:/usr/lib/pkgconfig:/usr/share/pkgconfig'"
"LDLIBRARYDIR" : ""
"BINDIR" : "/usr/bin"
"OTHER_LIBTOOL_OPT" : ""
"RESSRCDIR" : "Mac/Resources/framework"
"INSTALL_DATA" : "/bin/install -c -m 644"
"PARSER_OBJS" : "\ Parser/myreadline.o Parser/parsetok.o Parser/tokenizer.o"
"LIBRARY_OBJS" : "\"
"SIGNAL_OBJS" : ""
"LDFLAGS" : ""
"DESTSHARED" : "/usr/lib/python3.5/lib-dynload"
"VERSION" : "3.5"
"SUBDIRS" : ""
"MACOSX_DEPLOYMENT_TARGET" : ""
"BUILDPYTHON" : "python"
"EXTRATESTOPTS" : ""
"EXE" : ""
"MODOBJS" : "Modules/_threadmodule.o  Modules/signalmodule.o  Modules/posixmodule.o  Modules/errnomodule.o  Modules/pwdmodule.o  Modules/_sre.o  Modules/_codecsmodule.o  Modules/_weakref.o  Modules/_functoolsmodule.o  Modules/_operator.o  Modules/_collectionsmodule.o  Modules/itertoolsmodule.o  Modules/atexitmodule.o  Modules/_stat.o  Modules/timemodule.o  Modules/_localemodule.o  Modules/_iomodule.o Modules/iobase.o Modules/fileio.o Modules/bytesio.o Modules/bufferedio.o Modules/textio.o Modules/stringio.o  Modules/zipimport.o  Modules/faulthandler.o  Modules/_tracemalloc.o Modules/hashtable.o  Modules/symtablemodule.o  Modules/xxsubtype.o"
"MAINCC" : "gcc -pthread"
"INSTALL" : "/bin/install -c"
"PGOBJS" : "\"
"PYTHON_FOR_REGEN" : "python"
"CXX" : "g++ -pthread"
"LOCALMODLIBS" : ""
"PSRCS" : "\"
"BUILDEXE" : ""
"IO_OBJS" : "\"
"datarootdir" : "/usr/share"
"srcdir" : "."
"EXT_SUFFIX" : ".cpython-35m-x86_64-linux-gnu.so"
"PY_FORMAT_SIZE_T" : ""z""
"DESTDIRS" : "/usr /usr/lib /usr/lib/python3.5 /usr/lib/python3.5/lib-dynload"
"AR" : "ar"
"PROFILE_TASK" : "-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessing_fork test_multiprocessing_forkserver test_multiprocessing_main_handling test_multiprocessing_spawn test_subprocess"
"XMLLIBSUBDIRS" : "xml xml/dom xml/etree xml/parsers xml/sax"
"ABIFLAGS" : "m"
"INCLUDEDIR" : "/usr/include"
"BASECPPFLAGS" : ""
"PGO_PROF_USE_FLAG" : "-fprofile-use -fprofile-correction"
"READELF" : "readelf"
"LDSHARED" : "gcc -pthread -shared"
"TESTPATH" : ""
"INSTALL_PROGRAM" : "/bin/install -c"
"PARSER_HEADERS" : "\"
"THREADOBJ" : "Python/thread.o"
"PGENSRCS" : "\ \"
"SOABI" : "cpython-35m-x86_64-linux-gnu"
"CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g"
"NO_AS_NEEDED" : "-Wl,--no-as-needed"
"CFLAGS_NODIST" : ""
"MAKESETUP" : "./Modules/makesetup"
"LN" : "ln"
"BASEMODLIBS" : ""
"DYNLOADFILE" : "dynload_shlib.o"
"POBJS" : "\"
"DLINCLDIR" : "."
"MODLIBS" : ""
"LIBS" : "-lpthread -ldl  -lutil"
"PURIFY" : ""
"BUILD_GNU_TYPE" : "x86_64-pc-linux-gnu"
"LDLIBRARY" : "libpython3.5m.so"
"ARFLAGS" : "rc"
"PY_CORE_CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g -Werror=declaration-after-statement -I. -I./Include -fPIC -DPy_BUILD_CORE"
"INSTALL_SHARED" : "/bin/install -c -m 555"
"LIBDEST" : "/usr/lib/python3.5"
"LDVERSION" : "3.5m"
"EXTRA_CFLAGS" : ""
"BYTESTR_DEPS" : "\"
"BASECFLAGS" : "-Wno-unused-result -Wsign-compare"
"PY_FORMAT_LONG_LONG" : ""ll""
"LINKCC" : "gcc -pthread"
"INCLDIRSTOMAKE" : "/usr/include /usr/include /usr/include/python3.5m /usr/include/python3.5m"
"COVERAGE_REPORT_OPTIONS" : "--no-branch-coverage --title "CPython lcov report""
"abs_builddir" : "/usr/src/photon/BUILD/Python-3.5.5"
"LIBC" : ""
"DLLLIBRARY" : ""
"DIST" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in Include Lib Misc Ext-dummy"
"LIBOBJDIR" : "Python/"
"PYTHONFRAMEWORKINSTALLDIR" : ""
"LIBPL" : "/usr/lib/python3.5/config-3.5m"
"PY_CPPFLAGS" : "-I. -I./Include"
"COVERAGE_INFO" : "/usr/src/photon/BUILD/Python-3.5.5/coverage.info"
"BLDSHARED" : "gcc -pthread -shared"
"LDCXXSHARED" : "g++ -pthread -shared"
"CPPFLAGS" : "-I. -I./Include"
"LIBOBJS" : ""
"MACHDEPPATH" : ":plat-linux"
"LINKFORSHARED" : "-Xlinker -export-dynamic"
"TCLTK_INCLUDES" : ""
"MANDIR" : "/usr/share/man"
"abs_srcdir" : "/usr/src/photon/BUILD/Python-3.5.5"
"PY3LIBRARY" : "libpython3.so"
"SUBDIRSTOO" : "Include Lib Misc"
"PGSRCS" : "\"
"LIBM" : "-lm"
"BLDLIBRARY" : "-L. -lpython3.5m"
"PYTHONFRAMEWORKDIR" : "no-framework"
"ENSUREPIP" : "upgrade"
"COREPYTHONPATH" : ":plat-linux"
"LIBRARY" : "libpython3.5m.a"
"QUICKTESTOPTS" : "-x test_subprocess test_io test_lib2to3 \"
"STRIPFLAG" : "-s"
"GITVERSION" : ""
"CONFIGURE_CFLAGS_NODIST" : "-Werror=declaration-after-statement"
"INSTSONAME" : "libpython3.5m.so.1.0"
"TESTPYTHONOPTS" : ""
"CFLAGS_ALIASING" : ""
"MKDIR_P" : "/bin/mkdir -p"
"LDLAST" : ""
"LIBRARY_OBJS_OMIT_FROZEN" : "\"
"LLVM_PROF_MERGER" : "true"
"MACHDESTLIB" : "/usr/lib/python3.5"
"CONFINCLUDEPY" : "/usr/include/python3.5m"
"PGENOBJS" : "\ \"
"INCLUDEPY" : "/usr/include/python3.5m"
"SHLIBS" : "-lpthread -ldl  -lutil"
"PYTHON_HEADERS" : "\"
"CC" : "gcc -pthread"
"SHELL" : "/bin/sh"
"IO_H" : "Modules/_io/_iomodule.h"
"CONFIGURE_CPPFLAGS" : ""
"SCRIPTDIR" : "/usr/lib"
"UNIVERSALSDK" : ""
"SRC_GDB_HOOKS" : "./Tools/gdb/libpython.py"
"CCSHARED" : "-fPIC"
"MACHDEPS" : "plat-linux"
"STRICT_SYSV_CURSES" : "/* Don't use ncurses extensions */"
"TESTRUNNER" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5 ./python ./Tools/scripts/run_tests.py"
"COVERAGE_REPORT" : "/usr/src/photon/BUILD/Python-3.5.5/lcov-report"
"PY_CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g"
"OBJECT_OBJS" : "\"
"INSTALL_SCRIPT" : "/bin/install -c"
"UNICODE_DEPS" : "\"
"LIBFFI_INCLUDEDIR" : ""
"MODULE_OBJS" : "\"
"SRCDIRS" : "Parser Grammar Objects Python Modules Mac Programs"
"PYTHON_OBJS" : "\"
"PY_CFLAGS_NODIST" : "-Werror=declaration-after-statement"
"PY_LDFLAGS" : ""
"CONFINCLUDEDIR" : "/usr/include"
"MACHDEP_OBJS" : ""
"LLVM_PROF_ERR" : "no"
"DISTDIRS" : "Include Lib Misc Ext-dummy"
"GITTAG" : ""
"PYTHONFRAMEWORK" : ""
"LLVM_PROF_FILE" : ""
"PGO_PROF_GEN_FLAG" : "-fprofile-generate"
"DESTPATH" : ""
"MODNAMES" : "_thread _signal posix errno pwd _sre _codecs _weakref _functools _operator _collections itertools atexit _stat time _locale _io zipimport faulthandler _tracemalloc _symtable xxsubtype"
"PGEN" : "Parser/pgen"
"TESTPYTHON" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5 ./python"
"exec_prefix" : "/usr"

Anchored allocation at 55e087c7aa40 of size c028
This allocation matches pattern PyDictKeysObject.
"CONFIGURE_LDFLAGS" : ""
"PLATDIR" : "plat-linux"
"HOST_GNU_TYPE" : "x86_64-pc-linux-gnu"
"LDFLAGS" : ""
"GITBRANCH" : ""
"POBJS" : "\"
"MULTIARCH" : ""
"SGI_ABI" : ""
"EXTRAMACHDEPPATH" : ""
"PYTHON_FOR_BUILD" : "./python -E"
"DESTLIB" : "/usr/lib/python3.5"
"PY_CPPFLAGS" : "-I. -I./Include"
"EXT_SUFFIX" : ".cpython-35m-x86_64-linux-gnu.so"
"CONFIGFILES" : "configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"GNULD" : "yes"
"TESTPATH" : ""
"CONFIGURE_CFLAGS" : "-O2 -g"
"LIBDIR" : "/usr/lib"
"DISTFILES" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"RANLIB" : "ranlib"
"platbase" : "/usr"
"abiflags" : "m"
"PY_FORMAT_SIZE_T" : ""z""
"SO" : ".cpython-35m-x86_64-linux-gnu.so"
"BINDIR" : "/usr/bin"
"INCLDIRSTOMAKE" : "/usr/include /usr/include /usr/include/python3.5m /usr/include/python3.5m"
"INSTALL_DATA" : "/bin/install -c -m 644"
"LDLAST" : ""
"SUBDIRS" : ""
"BUILDPYTHON" : "python"
"EXTRATESTOPTS" : ""
"EXE" : ""
"PYTHON_OBJS" : "\"
"CXX" : "g++ -pthread"
"IO_OBJS" : "\"
"py_version_short" : "3.5"
"DESTDIRS" : "/usr /usr/lib /usr/lib/python3.5 /usr/lib/python3.5/lib-dynload"
"BASECPPFLAGS" : ""
"LLVM_PROF_FILE" : ""
"PSRCS" : "\"
"PYTHONFRAMEWORKDIR" : "no-framework"
"PARSER_HEADERS" : "\"
"PGENSRCS" : "\ \"
"CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g"
"SCRIPTDIR" : "/usr/lib"
"NO_AS_NEEDED" : "-Wl,--no-as-needed"
"MAKESETUP" : "./Modules/makesetup"
"LN" : "ln"
"BASEMODLIBS" : ""
"DYNLOADFILE" : "dynload_shlib.o"
"LLVM_PROF_MERGER" : "true"
"MODLIBS" : ""
"LIBS" : "-lpthread -ldl  -lutil"
"SOABI" : "cpython-35m-x86_64-linux-gnu"
"MACOSX_DEPLOYMENT_TARGET" : ""
"PY_CORE_CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g -Werror=declaration-after-statement -I. -I./Include -fPIC -DPy_BUILD_CORE"
"INSTALL_SHARED" : "/bin/install -c -m 555"
"PYTHON" : "python"
"SYSLIBS" : "-lm"
"LDLIBRARY" : "libpython3.5m.so"
"OTHER_LIBTOOL_OPT" : ""
"DLLLIBRARY" : ""
"LINKFORSHARED" : "-Xlinker -export-dynamic"
"base" : "/usr"
"LDCXXSHARED" : "g++ -pthread -shared"
"CPPFLAGS" : "-I. -I./Include"
"PYTHONPATH" : ":plat-linux"
"PGSRCS" : "\"
"MODOBJS" : "Modules/_threadmodule.o  Modules/signalmodule.o  Modules/posixmodule.o  Modules/errnomodule.o  Modules/pwdmodule.o  Modules/_sre.o  Modules/_codecsmodule.o  Modules/_weakref.o  Modules/_functoolsmodule.o  Modules/_operator.o  Modules/_collectionsmodule.o  Modules/itertoolsmodule.o  Modules/atexitmodule.o  Modules/_stat.o  Modules/timemodule.o  Modules/_localemodule.o  Modules/_iomodule.o Modules/iobase.o Modules/fileio.o Modules/bytesio.o Modules/bufferedio.o Modules/textio.o Modules/stringio.o  Modules/zipimport.o  Modules/faulthandler.o  Modules/_tracemalloc.o Modules/hashtable.o  Modules/symtablemodule.o  Modules/xxsubtype.o"
"LIBM" : "-lm"
"BLDLIBRARY" : "-L. -lpython3.5m"
"READELF" : "readelf"
"ENSUREPIP" : "upgrade"
"LIBC" : ""
"COREPYTHONPATH" : ":plat-linux"
"GITVERSION" : ""
"INSTALL_PROGRAM" : "/bin/install -c"
"MACHDEPPATH" : ":plat-linux"
"INSTSONAME" : "libpython3.5m.so.1.0"
"TESTPYTHONOPTS" : ""
"MKDIR_P" : "/bin/mkdir -p"
"MACHDESTLIB" : "/usr/lib/python3.5"
"CONFINCLUDEPY" : "/usr/include/python3.5m"
"PYTHON_HEADERS" : "\"
"SHELL" : "/bin/sh"
"IO_H" : "Modules/_io/_iomodule.h"
"CONFIGURE_CPPFLAGS" : ""
"UNIVERSALSDK" : ""
"SRC_GDB_HOOKS" : "./Tools/gdb/libpython.py"
"CONFIGURE_CFLAGS_NODIST" : "-Werror=declaration-after-statement"
"TESTRUNNER" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5 ./python ./Tools/scripts/run_tests.py"
"INSTALL" : "/bin/install -c"
"PY_CFLAGS" : "-Wno-unused-result -Wsign-compare -DNDEBUG -O2 -g"
"LIBPC" : "/usr/lib/pkgconfig"
"PARSER_OBJS" : "\ Parser/myreadline.o Parser/parsetok.o Parser/tokenizer.o"
"LIBFFI_INCLUDEDIR" : ""
"MODULE_OBJS" : "\"
"CONFINCLUDEDIR" : "/usr/include"
"installed_platbase" : "/usr"
"QUICKTESTOPTS" : "-x test_subprocess test_io test_lib2to3 \"
"LOCALMODLIBS" : ""
"MACHDEP_OBJS" : ""
"DISTDIRS" : "Include Lib Misc Ext-dummy"
"GITTAG" : ""
"PYTHONFRAMEWORK" : ""
"PYTHON_FOR_REGEN" : "python"
"MODNAMES" : "_thread _signal posix errno pwd _sre _codecs _weakref _functools _operator _collections itertools atexit _stat time _locale _io zipimport faulthandler _tracemalloc _symtable xxsubtype"
"PGEN" : "Parser/pgen"
"SHLIB_SUFFIX" : ".so"
"SITEPATH" : ""
"CFLAGSFORSHARED" : "-fPIC"
"TESTOPTS" : ""
"prefix" : "/usr"
"VERSION" : "3.5"
"PYTHONFRAMEWORKPREFIX" : ""
"userbase" : "/root/.local"
"INCLUDEDIR" : "/usr/include"
"BINLIBDEST" : "/usr/lib/python3.5"
"BUILD_GNU_TYPE" : "x86_64-pc-linux-gnu"
"TESTPYTHON" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5 ./python"
"RETSIGTYPE" : "void"
"LIPO_32BIT_FLAGS" : ""
"MACHDEP" : "linux"
"PY_LDFLAGS" : ""
"TCLTK_LIBS" : ""
"CONFIG_ARGS" : "'CFLAGS=-O2 -g' 'CXXFLAGS=-O2 -g' '--prefix=/usr' '--bindir=/usr/bin' '--libdir=/usr/lib' '--enable-shared' '--with-system-expat' '--with-system-ffi' '--with-dbmliborder=gdbm:ndbm' 'PKG_CONFIG_PATH=:/usr/lib/pkgconfig:/usr/share/pkgconfig'"
"LDLIBRARYDIR" : ""
"PROFILE_TASK" : "-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessing_fork test_multiprocessing_forkserver test_multiprocessing_main_handling test_multiprocessing_spawn test_subprocess"
"CCSHARED" : "-fPIC"
"STRIPFLAG" : "-s"
"LIBRARY_OBJS" : "\"
"SIGNAL_OBJS" : ""
"DESTSHARED" : "/usr/lib/python3.5/lib-dynload"
"LIBSUBDIRS" : "tkinter tkinter/test tkinter/test/test_tkinter \"
"MAINCC" : "gcc -pthread"
"LIBPL" : "/usr/lib/python3.5/config-3.5m"
"RUNSHARED" : "LD_LIBRARY_PATH=/usr/src/photon/BUILD/Python-3.5.5"
"installed_base" : "/usr"
"BUILDEXE" : ""
"srcdir" : "/usr/lib/python3.5/config-3.5m"
"EXTRA_CFLAGS" : ""
"BYTESTR_DEPS" : "\"
"AR" : "ar"
"XMLLIBSUBDIRS" : "xml xml/dom xml/etree xml/parsers xml/sax"
"ABIFLAGS" : "m"
"PGO_PROF_USE_FLAG" : "-fprofile-use -fprofile-correction"
"BASECFLAGS" : "-Wno-unused-result -Wsign-compare"
"projectbase" : "/usr/bin"
"THREADOBJ" : "Python/thread.o"
"CFLAGS_NODIST" : ""
"PGOBJS" : "\"
"LDVERSION" : "3.5m"
"DLINCLDIR" : "."
"LINKCC" : "gcc -pthread"
"OPT" : "-DNDEBUG"
"PY_CFLAGS_NODIST" : "-Werror=declaration-after-statement"
"COVERAGE_REPORT_OPTIONS" : "--no-branch-coverage --title "CPython lcov report""
"ARFLAGS" : "rc"
"PY_FORMAT_LONG_LONG" : ""ll""
"datarootdir" : "/usr/share"
"PURIFY" : ""
"abs_builddir" : "/usr/src/photon/BUILD/Python-3.5.5"
"DIST" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in Include Lib Misc Ext-dummy"
"COVERAGE_REPORT" : "/usr/src/photon/BUILD/Python-3.5.5/lcov-report"
"COVERAGE_INFO" : "/usr/src/photon/BUILD/Python-3.5.5/coverage.info"
"LIBOBJS" : ""
"MANDIR" : "/usr/share/man"
"abs_srcdir" : "/usr/src/photon/BUILD/Python-3.5.5"
"PY3LIBRARY" : "libpython3.so"
"LIBRARY" : "libpython3.5m.a"
"LDSHARED" : "gcc -pthread -shared"
"py_version" : "3.5.5"
"PYTHONFRAMEWORKINSTALLDIR" : ""
"CFLAGS_ALIASING" : ""
"LIBRARY_OBJS_OMIT_FROZEN" : "\"
"PGENOBJS" : "\ \"
"INCLUDEPY" : "/usr/include/python3.5m"
"SHLIBS" : "-lpthread -ldl  -lutil"
"CC" : "gcc -pthread"
"RESSRCDIR" : "Mac/Resources/framework"
"py_version_nodot" : "35"
"BLDSHARED" : "gcc -pthread -shared"
"MACHDEPS" : "plat-linux"
"STRICT_SYSV_CURSES" : "/* Don't use ncurses extensions */"
"LIBDEST" : "/usr/lib/python3.5"
"OBJECT_OBJS" : "\"
"INSTALL_SCRIPT" : "/bin/install -c"
"UNICODE_DEPS" : "\"
"SRCDIRS" : "Parser Grammar Objects Python Modules Mac Programs"
"LIBOBJDIR" : "Python/"
"TCLTK_INCLUDES" : ""
"LLVM_PROF_ERR" : "no"
"DESTPATH" : ""
"SUBDIRSTOO" : "Include Lib Misc"
"exec_prefix" : "/usr"
"PGO_PROF_GEN_FLAG" : "-fprofile-generate"

Anchored allocation at 55e087c8b510 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.utf_8"

Anchored allocation at 55e087c8b750 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings"

Anchored allocation at 55e087c8dae0 of size e8
This allocation matches pattern PyDictKeysObject.
"name" : "<stdin>"

Anchored allocation at 55e087c8dc60 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "encodings"
"__cached__" : "/usr/lib/python3.5/encodings/__pycache__/__init__.cpython-35.pyc"
"_unknown" : "--unknown--"
"__package__" : "encodings"
"__doc__" : " Standard "encodings" Package

    Standard Python encoding modules are stored in this package
    directory.

    Codec modules must have names corresponding to normalized encoding
    names as defined in the normalize_encoding() function below, e.g.
    'utf-8' must be implemented by the module 'utf_8.py'.

    Each codec module must export the following interface:

    * getregentry() -> codecs.CodecInfo object
    The getregentry() API must return a CodecInfo object with encoder, decoder,
    incrementalencoder, incrementaldecoder, streamwriter and streamreader
    atttributes which adhere to the Python Codec Interface Standard.

    In addition, a module may optionally also define the following
    APIs which are then used by the package's codec search function:

    * getaliases() -> sequence of encoding name strings to use as aliases

    Alias names returned by getaliases() must be normalized encoding
    names as defined by normalize_encoding().

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"
"__file__" : "/usr/lib/python3.5/encodings/__init__.py"

Anchored allocation at 55e087c8f640 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c8fc80 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c90910 of size c28
This allocation matches pattern PyDictKeysObject.
"__name__" : "_codecs"
"__package__" : ""

Anchored allocation at 55e087c91540 of size c28
This allocation matches pattern PyDictKeysObject.
"__name__" : "_codecs"

Anchored allocation at 55e087c92520 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : " Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    "

Anchored allocation at 55e087c92960 of size e8
This allocation matches pattern PyDictKeysObject.
"name" : "<stdout>"

Anchored allocation at 55e087c92a50 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.utf_8"

Anchored allocation at 55e087c92ef0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c92f80 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "encodings.utf_8"
"__package__" : "encodings"
"__cached__" : "/usr/lib/python3.5/encodings/__pycache__/utf_8.cpython-35.pyc"
"__doc__" : " Python 'utf-8' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"
"__file__" : "/usr/lib/python3.5/encodings/utf_8.py"

Anchored allocation at 55e087c932b0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.utf_8"

Anchored allocation at 55e087c933d0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    "
"__module__" : "codecs"

Anchored allocation at 55e087c93ae0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c93b70 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "
"__module__" : "codecs"

Anchored allocation at 55e087c94250 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c94400 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c94490 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "
"__module__" : "codecs"

Anchored allocation at 55e087c94b70 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c94c00 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    "
"__module__" : "codecs"

Anchored allocation at 55e087c952e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c953d0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c95460 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"

Anchored allocation at 55e087c95b40 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c95c30 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c95cc0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : " Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

"
"__file__" : "/usr/lib/python3.5/encodings/aliases.py"
"__name__" : "encodings.aliases"
"__cached__" : "/usr/lib/python3.5/encodings/__pycache__/aliases.cpython-35.pyc"
"__package__" : "encodings"

Anchored allocation at 55e087c95e70 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c95f60 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c95ff0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"

Anchored allocation at 55e087c966d0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c96760 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "
"__module__" : "codecs"
"encoding" : "unknown"

Anchored allocation at 55e087c97170 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c97200 of size 628
This allocation matches pattern PyDictKeysObject.
"file_encoding" : "unknown"
"__doc__" : " StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the "decode" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    "
"__module__" : "codecs"
"data_encoding" : "unknown"

Anchored allocation at 55e087c97e30 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c97ec0 of size 1828
This allocation matches pattern PyDictKeysObject.
"__cached__" : "/usr/lib/python3.5/__pycache__/codecs.cpython-35.pyc"
"__doc__" : " codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"
"__name__" : "codecs"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/codecs.py"

Anchored allocation at 55e087c9bab0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9bba0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9bfe0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9c0d0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9c160 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.utf_8"

Anchored allocation at 55e087c9c600 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9c6f0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9cd70 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9cf20 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087c9d010 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087c9d100 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9d190 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9d840 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__file__" : "limitedDictionaryUse.py"
"__name__" : "__main__"

Anchored allocation at 55e087c9d9f0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "struct_siginfo: Result from sigwaitinfo or sigtimedwait.

This object may be accessed either as a tuple of
(si_signo, si_code, si_errno, si_pid, si_uid, si_status, si_band),
or via the attributes si_signo, si_code, and so on."

Anchored allocation at 55e087c9e0d0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9e160 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9e250 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087c9e350 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame."
"__name__" : "_signal"
"__package__" : ""

Anchored allocation at 55e087c9ef80 of size 1828
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame."
"__name__" : "_signal"

Anchored allocation at 55e087ca0b60 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca0bf0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087ca0ce0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087ca2900 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca29f0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Codec details when looking up the codec registry"
"__module__" : "codecs"

Anchored allocation at 55e087ca2ba0 of size 3028
This allocation matches pattern PyDictKeysObject.
"maclatin2" : "mac_latin2"
"utf_16be" : "utf_16_be"
"l4" : "iso8859_4"
"csibm273" : "cp273"
"ibm037" : "cp037"
"iso_8859_8_1988" : "iso8859_8"
"l5" : "iso8859_9"
"l3" : "iso8859_3"
"quotedprintable" : "quopri_codec"
"cp819" : "latin_1"
"l6" : "iso8859_10"
"latin5" : "iso8859_9"
"ibm850" : "cp850"
"iso_646.irv_1991" : "ascii"
"iso_8859_16_2001" : "iso8859_16"
"ibm864" : "cp864"
"zlib" : "zlib_codec"
"hz_gb_2312" : "hz"
"1140" : "cp1140"
"ansi_x3.4_1986" : "ascii"
"windows_1253" : "cp1253"
"iso_ir_109" : "iso8859_3"
"iso_8859_11" : "iso8859_11"
"l8" : "iso8859_14"
"csisolatinhebrew" : "iso8859_8"
"ibm857" : "cp857"
"csshiftjis" : "shift_jis"
"iso_ir_58" : "gb2312"
"950" : "cp950"
"eucjp" : "euc_jp"
"500" : "cp500"
"latin6" : "iso8859_10"
"cyrillic_asian" : "ptcp154"
"us_ascii" : "ascii"
"euc_cn" : "gb2312"
"ks_x_1001" : "euc_kr"
"iso_2022_jp_3" : "iso2022_jp_3"
"x_mac_japanese" : "shift_jis"
"csisolatincyrillic" : "iso8859_5"
"iso_8859_15" : "iso8859_15"
"roman8" : "hp_roman8"
"1125" : "cp1125"
"quoted_printable" : "quopri_codec"
"1256" : "cp1256"
"s_jisx0213" : "shift_jisx0213"
"ms949" : "cp949"
"ibm865" : "cp865"
"u16" : "utf_16"
"windows_1255" : "cp1255"
"646" : "ascii"
"kz_1048" : "kz1048"
"iso_8859_16" : "iso8859_16"
"iso_ir_127" : "iso8859_6"
"1255" : "cp1255"
"csibm858" : "cp858"
"sjis_2004" : "shift_jis_2004"
"korean" : "euc_kr"
"windows_1256" : "cp1256"
"l7" : "iso8859_13"
"cspc862latinhebrew" : "cp862"
"jisx0213" : "euc_jis_2004"
"850" : "cp850"
"cspc8codepage437" : "cp437"
"csisolatin2" : "iso8859_2"
"csibm869" : "cp869"
"ibm852" : "cp852"
"ks_c_5601_1987" : "euc_kr"
"euccn" : "gb2312"
"latin10" : "iso8859_16"
"iso_2022_jp_2004" : "iso2022_jp_2004"
"ebcdic_cp_ch" : "cp500"
"ebcdic_cp_ca" : "cp037"
"ujis" : "euc_jp"
"iso_8859_7" : "iso8859_7"
"ms1361" : "johab"
"ebcdic_cp_be" : "cp500"
"latin7" : "iso8859_13"
"iso2022jp_2004" : "iso2022_jp_2004"
"cyrillic" : "iso8859_5"
"hzgb" : "hz"
"utf8" : "utf_8"
"cp866u" : "cp1125"
"ansi_x3.4_1968" : "ascii"
"ksx1001" : "euc_kr"
"iso_8859_10" : "iso8859_10"
"iso8859" : "latin_1"
"iso_8859_13" : "iso8859_13"
"cp_is" : "cp861"
"936" : "gbk"
"iso_ir_199" : "iso8859_14"
"iso2022jp" : "iso2022_jp"
"sjisx0213" : "shift_jisx0213"
"037" : "cp037"
"u_jis" : "euc_jp"
"ibm775" : "cp775"
"cp936" : "gbk"
"ibm1125" : "cp1125"
"iso_8859_11_2001" : "iso8859_11"
"macgreek" : "mac_greek"
"iso2022jp_2" : "iso2022_jp_2"
"greek8" : "iso8859_7"
"iso_8859_4" : "iso8859_4"
"macroman" : "mac_roman"
"windows_1258" : "cp1258"
"iso_ir_138" : "iso8859_8"
"gb18030_2000" : "gb18030"
"cp1361" : "johab"
"l2" : "iso8859_2"
"utf" : "utf_8"
"iso_ir_126" : "iso8859_7"
"maciceland" : "mac_iceland"
"hex" : "hex_codec"
"ms_kanji" : "cp932"
"gb2312_80" : "gb2312"
"shiftjisx0213" : "shift_jisx0213"
"uu" : "uu_codec"
"iso646_us" : "ascii"
"sjis" : "shift_jis"
"iso_2022_jp_1" : "iso2022_jp_1"
"ibm860" : "cp860"
"unicode_1_1_utf_7" : "utf_7"
"big5_hkscs" : "big5hkscs"
"shiftjis2004" : "shift_jis_2004"
"csibm1026" : "cp1026"
"862" : "cp862"
"ms936" : "gbk"
"u8" : "utf_8"
"csisolatinarabic" : "iso8859_6"
"csibm861" : "cp861"
"iso_ir_148" : "iso8859_9"
"l1" : "latin_1"
"utf7" : "utf_7"
"csiso2022jp" : "iso2022_jp"
"iso_8859_10_1992" : "iso8859_10"
"csisolatin3" : "iso8859_3"
"quopri" : "quopri_codec"
"csptcp154" : "ptcp154"
"1251" : "cp1251"
"iso_8859_5_1988" : "iso8859_5"
"latin9" : "iso8859_15"
"iso_8859_14" : "iso8859_14"
"euckr" : "euc_kr"
"utf16" : "utf_16"
"ibm273" : "cp273"
"iso_8859_3_1988" : "iso8859_3"
"x_mac_simp_chinese" : "gb2312"
"ruscii" : "cp1125"
"us" : "ascii"
"uhc" : "cp949"
"l10" : "iso8859_16"
"860" : "cp860"
"utf8_ucs2" : "utf_8"
"iso_8859_9_1989" : "iso8859_9"
"iso_8859_2" : "iso8859_2"
"ms932" : "cp932"
"csisolatin4" : "iso8859_4"
"iso8859_1" : "latin_1"
"864" : "cp864"
"ibm424" : "cp424"
"utf8_ucs4" : "utf_8"
"x_mac_korean" : "euc_kr"
"ibm1026" : "cp1026"
"ibm858" : "cp858"
"csibm500" : "cp500"
"mskanji" : "cp932"
"csisolatin6" : "iso8859_10"
"866" : "cp866"
"bz2" : "bz2_codec"
"rot13" : "rot_13"
"ecma_114" : "iso8859_6"
"windows_1252" : "cp1252"
"ibm866" : "cp866"
"windows_1250" : "cp1250"
"ks_c_5601" : "euc_kr"
"macintosh" : "mac_roman"
"latin2" : "iso8859_2"
"8859" : "latin_1"
"unicodelittleunmarked" : "utf_16_le"
"latin1" : "latin_1"
"iso2022jp_ext" : "iso2022_jp_ext"
"iso_ir_100" : "latin_1"
"cp367" : "ascii"
"932" : "cp932"
"hebrew" : "iso8859_8"
"csiso2022kr" : "iso2022_kr"
"ibm863" : "cp863"
"cspc775baltic" : "cp775"
"csascii" : "ascii"
"iso_8859_7_1987" : "iso8859_7"
"tis620" : "tis_620"
"csibm037" : "cp037"
"hz_gb" : "hz"
"csibm855" : "cp855"
"iso_2022_jp_ext" : "iso2022_jp_ext"
"1253" : "cp1253"
"1257" : "cp1257"
"ksc5601" : "euc_kr"
"iso_8859_8" : "iso8859_8"
"csisolatingreek" : "iso8859_7"
"858" : "cp858"
"cspcp852" : "cp852"
"tis_620_0" : "tis_620"
"ibm367" : "ascii"
"ibm862" : "cp862"
"csibm860" : "cp860"
"windows_1254" : "cp1254"
"949" : "cp949"
"dbcs" : "mbcs"
"hkscs" : "big5hkscs"
"775" : "cp775"
"chinese" : "gb2312"
"ebcdic_cp_wt" : "cp037"
"iso_2022_jp_2" : "iso2022_jp_2"
"iso_ir_157" : "iso8859_10"
"857" : "cp857"
"273" : "cp273"
"ebcdic_cp_he" : "cp424"
"l9" : "iso8859_15"
"big5_tw" : "big5"
"rk1048" : "kz1048"
"x_mac_trad_chinese" : "big5"
"thai" : "iso8859_11"
"ibm1140" : "cp1140"
"iso_8859_6_1987" : "iso8859_6"
"ms950" : "cp950"
"iso_ir_6" : "ascii"
"csiso58gb231280" : "gb2312"
"unicodebigunmarked" : "utf_16_be"
"iso_2022_jp" : "iso2022_jp"
"iso_8859_1_1987" : "latin_1"
"windows_1257" : "cp1257"
"iso_8859_14_1998" : "iso8859_14"
"zip" : "zlib_codec"
"863" : "cp863"
"iso_8859_9" : "iso8859_9"
"855" : "cp855"
"iso_ir_226" : "iso8859_16"
"iso2022kr" : "iso2022_kr"
"r8" : "hp_roman8"
"csisolatin1" : "latin_1"
"iso_ir_110" : "iso8859_4"
"iso_8859_5" : "iso8859_5"
"ecma_118" : "iso8859_7"
"iso2022jp_1" : "iso2022_jp_1"
"iso_celtic" : "iso8859_14"
"cspc850multilingual" : "cp850"
"eucgb2312_cn" : "gb2312"
"iso_ir_144" : "iso8859_5"
"macturkish" : "mac_turkish"
"asmo_708" : "iso8859_6"
"csHPRoman8" : "hp_roman8"
"tis_620_2529_1" : "tis_620"
"latin4" : "iso8859_4"
"csibm864" : "cp864"
"1250" : "cp1250"
"ebcdic_cp_us" : "cp037"
"csibm863" : "cp863"
"1254" : "cp1254"
"ibm869" : "cp869"
"iso2022jp_3" : "iso2022_jp_3"
"csibm866" : "cp866"
"ibm855" : "cp855"
"ibm861" : "cp861"
"437" : "cp437"
"1252" : "cp1252"
"ibm437" : "cp437"
"maccentraleurope" : "mac_latin2"
"base_64" : "base64_codec"
"ibm500" : "cp500"
"1258" : "cp1258"
"865" : "cp865"
"utf32" : "utf_32"
"424" : "cp424"
"iso_8859_2_1987" : "iso8859_2"
"ansi_x3_4_1968" : "ascii"
"s_jis" : "shift_jis"
"latin3" : "iso8859_3"
"1026" : "cp1026"
"shiftjis" : "shift_jis"
"csibm865" : "cp865"
"latin8" : "iso8859_14"
"csisolatin5" : "iso8859_9"
"eucjis2004" : "euc_jis_2004"
"iso_8859_4_1988" : "iso8859_4"
"869" : "cp869"
"852" : "cp852"
"cskoi8r" : "koi8_r"
"base64" : "base64_codec"
"ebcdic_cp_nl" : "cp037"
"iso_8859_1" : "latin_1"
"u32" : "utf_32"
"iso_8859_3" : "iso8859_3"
"861" : "cp861"
"maccyrillic" : "mac_cyrillic"
"tis260" : "tactis"
"utf_32be" : "utf_32_be"
"utf_16le" : "utf_16_le"
"cp154" : "ptcp154"
"csibm424" : "cp424"
"cp_gr" : "cp869"
"iso_ir_166" : "tis_620"
"eucjisx0213" : "euc_jisx0213"
"tis_620_2529_0" : "tis_620"
"s_jis_2004" : "shift_jis_2004"
"pt154" : "ptcp154"
"ibm039" : "cp037"
"latin" : "latin_1"
"utf_32le" : "utf_32_le"
"iso_8859_6" : "iso8859_6"
"u7" : "utf_7"
"elot_928" : "iso8859_7"
"greek" : "iso8859_7"
"windows_1251" : "cp1251"
"iso_ir_101" : "iso8859_2"
"arabic" : "iso8859_6"
"euc_jis2004" : "euc_jis_2004"
"gb2312_1980" : "gb2312"
"ibm819" : "latin_1"
"csibm857" : "cp857"
"strk1048_2002" : "kz1048"
"iso_2022_kr" : "iso2022_kr"
"csbig5" : "big5"

Anchored allocation at 55e087ca6330 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "encodings.latin_1"
"__cached__" : "/usr/lib/python3.5/encodings/__pycache__/latin_1.cpython-35.pyc"
"__package__" : "encodings"
"__doc__" : " Python 'latin-1' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"
"__file__" : "/usr/lib/python3.5/encodings/latin_1.py"

Anchored allocation at 55e087ca6a10 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087ca6eb0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca6f40 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "encodings.latin_1"

Anchored allocation at 55e087ca73e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca74d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca75c0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca7650 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca77d0 of size e8
This allocation matches pattern PyDictKeysObject.
"mode" : "w"

Anchored allocation at 55e087ca7ad0 of size e8
This allocation matches pattern PyDictKeysObject.
"mode" : "w"

Anchored allocation at 55e087ca7bc0 of size e8
This allocation matches pattern PyDictKeysObject.
"name" : "<stderr>"

Anchored allocation at 55e087ca7e90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca7f80 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca8040 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "keyword"
"__cached__" : "/usr/lib/python3.5/__pycache__/keyword.cpython-35.pyc"
"__package__" : ""
"__doc__" : "Keywords (from "graminit.c")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
"
"__file__" : "/usr/lib/python3.5/keyword.py"

Anchored allocation at 55e087ca8df0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca9180 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca9270 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca9330 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ca9a20 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "classmethod(function) -> method

Convert a function to be a class method.

A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:

  class C:
      @classmethod
      def f(cls, arg1, arg2, ...):
          ...

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.

Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin."

Anchored allocation at 55e087ca9fb0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "_weakrefset"

Anchored allocation at 55e087caa510 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087caa640 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_weakrefset"
"__cached__" : "/usr/lib/python3.5/__pycache__/_weakrefset.cpython-35.pyc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/_weakrefset.py"

Anchored allocation at 55e087caac70 of size c28
This allocation matches pattern PyDictKeysObject.
"__module__" : "_weakrefset"

Anchored allocation at 55e087cabc50 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    A decorator indicating abstract classmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractclassmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'abstractclassmethod' is deprecated. Use 'classmethod' with
    'abstractmethod' instead.
    "
"__module__" : "abc"

Anchored allocation at 55e087cabe00 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cac2a0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    A decorator indicating abstract staticmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractstaticmethod
            def my_abstract_staticmethod(...):
                ...

    'abstractstaticmethod' is deprecated. Use 'staticmethod' with
    'abstractmethod' instead.
    "
"__module__" : "abc"

Anchored allocation at 55e087cac450 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "abc"
"__package__" : ""
"__cached__" : "/usr/lib/python3.5/__pycache__/abc.cpython-35.pyc"
"__doc__" : "Abstract Base Classes (ABCs) according to PEP 3119."
"__file__" : "/usr/lib/python3.5/abc.py"

Anchored allocation at 55e087caceb0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C(metaclass=ABCMeta):
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)

    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
    instead.
    "
"__module__" : "abc"

Anchored allocation at 55e087cad060 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cad150 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cad210 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
"__module__" : "abc"

Anchored allocation at 55e087cae410 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cae650 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Helper class that provides a standard way to create an ABC using
    inheritance.
    "
"__module__" : "abc"

Anchored allocation at 55e087cae890 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.

This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.

Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise UnsupportedOperation when operations they do not support are
called.

The basic type used for binary data read from or written to a file is
bytes. Other bytes-like objects are accepted as method arguments too.
In some cases (such as readinto), a writable object is required. Text
I/O classes work with str data.

Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.

IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.

IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:

with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
"
"__module__" : "io"

Anchored allocation at 55e087caea40 of size e8
This allocation matches pattern PyDictKeysObject.
"mode" : "r"

Anchored allocation at 55e087caeb30 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
"
"__name__" : "io"
"__cached__" : "/usr/lib/python3.5/__pycache__/io.cpython-35.pyc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/io.py"
"__author__" : "Guido van Rossum <guido@python.org>, Mike Verdone <mike.verdone@gmail.com>, Mark Russell <mark.russell@zen.co.uk>, Antoine Pitrou <solipsis@pitrou.net>, Amaury Forgeot d'Arc <amauryfa@gmail.com>, Benjamin Peterson <benjamin@python.org>"

Anchored allocation at 55e087cb0450 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for raw binary I/O."
"__module__" : "io"

Anchored allocation at 55e087cb0be0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cb0f40 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for buffered IO objects.

The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().

In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.

A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
"
"__module__" : "io"

Anchored allocation at 55e087cb14a0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cb16e0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for text I/O.

This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
"
"__module__" : "io"

Anchored allocation at 55e087cb27c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"include" : "{installed_base}/include/python{py_version_short}{abiflags}"
"platstdlib" : "{platbase}/lib/python{py_version_short}"
"stdlib" : "{installed_base}/lib/python{py_version_short}"
"data" : "{base}"
"scripts" : "{base}/bin"
"platinclude" : "{installed_platbase}/include/python{py_version_short}{abiflags}"
"purelib" : "{base}/lib/python{py_version_short}/site-packages"
"platlib" : "{platbase}/lib/python{py_version_short}/site-packages"

Anchored allocation at 55e087cb2b20 of size 3028
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'."
"__name__" : "errno"

Anchored allocation at 55e087cb5b50 of size 1828
This allocation matches pattern PyDictKeysObject.
"__name__" : "_stat"
"__doc__" : "S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout

S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others

UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file

ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME

FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)
"

Anchored allocation at 55e087cb7380 of size 1828
This allocation matches pattern PyDictKeysObject.
"__cached__" : "/usr/lib/python3.5/__pycache__/stat.cpython-35.pyc"
"__doc__" : "Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
"
"__name__" : "stat"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/stat.py"

Anchored allocation at 55e087cb8bb0 of size c28
This allocation matches pattern PyDictKeysObject.
"pathsep" : ":"
"curdir" : "."
"sep" : "/"
"__cached__" : "/usr/lib/python3.5/__pycache__/posixpath.cpython-35.pyc"
"pardir" : ".."
"defpath" : ":/bin:/usr/bin"
"__name__" : "posixpath"
"devnull" : "/dev/null"
"__doc__" : "Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/posixpath.py"
"extsep" : "."

Anchored allocation at 55e087cba5f0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "interactive prompt objects for printing the license text, a list of
    contributors and the copyright notice."
"__module__" : "_sitebuiltins"

Anchored allocation at 55e087cbb170 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Define the builtin 'help'.

    This is a wrapper around pydoc.help that provides a helpful message
    when 'help' is typed at the Python interactive prompt.

    Calling help() at the Python prompt starts an interactive help session.
    Calling help(thing) prints help for the python object 'thing'.
    "
"__module__" : "_sitebuiltins"

Anchored allocation at 55e087cbb320 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbc2a0 of size e8
This allocation matches pattern PyDictKeysObject.
"f" : "g"

Anchored allocation at 55e087cbc660 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbcae0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbce10 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
"
"__file__" : "/usr/lib/python3.5/genericpath.py"
"__name__" : "genericpath"
"__cached__" : "/usr/lib/python3.5/__pycache__/genericpath.cpython-35.pyc"
"__package__" : ""

Anchored allocation at 55e087cbd4d0 of size e8
This allocation matches pattern PyDictKeysObject.
"__module__" : "locale"

Anchored allocation at 55e087cbd5f0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbd6a0 of size f8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbdd20 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbde10 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbdf00 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbe070 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout

S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others

UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file

ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME

FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)
"
"__name__" : "_stat"
"__package__" : ""

Anchored allocation at 55e087cbeeb0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cbefa0 of size 1828
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'."
"__name__" : "errno"
"__package__" : ""

Anchored allocation at 55e087cc07d0 of size 1828
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc2000 of size 328
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc2570 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc3240 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Dummy implementation of DirEntry

    Only used internally by os.walk(bytes). Since os.walk() doesn't need the
    follow_symlinks parameter: don't implement it, always follow symbolic
    links.
    "
"__module__" : "os"

Anchored allocation at 55e087cc33f0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc35a0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc4440 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "_sitebuiltins"

Anchored allocation at 55e087cc6460 of size 3028
This allocation matches pattern PyDictKeysObject.
"__cached__" : "/usr/lib/python3.5/__pycache__/os.cpython-35.pyc"
"pathsep" : ":"
"devnull" : "/dev/null"
"__doc__" : "OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt or ce, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix', 'nt' or 'ce'.
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
"
"curdir" : "."
"extsep" : "."
"defpath" : ":/bin:/usr/bin"
"__name__" : "os"
"sep" : "/"
"name" : "posix"
"linesep" : "
"
"pardir" : ".."
"__package__" : ""
"__file__" : "/usr/lib/python3.5/os.py"

Anchored allocation at 55e087cc9610 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cc9e70 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cca4c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cca790 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cca880 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccb050 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccb380 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccb910 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccbb50 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccbd00 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccc380 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccc560 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cccaf0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cccd30 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cccee0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccd560 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccd710 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccd8c0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccda70 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccdc20 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccddd0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cce190 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cce340 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cce4f0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cce6a0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cce850 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccea00 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cceaf0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccebe0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cced90 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccf590 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccf770 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087ccfd00 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087ccff40 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd04d0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd07a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd0d30 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd1000 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd10f0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd11e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd1330 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
"__module__" : "collections.abc"

Anchored allocation at 55e087cd1e30 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
"
"__cached__" : "/usr/lib/python3.5/__pycache__/_collections_abc.cpython-35.pyc"
"__name__" : "collections.abc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/_collections_abc.py"

Anchored allocation at 55e087cd2a60 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
"__module__" : "collections.abc"

Anchored allocation at 55e087cd3140 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd38b0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd3fe0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd4310 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd4990 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd4b40 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd5540 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd5780 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd5870 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd5b10 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd63a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd6640 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
"__module__" : "collections.abc"

Anchored allocation at 55e087cd71c0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd7340 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This unifies bytes and bytearray.

    XXX Should add all their methods.
    "
"__module__" : "collections.abc"

Anchored allocation at 55e087cd74f0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd75e0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd76d0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd78e0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "os"

Anchored allocation at 55e087cd7ca0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections.abc"

Anchored allocation at 55e087cd8380 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "os"

Anchored allocation at 55e087cd8a60 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_sitebuiltins"
"__cached__" : "/usr/lib/python3.5/__pycache__/_sitebuiltins.cpython-35.pyc"
"__package__" : ""
"__doc__" : "
The objects used by the site module to add custom builtins.
"
"__file__" : "/usr/lib/python3.5/_sitebuiltins.py"

Anchored allocation at 55e087cd90c0 of size 628
This allocation matches pattern PyDictKeysObject.
"USER_BASE" : "/root/.local"
"__cached__" : "/usr/lib/python3.5/__pycache__/site.cpython-35.pyc"
"USER_SITE" : "/root/.local/lib/python3.5/site-packages"
"__name__" : "site"
"__doc__" : "Append module search paths for third-party packages to sys.path.

****************************************************************
* This module is automatically imported during initialization. *
****************************************************************

This will append site-specific paths to the module search path.  On
Unix (including Mac OSX), it starts with sys.prefix and
sys.exec_prefix (if different) and appends
lib/python<version>/site-packages.
On other platforms (such as Windows), it tries each of the
prefixes directly, as well as with lib/site-packages appended.  The
resulting directories, if they exist, are appended to sys.path, and
also inspected for path configuration files.

If a file named "pyvenv.cfg" exists one directory above sys.executable,
sys.prefix and sys.exec_prefix are set to that directory and
it is also checked for site-packages (sys.base_prefix and
sys.base_exec_prefix will always be the "real" prefixes of the Python
installation). If "pyvenv.cfg" (a bootstrap configuration file) contains
the key "include-system-site-packages" set to anything other than "false"
(case-insensitive), the system-level prefixes will still also be
searched for site-packages; otherwise they won't.

All of the resulting site-specific directories, if they exist, are
appended to sys.path, and also inspected for path configuration
files.

A path configuration file is a file whose name has the form
<package>.pth; its contents are additional directories (one per line)
to be added to sys.path.  Non-existing directories (or
non-directories) are never added to sys.path; no directory is added to
sys.path more than once.  Blank lines and lines beginning with
'#' are skipped. Lines starting with 'import' are executed.

For example, suppose sys.prefix and sys.exec_prefix are set to
/usr/local and there is a directory /usr/local/lib/python2.5/site-packages
with three subdirectories, foo, bar and spam, and two path
configuration files, foo.pth and bar.pth.  Assume foo.pth contains the
following:

  # foo package configuration
  foo
  bar
  bletch

and bar.pth contains:

  # bar package configuration
  bar

Then the following directories are added to sys.path, in this order:

  /usr/local/lib/python2.5/site-packages/bar
  /usr/local/lib/python2.5/site-packages/foo

Note that bletch is omitted because it doesn't exist; bar precedes foo
because bar.pth comes alphabetically before foo.pth; and spam is
omitted because it is not mentioned in either path configuration file.

The readline module is also automatically configured to enable
completion for systems that support it.  This can be overridden in
sitecustomize, usercustomize or PYTHONSTARTUP.

After these operations, an attempt is made to import a module
named sitecustomize, which can perform arbitrary additional
site-specific customizations.  If this import fails with an
ImportError exception, it is silently ignored.
"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/site.py"
"CONFIG_LINE" : "^(?P<key>(\w|[-_])+)\s*=\s*(?P<value>.*)\s*$"

Anchored allocation at 55e087cd9990 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cd9a20 of size 1a8
This allocation matches pattern PyDictKeysObject.
"include" : "{installed_base}/include/python"
"platstdlib" : "{base}/lib/python"
"stdlib" : "{installed_base}/lib/python"
"data" : "{base}"
"scripts" : "{base}/bin"
"platinclude" : "{installed_base}/include/python"
"purelib" : "{base}/lib/python"
"platlib" : "{base}/lib/python"

Anchored allocation at 55e087cd9bd0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"include" : "{installed_base}/Include"
"platstdlib" : "{base}/Lib"
"stdlib" : "{installed_base}/Lib"
"data" : "{base}"
"scripts" : "{base}/Scripts"
"platinclude" : "{installed_base}/Include"
"purelib" : "{base}/Lib/site-packages"
"platlib" : "{base}/Lib/site-packages"

Anchored allocation at 55e087cd9e70 of size 1a8
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/Python{py_version_nodot}"
"include" : "{userbase}/Python{py_version_nodot}/Include"
"data" : "{userbase}"
"scripts" : "{userbase}/Python{py_version_nodot}/Scripts"
"stdlib" : "{userbase}/Python{py_version_nodot}"
"purelib" : "{userbase}/Python{py_version_nodot}/site-packages"
"platlib" : "{userbase}/Python{py_version_nodot}/site-packages"

Anchored allocation at 55e087cda020 of size 1a8
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/lib/python{py_version_short}"
"include" : "{userbase}/include/python{py_version_short}"
"data" : "{userbase}"
"scripts" : "{userbase}/bin"
"stdlib" : "{userbase}/lib/python{py_version_short}"
"purelib" : "{userbase}/lib/python{py_version_short}/site-packages"
"platlib" : "{userbase}/lib/python{py_version_short}/site-packages"

Anchored allocation at 55e087cda1d0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/lib/python"
"include" : "{userbase}/include"
"data" : "{userbase}"
"scripts" : "{userbase}/bin"
"stdlib" : "{userbase}/lib/python"
"purelib" : "{userbase}/lib/python/site-packages"
"platlib" : "{userbase}/lib/python/site-packages"

Anchored allocation at 55e087cda380 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cda530 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python3.5/_sysconfigdata.py"
"__name__" : "_sysconfigdata"
"__cached__" : "/usr/lib/python3.5/__pycache__/_sysconfigdata.cpython-35.pyc"
"__package__" : ""

Anchored allocation at 55e087cda9a0 of size 1b8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A minimal subset of the locale module used at interpreter startup
(imported by the _io module), in order to reduce startup time.

Don't import directly from third-party code; use the `locale` module instead!
"
"__file__" : "/usr/lib/python3.5/_bootlocale.py"
"__name__" : "_bootlocale"
"__cached__" : "/usr/lib/python3.5/__pycache__/_bootlocale.cpython-35.pyc"
"__package__" : ""

Anchored allocation at 55e087cdb190 of size c28
This allocation matches pattern PyDictKeysObject.
"_PREFIX" : "/usr"
"pardir" : ".."
"__cached__" : "/usr/lib/python3.5/__pycache__/sysconfig.cpython-35.pyc"
"__doc__" : "Access to Python's configuration information."
"_PY_VERSION_SHORT_NO_DOT" : "35"
"_BASE_EXEC_PREFIX" : "/usr"
"_PROJECT_BASE" : "/usr/bin"
"_PY_VERSION" : "3.5.5"
"_PY_VERSION_SHORT" : "3.5"
"_BASE_PREFIX" : "/usr"
"__name__" : "sysconfig"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/sysconfig.py"
"_EXEC_PREFIX" : "/usr"

Anchored allocation at 55e087cdbdc0 of size 1828
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Support for POSIX locales."
"__name__" : "_locale"

Anchored allocation at 55e087cf0820 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf09a0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
Define names for built-in types that aren't directly accessible as a builtin.
"
"__name__" : "types"
"__cached__" : "/usr/lib/python3.5/__pycache__/types.cpython-35.pyc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/types.py"

Anchored allocation at 55e087cf1600 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf1900 of size 628
This allocation matches pattern PyDictKeysObject.
"__cached__" : "/usr/lib/python3.5/collections/__pycache__/abc.cpython-35.pyc"
"__name__" : "collections.abc"
"__package__" : "collections"
"__file__" : "/usr/lib/python3.5/collections/abc.py"

Anchored allocation at 55e087cf2bd0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__name__" : "namedtuple_CacheInfo"

Anchored allocation at 55e087cf2e10 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Tools that operate on functions."
"__name__" : "_functools"
"__package__" : ""

Anchored allocation at 55e087cf2fc0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Create a cached callable that wraps another function.

user_function:      the function being cached

maxsize:  0         for no caching
          None      for unlimited cache size
          n         for a bounded cache

typed:    False     cache f(3) and f(3.0) as identical calls
          True      cache f(3) and f(3.0) as distinct calls

cache_info_type:    namedtuple class with the fields:
                        hits misses currsize maxsize
"

Anchored allocation at 55e087cf3170 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
"

Anchored allocation at 55e087cf34a0 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_functools"
"__doc__" : "Tools that operate on functions."

Anchored allocation at 55e087cf37d0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "itemgetter(item, ...) --> itemgetter object

Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])"

Anchored allocation at 55e087cf3980 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
"__module__" : "weakref"

Anchored allocation at 55e087cf4200 of size e8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Data container common to multiple tee objects."

Anchored allocation at 55e087cf4fd0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087cf5210 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf53c0 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_collections"
"__doc__" : "High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
"

Anchored allocation at 55e087cf5780 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf5870 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf5940 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "attrgetter(attr, ...) --> attrgetter object

Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last)."

Anchored allocation at 55e087cf5af0 of size c28
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf6720 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* ChainMap     dict-like class for creating a single view of multiple mappings
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values
* UserDict     wrapper around dictionary objects for easier dict subclassing
* UserList     wrapper around list objects for easier list subclassing
* UserString   wrapper around string objects for easier string subclassing

"
"_repr_template" : "{name}=%r"
"_class_template" : "from builtins import property as _property, tuple as _tuple
from operator import itemgetter as _itemgetter
from collections import OrderedDict

class {typename}(tuple):
    '{typename}({arg_list})'

    __slots__ = ()

    _fields = {field_names!r}

    def __new__(_cls, {arg_list}):
        'Create new instance of {typename}({arg_list})'
        return _tuple.__new__(_cls, ({arg_list}))

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new {typename} object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != {num_fields:d}:
            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))
        return result

    def _replace(_self, **kwds):
        'Return a new {typename} object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, {field_names!r}, _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % list(kwds))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return self.__class__.__name__ + '({repr_fmt})' % self

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values.'
        return OrderedDict(zip(self._fields, self))

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

{field_defs}
"
"__cached__" : "/usr/lib/python3.5/collections/__pycache__/__init__.cpython-35.pyc"
"_field_template" : "    {name} = _property(_itemgetter({index:d}), doc='Alias for field number {index:d}')
"
"__name__" : "collections"
"__package__" : "collections"
"__file__" : "/usr/lib/python3.5/collections/__init__.py"

Anchored allocation at 55e087cf7620 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
"
"__name__" : "_collections"
"__package__" : ""

Anchored allocation at 55e087cf77d0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cf79e0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "methodcaller(name, ...) --> methodcaller object

Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1)."

Anchored allocation at 55e087cf8340 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience."
"__name__" : "_operator"
"__package__" : ""

Anchored allocation at 55e087cf8f70 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience."
"__name__" : "_operator"

Anchored allocation at 55e087cf9ba0 of size 1828
This allocation matches pattern PyDictKeysObject.
"__cached__" : "/usr/lib/python3.5/__pycache__/operator.cpython-35.pyc"
"__name__" : "operator"
"__doc__" : "Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience."
"__package__" : ""
"__file__" : "/usr/lib/python3.5/operator.py"

Anchored allocation at 55e087cfbbe0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cfbd90 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cfbe80 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cfbf10 of size 628
This allocation matches pattern PyDictKeysObject.
"__module__" : "reprlib"

Anchored allocation at 55e087cfc8f0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "deque([iterable[, maxlen]]) --> deque object

A list-like sequence optimized for data accesses near its endpoints."

Anchored allocation at 55e087cfd2d0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087cfd830 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087cfde00 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087cfe430 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    "
"__module__" : "collections"

Anchored allocation at 55e087cfea60 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
"__module__" : "weakref"

Anchored allocation at 55e087cff2a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087cff390 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d00180 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : " This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    "
"__module__" : "functools"
"__slots__" : "hashvalue"

Anchored allocation at 55e087d004b0 of size 328
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087d00a50 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d00ae0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : " A ChainMap groups multiple dicts (or other mappings) together
    to create a single, updateable view.

    The underlying mappings are stored in a list.  That list is public and can
    be accessed or updated using the *maps* attribute.  There is no other
    state.

    Lookups search the underlying mappings successively until a key is found.
    In contrast, writes, updates, and deletions only operate on the first
    mapping.

    "
"__module__" : "collections"

Anchored allocation at 55e087d014c0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d01550 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d01b40 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d02130 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d021c0 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d023b0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A more or less complete user-defined wrapper around list objects."
"__module__" : "collections"

Anchored allocation at 55e087d02fe0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d03750 of size 88
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d03b30 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "accumulate(iterable[, func]) --> accumulate object

Return series of accumulated sums (or other binary function results)."

Anchored allocation at 55e087d05c30 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"
"__name__" : "heapq"
"__cached__" : "/usr/lib/python3.5/__pycache__/heapq.cpython-35.pyc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/heapq.py"
"__about__" : ""

Anchored allocation at 55e087d06a70 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "starmap(function, sequence) --> starmap object

Return an iterator whose values are returned from the function evaluated
with an argument tuple taken from the given sequence."

Anchored allocation at 55e087d06d10 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_heapq"
"__package__" : ""
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"
"__about__" : ""
"__file__" : "/usr/lib/python3.5/lib-dynload/_heapq.cpython-35m-x86_64-linux-gnu.so"

Anchored allocation at 55e087d07570 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "_heapq"
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"
"__about__" : ""
"__file__" : "/usr/lib/python3.5/lib-dynload/_heapq.cpython-35m-x86_64-linux-gnu.so"

Anchored allocation at 55e087d07db0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "combinations(iterable, r) --> combinations object

Return successive r-length combinations of elements in the iterable.

combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)"

Anchored allocation at 55e087d07f60 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "combinations_with_replacement(iterable, r) --> combinations_with_replacement object

Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"

Anchored allocation at 55e087d08110 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "cycle(iterable) --> cycle object

Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely."

Anchored allocation at 55e087d082c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "dropwhile(predicate, iterable) --> dropwhile object

Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted."

Anchored allocation at 55e087d08470 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "takewhile(predicate, iterable) --> takewhile object

Return successive entries from an iterable as long as the 
predicate evaluates to true for each entry."

Anchored allocation at 55e087d08620 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "islice(iterable, stop) --> islice object
islice(iterable, start, stop[, step]) --> islice object

Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are 
skipped between successive calls.  Works like a slice() on a list
but returns an iterator."

Anchored allocation at 55e087d09ae0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "groupby(iterable[, keyfunc]) -> create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
"

Anchored allocation at 55e087d09e10 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "chain(*iterables) --> chain object

Return a chain object whose .__next__() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted."

Anchored allocation at 55e087d09fc0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "compress(data, selectors) --> iterator over selected data

Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements."

Anchored allocation at 55e087d0a170 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "filterfalse(function or None, sequence) --> filterfalse object

Return those items of sequence for which function(item) is false.
If function is None, return the items that are false."

Anchored allocation at 55e087d0a320 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "count(start=0, step=1) --> count object

Return a count object whose .__next__() method returns consecutive values.
Equivalent to:

    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
"

Anchored allocation at 55e087d0a4d0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object

Return a zip_longest object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
"

Anchored allocation at 55e087d0a8b0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "permutations(iterable[, r]) --> permutations object

Return successive r-length permutations of elements in the iterable.

permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)"

Anchored allocation at 55e087d0aa60 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "product(*iterables, repeat=1) --> product object

Cartesian product of input iterables.  Equivalent to nested for-loops.

For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).

To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).

product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ..."

Anchored allocation at 55e087d0af30 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly."

Anchored allocation at 55e087d0b0e0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Functional tools for creating and using iterators.

Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
"
"__name__" : "itertools"
"__package__" : ""

Anchored allocation at 55e087d0b710 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0b8c0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Iterator wrapped to make it copyable"

Anchored allocation at 55e087d0ba70 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Functional tools for creating and using iterators.

Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
"
"__name__" : "itertools"

Anchored allocation at 55e087d0c0a0 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0c250 of size 328
This allocation matches pattern PyDictKeysObject.
"__name__" : "reprlib"
"__cached__" : "/usr/lib/python3.5/__pycache__/reprlib.cpython-35.pyc"
"__package__" : ""
"__doc__" : "Redo the builtin repr() (representation) but with limits on most sizes."
"__file__" : "/usr/lib/python3.5/reprlib.py"

Anchored allocation at 55e087d0c580 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__doc__" : "defaultdict(default_factory[, ...]) --> dict with default factory

The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
"

Anchored allocation at 55e087d0c730 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0da90 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "
    A custom `weakref.ref` subclass which simulates a weak reference to
    a bound method, working around the lifetime problem of bound methods.
    "
"__module__" : "weakref"

Anchored allocation at 55e087d0ddc0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0e2f0 of size 1a8
This allocation matches pattern PyDictKeysObject.
"__module__" : "weakref"

Anchored allocation at 55e087d0e4a0 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0ea40 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
"
"__name__" : "weakref"
"__cached__" : "/usr/lib/python3.5/__pycache__/weakref.cpython-35.pyc"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/weakref.py"

Anchored allocation at 55e087d0f070 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d0fa40 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
"__module__" : "weakref"

Anchored allocation at 55e087d10070 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d10160 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d10250 of size 1828
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"

Anchored allocation at 55e087d12900 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Method descriptor with partial application of the given arguments
    and keywords.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    "
"__module__" : "functools"

Anchored allocation at 55e087d12c30 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Class for finalization of weakrefable objects

    finalize(obj, func, *args, **kwargs) returns a callable finalizer
    object which will be called when obj is garbage collected. The
    first time the finalizer is called it evaluates func(*arg, **kwargs)
    and returns the result. After this the finalizer is dead, and
    calling it just returns None.

    When the program exits any remaining finalizers for which the
    atexit attribute is true will be run in reverse order of creation.
    By default atexit is true.
    "
"__module__" : "weakref"

Anchored allocation at 55e087d13610 of size 1a8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d137c0 of size 328
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.

 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details."

Anchored allocation at 55e087d14b70 of size e8
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 55e087d14c60 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "functools.py - Tools for working with functions and callable objects
"
"__cached__" : "/usr/lib/python3.5/__pycache__/functools.cpython-35.pyc"
"__name__" : "functools"
"__package__" : ""
"__file__" : "/usr/lib/python3.5/functools.py"

Anchored allocation at 55e087d15890 of size 628
This allocation matches pattern PyDictKeysObject.
"__module__" : "types"

Anchored allocation at 55e087d182a0 of size 628
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.

Variables:

timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)

Functions:

time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone"
"__name__" : "time"
"__package__" : ""

Anchored allocation at 55e087d18be0 of size 328
This allocation matches pattern PyDictKeysObject.
"_source" : "from builtins import property as _property, tuple as _tuple
from operator import itemgetter as _itemgetter
from collections import OrderedDict

class CacheInfo(tuple):
    'CacheInfo(hits, misses, maxsize, currsize)'

    __slots__ = ()

    _fields = ('hits', 'misses', 'maxsize', 'currsize')

    def __new__(_cls, hits, misses, maxsize, currsize):
        'Create new instance of CacheInfo(hits, misses, maxsize, currsize)'
        return _tuple.__new__(_cls, (hits, misses, maxsize, currsize))

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new CacheInfo object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != 4:
            raise TypeError('Expected 4 arguments, got %d' % len(result))
        return result

    def _replace(_self, **kwds):
        'Return a new CacheInfo object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, ('hits', 'misses', 'maxsize', 'currsize'), _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % list(kwds))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return self.__class__.__name__ + '(hits=%r, misses=%r, maxsize=%r, currsize=%r)' % self

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values.'
        return OrderedDict(zip(self._fields, self))

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

    hits = _property(_itemgetter(0), doc='Alias for field number 0')

    misses = _property(_itemgetter(1), doc='Alias for field number 1')

    maxsize = _property(_itemgetter(2), doc='Alias for field number 2')

    currsize = _property(_itemgetter(3), doc='Alias for field number 3')

"
"__doc__" : "CacheInfo(hits, misses, maxsize, currsize)"
"__module__" : "functools"

Anchored allocation at 55e087d192c0 of size c28
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.

Variables:

timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)

Functions:

time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone"
"__name__" : "time"

Anchored allocation at 7f42b1028010 of size 30ff0
This allocation matches pattern PyDictKeysObject.
"" : ""
"_LoaderBasics" : "_LoaderBasics"
"functools" : "functools"
"current_token" : "current_token"
"CLD_DUMPED" : "CLD_DUMPED"
"line_buffering" : "line_buffering"
"joinuser" : "joinuser"
"LC_TIME" : "LC_TIME"
"inv" : "inv"
"UnicodeDecodeError" : "UnicodeDecodeError"
"PLATDIR" : "PLATDIR"
"ConnectionResetError" : "ConnectionResetError"
"normcase" : "normcase"
"cr_frame" : "cr_frame"
"getallocatedblocks" : "getallocatedblocks"
"O_RDWR" : "O_RDWR"
"SC_PRIORITY_SCHEDULING" : "SC_PRIORITY_SCHEDULING"
"aliased_encoding" : "aliased_encoding"
"SC_NZERO" : "SC_NZERO"
"W_OK" : "W_OK"
"EX_NOPERM" : "EX_NOPERM"
"PC_PRIO_IO" : "PC_PRIO_IO"
"HAVE_STRUCT_STAT_ST_BLKSIZE" : "HAVE_STRUCT_STAT_ST_BLKSIZE"
"F_ULOCK" : "F_ULOCK"
"execlp" : "execlp"
"suffixes" : "suffixes"
"_iterating" : "_iterating"
"endswith" : "endswith"
"LDFLAGS" : "LDFLAGS"
"getpriority" : "getpriority"
"order" : "order"
"GITBRANCH" : "GITBRANCH"
"win" : "win"
"BufferedWriter" : "BufferedWriter"
"orig_st" : "orig_st"
"ref" : "ref"
"CONFIGURE_LDFLAGS" : "CONFIGURE_LDFLAGS"
"setcopyright" : "setcopyright"
"eucjis2004" : "eucjis2004"
"POSIX_FADV_NORMAL" : "POSIX_FADV_NORMAL"
"readinto1" : "readinto1"
"create_builtin" : "create_builtin"
"fromhex" : "fromhex"
"__neg__" : "__neg__"
"HAVE_SYS_EPOLL_H" : "HAVE_SYS_EPOLL_H"
"SO" : "SO"
"big5hkscs" : "big5hkscs"
"CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : "CS_XBS5_ILP32_OFFBIG_LINTFLAGS"
"HAVE_SOCKADDR_SA_LEN" : "HAVE_SOCKADDR_SA_LEN"
"Awaitable" : "Awaitable"
"__lt__" : "__lt__"
"_le_from_ge" : "_le_from_ge"
"getwriter" : "getwriter"
"SIG_DFL" : "SIG_DFL"
"OTHER_LIBTOOL_OPT" : "OTHER_LIBTOOL_OPT"
"cspc8codepage437" : "cspc8codepage437"
"csisolatin2" : "csisolatin2"
"getuid" : "getuid"
"KeyboardInterrupt" : "KeyboardInterrupt"
"tcgetpgrp" : "tcgetpgrp"
"_weakref" : "_weakref"
"XATTR_CREATE" : "XATTR_CREATE"
"expanduser" : "expanduser"
"flush" : "flush"
"SC_MEMORY_PROTECTION" : "SC_MEMORY_PROTECTION"
"check_home" : "check_home"
"HAVE_TMPNAM_R" : "HAVE_TMPNAM_R"
"FILE_ATTRIBUTE_VIRTUAL" : "FILE_ATTRIBUTE_VIRTUAL"
"HAVE_MBRTOWC" : "HAVE_MBRTOWC"
"pathconf_names" : "pathconf_names"
"__eq__" : "__eq__"
"result" : "result"
"DOUBLE_IS_LITTLE_ENDIAN_IEEE754" : "DOUBLE_IS_LITTLE_ENDIAN_IEEE754"
"TextIOBase" : "TextIOBase"
"SCHED_RESET_ON_FORK" : "SCHED_RESET_ON_FORK"
"explicit_c3_mros" : "explicit_c3_mros"
"int" : "int"
"splitdrive" : "splitdrive"
"HAVE_LINK" : "HAVE_LINK"
"SC_NGROUPS_MAX" : "SC_NGROUPS_MAX"
"execve" : "execve"
"TESTPATH" : "TESTPATH"
"HAVE_UINTPTR_T" : "HAVE_UINTPTR_T"
"_OrderedDictKeysView" : "_OrderedDictKeysView"
"int_bytes" : "int_bytes"
"_heapreplace" : "_heapreplace"
"scripts" : "scripts"
"LockType" : "LockType"
"f_bfree" : "f_bfree"
"RANLIB" : "RANLIB"
"SC_PII_INTERNET_DGRAM" : "SC_PII_INTERNET_DGRAM"
"WITH_VALGRIND" : "WITH_VALGRIND"
"break" : "break"
"HAVE_SENDFILE" : "HAVE_SENDFILE"
"S_IWGRP" : "S_IWGRP"
"le" : "le"
"path" : "path"
"_git" : "_git"
"n" : "n"
"LookupError" : "LookupError"
"PY_FORMAT_SIZE_T" : "PY_FORMAT_SIZE_T"
"ibm860" : "ibm860"
"GeneratorType" : "GeneratorType"
"HAVE_SYS_ENDIAN_H" : "HAVE_SYS_ENDIAN_H"
"WCONTINUED" : "WCONTINUED"
"O_APPEND" : "O_APPEND"
"_bootstrap_module" : "_bootstrap_module"
"iso_ir_199" : "iso_ir_199"
"_itemgetter" : "_itemgetter"
"sysconfig" : "sysconfig"
"utf_16be" : "utf_16be"
"path_finder" : "path_finder"
"_abc_negative_cache_version" : "_abc_negative_cache_version"
"module_repr" : "module_repr"
"e" : "e"
"ABDAY_1" : "ABDAY_1"
"_repeat" : "_repeat"
"solaris" : "solaris"
"DAY_3" : "DAY_3"
"and_" : "and_"
"round" : "round"
"_check_arg_types" : "_check_arg_types"
"MemberDescriptorType" : "MemberDescriptorType"
"__closure__" : "__closure__"
"__rxor__" : "__rxor__"
"iso_8859_9" : "iso_8859_9"
"SC_STREAM_MAX" : "SC_STREAM_MAX"
"ST_MANDLOCK" : "ST_MANDLOCK"
"tis620" : "tis620"
"SC_UIO_MAXIOV" : "SC_UIO_MAXIOV"
"ms932" : "ms932"
"is_frozen_package" : "is_frozen_package"
"clock" : "clock"
"ibm424" : "ibm424"
"close" : "close"
"ignore" : "ignore"
"NotADirectoryError" : "NotADirectoryError"
"_PREFIX" : "_PREFIX"
"map" : "map"
"pathsep" : "pathsep"
"pieces" : "pieces"
"key_value" : "key_value"
"windows_1250" : "windows_1250"
"startpos" : "startpos"
"INCLDIRSTOMAKE" : "INCLDIRSTOMAKE"
"_lock" : "_lock"
"HAVE_MEMORY_H" : "HAVE_MEMORY_H"
"ZipImportError" : "ZipImportError"
"applocal" : "applocal"
"nlargest" : "nlargest"
"radix" : "radix"
"__missing__" : "__missing__"
"enablerlcompleter" : "enablerlcompleter"
"found" : "found"
"csascii" : "csascii"
"_joinrealpath" : "_joinrealpath"
"iso_8859_7_1987" : "iso_8859_7_1987"
"_check_name" : "_check_name"
"HAVE_SCHED_SETAFFINITY" : "HAVE_SCHED_SETAFFINITY"
"tzname" : "tzname"
"_init_pathinfo" : "_init_pathinfo"
"SC_THREAD_STACK_MIN" : "SC_THREAD_STACK_MIN"
"maxlevel" : "maxlevel"
"RTLD_GLOBAL" : "RTLD_GLOBAL"
"encoding" : "encoding"
"csisolatin1" : "csisolatin1"
"_extend_dict" : "_extend_dict"
"SIGCLD" : "SIGCLD"
"tee" : "tee"
"SUBDIRS" : "SUBDIRS"
"_spec_from_module" : "_spec_from_module"
"prompt" : "prompt"
"O_SYNC" : "O_SYNC"
"775" : "775"
"ABDAY_5" : "ABDAY_5"
"most_common" : "most_common"
"O_LARGEFILE" : "O_LARGEFILE"
"HAVE_FTELL64" : "HAVE_FTELL64"
"__rand__" : "__rand__"
"maxdict" : "maxdict"
"getsizeof" : "getsizeof"
"f_lasti" : "f_lasti"
"backslashreplace_errors" : "backslashreplace_errors"
"subcls" : "subcls"
"__dictoffset__" : "__dictoffset__"
"BOM_UTF16_BE" : "BOM_UTF16_BE"
"EXT_SUFFIX" : "EXT_SUFFIX"
"appendleft" : "appendleft"
"MAGIC_NUMBER" : "MAGIC_NUMBER"
"split" : "split"
"_ImportLockContext" : "_ImportLockContext"
"_BACKCOMPAT_MAGIC_NUMBER" : "_BACKCOMPAT_MAGIC_NUMBER"
"__setattr__" : "__setattr__"
"aliases" : "aliases"
"escape_encode" : "escape_encode"
"getdlopenflags" : "getdlopenflags"
"spec_from_file_location" : "spec_from_file_location"
"_deque_reverse_iterator" : "_deque_reverse_iterator"
"span" : "span"
"iso_8859_5" : "iso_8859_5"
"fasttypes" : "fasttypes"
"cp1251" : "cp1251"
"S_ISSOCK" : "S_ISSOCK"
"__bytes__" : "__bytes__"
"EX_USAGE" : "EX_USAGE"
"CLD_TRAPPED" : "CLD_TRAPPED"
"major" : "major"
"IO_OBJS" : "IO_OBJS"
"index" : "index"
"elem" : "elem"
"cp1258" : "cp1258"
"FILE_ATTRIBUTE_NORMAL" : "FILE_ATTRIBUTE_NORMAL"
"HAVE_TIMES" : "HAVE_TIMES"
"repr_deque" : "repr_deque"
"UF_NODUMP" : "UF_NODUMP"
"HAVE_SETEUID" : "HAVE_SETEUID"
"xor" : "xor"
"floordiv" : "floordiv"
"DESTDIRS" : "DESTDIRS"
"HAVE_UINT32_T" : "HAVE_UINT32_T"
"isolated" : "isolated"
"self" : "self"
"reprlib" : "reprlib"
"get_platform" : "get_platform"
"maccentraleurope" : "maccentraleurope"
"HAVE_STDINT_H" : "HAVE_STDINT_H"
"ibm500" : "ibm500"
"mktime" : "mktime"
"f_blocks" : "f_blocks"
"SC_CHARCLASS_NAME_MAX" : "SC_CHARCLASS_NAME_MAX"
"getvalue" : "getvalue"
"HAVE_DUP3" : "HAVE_DUP3"
"SC_XOPEN_ENH_I18N" : "SC_XOPEN_ENH_I18N"
"with_traceback" : "with_traceback"
"_iskeyword" : "_iskeyword"
"__pow__" : "__pow__"
"replace_errors" : "replace_errors"
"SC_XOPEN_XCU_VERSION" : "SC_XOPEN_XCU_VERSION"
"whence" : "whence"
"lshift" : "lshift"
"PendingDeprecationWarning" : "PendingDeprecationWarning"
"frozen" : "frozen"
"rjust" : "rjust"
"MethodType" : "MethodType"
"_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY" : "_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY"
"ebcdic_cp_nl" : "ebcdic_cp_nl"
"HAVE_SYS_MODEM_H" : "HAVE_SYS_MODEM_H"
"from_iterable" : "from_iterable"
"starmap" : "starmap"
"open" : "open"
"__imod__" : "__imod__"
"join" : "join"
"_CHUNK_SIZE" : "_CHUNK_SIZE"
"HAVE_FUTIMESAT" : "HAVE_FUTIMESAT"
"WRAPPER_UPDATES" : "WRAPPER_UPDATES"
"buffer" : "buffer"
"columns" : "columns"
"finalize" : "finalize"
"SIGCHLD" : "SIGCHLD"
"add" : "add"
"owner" : "owner"
"__text_signature__" : "__text_signature__"
"1255" : "1255"
"NotImplementedError" : "NotImplementedError"
"SC_ULONG_MAX" : "SC_ULONG_MAX"
"SC_BC_DIM_MAX" : "SC_BC_DIM_MAX"
"PC_ASYNC_IO" : "PC_ASYNC_IO"
"DYNLOADFILE" : "DYNLOADFILE"
"HAVE_UNLINKAT" : "HAVE_UNLINKAT"
"SC_GETGR_R_SIZE_MAX" : "SC_GETGR_R_SIZE_MAX"
"SimpleNamespace" : "SimpleNamespace"
"strk1048_2002" : "strk1048_2002"
"iso_2022_kr" : "iso_2022_kr"
"type" : "type"
"_blocking_on" : "_blocking_on"
"ABIFLAGS" : "ABIFLAGS"
"CS_XBS5_ILP32_OFF32_LDFLAGS" : "CS_XBS5_ILP32_OFF32_LDFLAGS"
"__inv__" : "__inv__"
"wait3" : "wait3"
"FILE_ATTRIBUTE_ARCHIVE" : "FILE_ATTRIBUTE_ARCHIVE"
"LIBS" : "LIBS"
"HAVE_EPOLL" : "HAVE_EPOLL"
"excepthook" : "excepthook"
"get_path" : "get_path"
"HAVE_SYS_POLL_H" : "HAVE_SYS_POLL_H"
"dirs" : "dirs"
"SC_NPROCESSORS_ONLN" : "SC_NPROCESSORS_ONLN"
"SC_XOPEN_CRYPT" : "SC_XOPEN_CRYPT"
"namespace" : "namespace"
"HAVE_STDARG_PROTOTYPES" : "HAVE_STDARG_PROTOTYPES"
"RETSIGTYPE" : "RETSIGTYPE"
"HAVE_GETHOSTBYNAME_R_6_ARG" : "HAVE_GETHOSTBYNAME_R_6_ARG"
"ecma_114" : "ecma_114"
"SC_SCHAR_MAX" : "SC_SCHAR_MAX"
"_optimize" : "_optimize"
"HAVE_SETITIMER" : "HAVE_SETITIMER"
"format_string" : "format_string"
"INSTALL_SHARED" : "INSTALL_SHARED"
"msg" : "msg"
"HAVE_RL_CALLBACK" : "HAVE_RL_CALLBACK"
"co_lnotab" : "co_lnotab"
"USE_COMPUTED_GOTOS" : "USE_COMPUTED_GOTOS"
"object" : "object"
"MAX" : "MAX"
"res" : "res"
"PYTHON_FOR_BUILD" : "PYTHON_FOR_BUILD"
"kwargs" : "kwargs"
"TM_IN_SYS_TIME" : "TM_IN_SYS_TIME"
"HAVE_CHOWN" : "HAVE_CHOWN"
"PYTHONCASEOK" : "PYTHONCASEOK"
"st_ctime_ns" : "st_ctime_ns"
"BYTESTR_DEPS" : "BYTESTR_DEPS"
"HAVE_EXPM1" : "HAVE_EXPM1"
"_checkReadable" : "_checkReadable"
"arg" : "arg"
"children_system" : "children_system"
"_find_and_load_unlocked" : "_find_and_load_unlocked"
"HAVE_LINUX_CAN_RAW_H" : "HAVE_LINUX_CAN_RAW_H"
"makepath" : "makepath"
"seen" : "seen"
"SC_SSIZE_MAX" : "SC_SSIZE_MAX"
"COVERAGE_REPORT_OPTIONS" : "COVERAGE_REPORT_OPTIONS"
"_IterationGuard" : "_IterationGuard"
"windows_1256" : "windows_1256"
"methodcaller" : "methodcaller"
"_gt_from_ge" : "_gt_from_ge"
"HAVE_GETLOGIN" : "HAVE_GETLOGIN"
"q" : "q"
"latin10" : "latin10"
"sigwait" : "sigwait"
"_getframe" : "_getframe"
"rlcompleter" : "rlcompleter"
"stat_float_times" : "stat_float_times"
"dup2" : "dup2"
"fsdecode" : "fsdecode"
"contains" : "contains"
"clock_settime" : "clock_settime"
"SC_SEM_NSEMS_MAX" : "SC_SEM_NSEMS_MAX"
"xmlcharrefreplace" : "xmlcharrefreplace"
"latin5" : "latin5"
"__IOBase_closed" : "__IOBase_closed"
"_wrap_close" : "_wrap_close"
"CFLAGSFORSHARED" : "CFLAGSFORSHARED"
"iterencode" : "iterencode"
"_path_join" : "_path_join"
"__doc__" : "__doc__"
"posix" : "posix"
"iso_8859_11_2001" : "iso_8859_11_2001"
"walk_into" : "walk_into"
"PACKAGE_URL" : "PACKAGE_URL"
"gen" : "gen"
"CS_LFS64_LINTFLAGS" : "CS_LFS64_LINTFLAGS"
"MON_8" : "MON_8"
"readall" : "readall"
"windows_1258" : "windows_1258"
"waitid_result" : "waitid_result"
"wait4" : "wait4"
"HAVE_GCC_ASM_FOR_MC68881" : "HAVE_GCC_ASM_FOR_MC68881"
"libedit" : "libedit"
"S_IRWXU" : "S_IRWXU"
"_current_frames" : "_current_frames"
"HAVE_SETLOCALE" : "HAVE_SETLOCALE"
"HAVE_BROKEN_PIPE_BUF" : "HAVE_BROKEN_PIPE_BUF"
"_shutdown" : "_shutdown"
"stderr" : "stderr"
"_open_registry" : "_open_registry"
"HAVE_BROKEN_UNSETENV" : "HAVE_BROKEN_UNSETENV"
"new_name" : "new_name"
"chr" : "chr"
"csibm037" : "csibm037"
"__radd__" : "__radd__"
"hexversion" : "hexversion"
"HAVE_BROKEN_MBSTOWCS" : "HAVE_BROKEN_MBSTOWCS"
"getppid" : "getppid"
"SyntaxWarning" : "SyntaxWarning"
"system_site" : "system_site"
"ebcdic_cp_be" : "ebcdic_cp_be"
"BytesIO" : "BytesIO"
"windows_1252" : "windows_1252"
"X87_DOUBLE_ROUNDING" : "X87_DOUBLE_ROUNDING"
"false" : "false"
"R_OK" : "R_OK"
"__hash__" : "__hash__"
"killpg" : "killpg"
"UnicodeError" : "UnicodeError"
"sort" : "sort"
"__get__" : "__get__"
"init_filename" : "init_filename"
"getpwuid" : "getpwuid"
"Makefile" : "Makefile"
"_Info" : "_Info"
"_collections_abc" : "_collections_abc"
"_proxy" : "_proxy"
"euc_jis2004" : "euc_jis2004"
"getincrementalencoder" : "getincrementalencoder"
"SC_PII_OSI_M" : "SC_PII_OSI_M"
"waitid" : "waitid"
"candidate" : "candidate"
"cp936" : "cp936"
"WITH_LIBINTL" : "WITH_LIBINTL"
"TypeError" : "TypeError"
"BOM_LE" : "BOM_LE"
"_Printer__linecnt" : "_Printer__linecnt"
"header" : "header"
"__wrapped__" : "__wrapped__"
"ms950" : "ms950"
"__setup" : "__setup"
"MappingView" : "MappingView"
"localeconv" : "localeconv"
"iso8859_13" : "iso8859_13"
"sched_setaffinity" : "sched_setaffinity"
"wait" : "wait"
"HAVE_STRUCT_STAT_ST_RDEV" : "HAVE_STRUCT_STAT_ST_RDEV"
"Container" : "Container"
"linux" : "linux"
"readonly" : "readonly"
"ptcp154" : "ptcp154"
"cp1252" : "cp1252"
"HAVE_LSTAT" : "HAVE_LSTAT"
"co_code" : "co_code"
"loader" : "loader"
"list_reverseiterator" : "list_reverseiterator"
"mac_iceland" : "mac_iceland"
"conf_basename" : "conf_basename"
"utf_8_decode" : "utf_8_decode"
"__len__" : "__len__"
"memo" : "memo"
"namedtuple" : "namedtuple"
"iso2022jp" : "iso2022jp"
"ST_INO" : "ST_INO"
"opt_level" : "opt_level"
"ttyname" : "ttyname"
"__not__" : "__not__"
"init_frozen" : "init_frozen"
"unsetenv" : "unsetenv"
"abort" : "abort"
"SIZEOF_LONG_DOUBLE" : "SIZEOF_LONG_DOUBLE"
"width" : "width"
"rest" : "rest"
"_getuserbase" : "_getuserbase"
"uu" : "uu"
"__setstate__" : "__setstate__"
"exc_traceback" : "exc_traceback"
"_code_to_bytecode" : "_code_to_bytecode"
"big5" : "big5"
"release" : "release"
"wakeup" : "wakeup"
"newdata" : "newdata"
"StreamReader" : "StreamReader"
"undef_rx" : "undef_rx"
"_abc_invalidation_counter" : "_abc_invalidation_counter"
"HAVE_ERF" : "HAVE_ERF"
"SC_EQUIV_CLASS_MAX" : "SC_EQUIV_CLASS_MAX"
"ibm861" : "ibm861"
"PY_CFLAGS" : "PY_CFLAGS"
"__round__" : "__round__"
"expand" : "expand"
"product" : "product"
"maxtuple" : "maxtuple"
"iso2022_jp_1" : "iso2022_jp_1"
"HAVE_SETREUID" : "HAVE_SETREUID"
"cpu_count" : "cpu_count"
"WITH_DOC_STRINGS" : "WITH_DOC_STRINGS"
"parse_and_bind" : "parse_and_bind"
"IOError" : "IOError"
"getsid" : "getsid"
"hash_randomization" : "hash_randomization"
"HAVE_NETPACKET_PACKET_H" : "HAVE_NETPACKET_PACKET_H"
"_mapping" : "_mapping"
"HAVE_FEXECVE" : "HAVE_FEXECVE"
"gb2312" : "gb2312"
"POSIX_FADV_DONTNEED" : "POSIX_FADV_DONTNEED"
"tm_yday" : "tm_yday"
"releaselevel" : "releaselevel"
"StreamWriter" : "StreamWriter"
"FILE_ATTRIBUTE_NO_SCRUB_DATA" : "FILE_ATTRIBUTE_NO_SCRUB_DATA"
"escape_decode" : "escape_decode"
"CONFINCLUDEDIR" : "CONFINCLUDEDIR"
"HAVE_MKTIME" : "HAVE_MKTIME"
"iso2022jp_ext" : "iso2022jp_ext"
"cp1026" : "cp1026"
"mac_greek" : "mac_greek"
"SC_LINE_MAX" : "SC_LINE_MAX"
"bitness" : "bitness"
"fillvalue" : "fillvalue"
"_requires_builtin_wrapper" : "_requires_builtin_wrapper"
"HAVE_BIND_TEXTDOMAIN_CODESET" : "HAVE_BIND_TEXTDOMAIN_CODESET"
"strprog" : "strprog"
"macturkish" : "macturkish"
"HAVE_PTHREAD_DESTRUCTOR" : "HAVE_PTHREAD_DESTRUCTOR"
"rmdir" : "rmdir"
"_remove_dead_weakref" : "_remove_dead_weakref"
"ABMON_3" : "ABMON_3"
"keys" : "keys"
"HAVE_SETHOSTNAME" : "HAVE_SETHOSTNAME"
"_release_save" : "_release_save"
"m" : "m"
"strftime" : "strftime"
"HAVE_RL_CATCH_SIGNAL" : "HAVE_RL_CATCH_SIGNAL"
"incrementalencoder" : "incrementalencoder"
"iso_ir_126" : "iso_ir_126"
"cp819" : "cp819"
"co_flags" : "co_flags"
"issubset" : "issubset"
"SIGCONT" : "SIGCONT"
"_module_repr_from_spec" : "_module_repr_from_spec"
"ABC" : "ABC"
"repr_fmt" : "repr_fmt"
"cp860" : "cp860"
"removexattr" : "removexattr"
"CS_LFS_LINTFLAGS" : "CS_LFS_LINTFLAGS"
"ST_UID" : "ST_UID"
"tm_mday" : "tm_mday"
"eucjp" : "eucjp"
"source" : "source"
"IO_H" : "IO_H"
"FILE_ATTRIBUTE_COMPRESSED" : "FILE_ATTRIBUTE_COMPRESSED"
"us_ascii" : "us_ascii"
"proc" : "proc"
"BOM_UTF32" : "BOM_UTF32"
"CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS"
"HAVE_SETRESGID" : "HAVE_SETRESGID"
"S_IMODE" : "S_IMODE"
"SC_XBS5_LPBIG_OFFBIG" : "SC_XBS5_LPBIG_OFFBIG"
"end" : "end"
"prefix" : "prefix"
"normalize_encoding" : "normalize_encoding"
"get" : "get"
"setreuid" : "setreuid"
"S_IFMT" : "S_IFMT"
"O_RDONLY" : "O_RDONLY"
"HAVE_SHADOW_H" : "HAVE_SHADOW_H"
"FutureWarning" : "FutureWarning"
"_codecs" : "_codecs"
"optfile" : "optfile"
"_get_sourcefile" : "_get_sourcefile"
"quotedprintable" : "quotedprintable"
"EX_NOINPUT" : "EX_NOINPUT"
"RTLD_NODELETE" : "RTLD_NODELETE"
"minor" : "minor"
"_local" : "_local"
"T_FMT_AMPM" : "T_FMT_AMPM"
"HAVE_SYS_KERN_CONTROL_H" : "HAVE_SYS_KERN_CONTROL_H"
"read1" : "read1"
"euccn" : "euccn"
"tm_year" : "tm_year"
"itervaluerefs" : "itervaluerefs"
"tm_sec" : "tm_sec"
"strides" : "strides"
"_safe_realpath" : "_safe_realpath"
"fset" : "fset"
"aix" : "aix"
"namespace_path" : "namespace_path"
"iso2022jp_2004" : "iso2022jp_2004"
"l10" : "l10"
"path_listb" : "path_listb"
"ksx1001" : "ksx1001"
"SC_THREAD_PRIO_INHERIT" : "SC_THREAD_PRIO_INHERIT"
"boundary" : "boundary"
"SIGVTALRM" : "SIGVTALRM"
"numerator" : "numerator"
"HKEY_CURRENT_USER" : "HKEY_CURRENT_USER"
"HAVE_CLOCK_GETRES" : "HAVE_CLOCK_GETRES"
"stat_result" : "stat_result"
"UF_COMPRESSED" : "UF_COMPRESSED"
"repr_tuple" : "repr_tuple"
"HAVE_IF_NAMEINDEX" : "HAVE_IF_NAMEINDEX"
"bufsize" : "bufsize"
"altsep" : "altsep"
"fget" : "fget"
"ARFLAGS" : "ARFLAGS"
"readline" : "readline"
"SC_THREADS" : "SC_THREADS"
"_Environ" : "_Environ"
"dumps" : "dumps"
"SIZEOF_SHORT" : "SIZEOF_SHORT"
"maxother" : "maxother"
"5" : "5"
"SC_MQ_OPEN_MAX" : "SC_MQ_OPEN_MAX"
"direction" : "direction"
"__pycache__" : "__pycache__"
"for" : "for"
"_requires_frozen_wrapper" : "_requires_frozen_wrapper"
"_load" : "_load"
"walk" : "walk"
"cmd" : "cmd"
"iso8859_16" : "iso8859_16"
"execv" : "execv"
"gettotalrefcount" : "gettotalrefcount"
"globals" : "globals"
"iso_8859_10_1992" : "iso_8859_10_1992"
"utf_32_le_encode" : "utf_32_le_encode"
"_fields" : "_fields"
"HAVE_PTHREAD_KILL" : "HAVE_PTHREAD_KILL"
"variables" : "variables"
"range_iterator" : "range_iterator"
"_make_unbound_method" : "_make_unbound_method"
"cache_info" : "cache_info"
"is_dir" : "is_dir"
"opname" : "opname"
"nodename" : "nodename"
"thread_info" : "thread_info"
"exc_type" : "exc_type"
"umask" : "umask"
"LDLIBRARYDIR" : "LDLIBRARYDIR"
"EX_OSFILE" : "EX_OSFILE"
"seteuid" : "seteuid"
"utf_32_be_encode" : "utf_32_be_encode"
"__main__" : "__main__"
"getegid" : "getegid"
"b" : "b"
"__spec__" : "__spec__"
"stream" : "stream"
"HAVE_GETRESUID" : "HAVE_GETRESUID"
"COVERAGE_INFO" : "COVERAGE_INFO"
"ks_c_5601" : "ks_c_5601"
"pardir" : "pardir"
"dot" : "dot"
"difference" : "difference"
"_is_text_encoding" : "_is_text_encoding"
"SC_NL_NMAX" : "SC_NL_NMAX"
"HAVE_FSEEKO" : "HAVE_FSEEKO"
"STRIPFLAG" : "STRIPFLAG"
"NGROUPS_MAX" : "NGROUPS_MAX"
"scheme" : "scheme"
"name" : "name"
"new_func" : "new_func"
"cp1140" : "cp1140"
"SC_XOPEN_XPG4" : "SC_XOPEN_XPG4"
"_self" : "_self"
"set_coroutine_wrapper" : "set_coroutine_wrapper"
"islink" : "islink"
"C" : "C"
"PC_REC_XFER_ALIGN" : "PC_REC_XFER_ALIGN"
"_validate_bytecode_header" : "_validate_bytecode_header"
"_findvar1_rx" : "_findvar1_rx"
"cp_gr" : "cp_gr"
"__globals__" : "__globals__"
"dbcs" : "dbcs"
"fstatvfs" : "fstatvfs"
"Exception" : "Exception"
"listxattr" : "listxattr"
"SIG_SETMASK" : "SIG_SETMASK"
"typed" : "typed"
"tell" : "tell"
"DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754" : "DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754"
"HAVE_SYMLINK" : "HAVE_SYMLINK"
"stat_info" : "stat_info"
"hits" : "hits"
"SC_REALTIME_SIGNALS" : "SC_REALTIME_SIGNALS"
"remove" : "remove"
"funcobj" : "funcobj"
"as_integer_ratio" : "as_integer_ratio"
"iso_8859_6_1987" : "iso_8859_6_1987"
"HAVE_SETEGID" : "HAVE_SETEGID"
"_winreg" : "_winreg"
"1254" : "1254"
"inc_dir" : "inc_dir"
"sigtimedwait" : "sigtimedwait"
"windows_1257" : "windows_1257"
"FileFinder" : "FileFinder"
"installed_base" : "installed_base"
"read" : "read"
"BufferError" : "BufferError"
"UnboundLocalError" : "UnboundLocalError"
"imatmul" : "imatmul"
"_sitebuiltins" : "_sitebuiltins"
"iso2022_jp_2004" : "iso2022_jp_2004"
"HAVE_FSTATAT" : "HAVE_FSTATAT"
"darwin" : "darwin"
"PC_MAX_INPUT" : "PC_MAX_INPUT"
"__ge__" : "__ge__"
"STDC_HEADERS" : "STDC_HEADERS"
"_gt_from_lt" : "_gt_from_lt"
"maxdeque" : "maxdeque"
"mappingproxy" : "mappingproxy"
"asmo_708" : "asmo_708"
"HAVE_ADDRINFO" : "HAVE_ADDRINFO"
"PathFinder" : "PathFinder"
"stop" : "stop"
"ABMON_10" : "ABMON_10"
"overwrite_doc" : "overwrite_doc"
"latin8" : "latin8"
"HAVE_ERFC" : "HAVE_ERFC"
"utf_32_le_decode" : "utf_32_le_decode"
"pop" : "pop"
"_CacheInfo" : "_CacheInfo"
"SC_PII_OSI_COTS" : "SC_PII_OSI_COTS"
"__ifloordiv__" : "__ifloordiv__"
"co_name" : "co_name"
"textdomain" : "textdomain"
"setuid" : "setuid"
"HAVE_ALARM" : "HAVE_ALARM"
"not" : "not"
"si_pid" : "si_pid"
"S_IFBLK" : "S_IFBLK"
"isdir" : "isdir"
"_call_with_frames_removed" : "_call_with_frames_removed"
"CS_LFS_LDFLAGS" : "CS_LFS_LDFLAGS"
"424" : "424"
"dev2" : "dev2"
"vars" : "vars"
"HAVE_SETGID" : "HAVE_SETGID"
"utf_7_encode" : "utf_7_encode"
"abs" : "abs"
"fstat" : "fstat"
"si_band" : "si_band"
"stat" : "stat"
"HAVE_STD_ATOMIC" : "HAVE_STD_ATOMIC"
"HAVE_SEM_TIMEDWAIT" : "HAVE_SEM_TIMEDWAIT"
"si_code" : "si_code"
"HAVE_LIBDLD" : "HAVE_LIBDLD"
"SC_2_SW_DEV" : "SC_2_SW_DEV"
"HAVE_MKNODAT" : "HAVE_MKNODAT"
"_tuple" : "_tuple"
"fp" : "fp"
"true" : "true"
"platstdlib" : "platstdlib"
"newlevel" : "newlevel"
"__init__" : "__init__"
"MON_1" : "MON_1"
"host" : "host"
"elements" : "elements"
"explicit_bases" : "explicit_bases"
"_get_default_scheme" : "_get_default_scheme"
"readv" : "readv"
"m1" : "m1"
"ModuleSpec" : "ModuleSpec"
"HAVE_SCHED_SETPARAM" : "HAVE_SCHED_SETPARAM"
"SIGPROF" : "SIGPROF"
"bit_length" : "bit_length"
"lchown" : "lchown"
"maps" : "maps"
"getctime" : "getctime"
"system" : "system"
"Set" : "Set"
"getpgrp" : "getpgrp"
"__delitem__" : "__delitem__"
"DLINCLDIR" : "DLINCLDIR"
"strip" : "strip"
"new_path" : "new_path"
"S_IRGRP" : "S_IRGRP"
"SC_RE_DUP_MAX" : "SC_RE_DUP_MAX"
"next" : "next"
"compile" : "compile"
"_mode" : "_mode"
"PURIFY" : "PURIFY"
"OPT" : "OPT"
"r" : "r"
"version_info" : "version_info"
"__repr__" : "__repr__"
"stdlib" : "stdlib"
"env_base" : "env_base"
"is_strict_base" : "is_strict_base"
"bytecode_path" : "bytecode_path"
"CS_XBS5_ILP32_OFF32_CFLAGS" : "CS_XBS5_ILP32_OFF32_CFLAGS"
"HAVE_MAKEDEV" : "HAVE_MAKEDEV"
"globals_" : "globals_"
"NO_AS_NEEDED" : "NO_AS_NEEDED"
"O_CLOEXEC" : "O_CLOEXEC"
"center" : "center"
"s" : "s"
"reverse" : "reverse"
"500" : "500"
"getsize" : "getsize"
"SC_2_C_BIND" : "SC_2_C_BIND"
"is_not" : "is_not"
"sched_param" : "sched_param"
"heappop" : "heappop"
"sitecustomize" : "sitecustomize"
"hasstr" : "hasstr"
"divmod" : "divmod"
"fchown" : "fchown"
"contiguous" : "contiguous"
"EX_UNAVAILABLE" : "EX_UNAVAILABLE"
"HAVE_SETSID" : "HAVE_SETSID"
"_siftup" : "_siftup"
"_false" : "_false"
"bytecode" : "bytecode"
"HAVE_SYS_STATVFS_H" : "HAVE_SYS_STATVFS_H"
"decoder" : "decoder"
"Py_Repr" : "Py_Repr"
"cp1253" : "cp1253"
"attrgetter" : "attrgetter"
"__stdin__" : "__stdin__"
"_exit" : "_exit"
"SC_EXPR_NEST_MAX" : "SC_EXPR_NEST_MAX"
"get_python_version" : "get_python_version"
"append" : "append"
"SC_CLK_TCK" : "SC_CLK_TCK"
"857" : "857"
"nl" : "nl"
"ABMON_2" : "ABMON_2"
"u8" : "u8"
"target_dict" : "target_dict"
"except" : "except"
"x_mac_simp_chinese" : "x_mac_simp_chinese"
"toppath" : "toppath"
"gi_yieldfrom" : "gi_yieldfrom"
"SF_APPEND" : "SF_APPEND"
"rng" : "rng"
"maxset" : "maxset"
"match" : "match"
"LIBPL" : "LIBPL"
"ST_APPEND" : "ST_APPEND"
"disable" : "disable"
"neg" : "neg"
"SC_BC_SCALE_MAX" : "SC_BC_SCALE_MAX"
"bits_per_digit" : "bits_per_digit"
"getenv" : "getenv"
"tobytes" : "tobytes"
"BLDSHARED" : "BLDSHARED"
"_verbose_message" : "_verbose_message"
"EX_SOFTWARE" : "EX_SOFTWARE"
"_Printer__data" : "_Printer__data"
"list" : "list"
"SC_2_C_DEV" : "SC_2_C_DEV"
"isatty" : "isatty"
"MemoryError" : "MemoryError"
"h" : "h"
"gb18030_2000" : "gb18030_2000"
"__loader__" : "__loader__"
"__del__" : "__del__"
"_is_owned" : "_is_owned"
"statvfs" : "statvfs"
"gbk" : "gbk"
"EX_CANTCREAT" : "EX_CANTCREAT"
"_Printer__lines" : "_Printer__lines"
"setitimer" : "setitimer"
"utf_8" : "utf_8"
"HAVE_LOG2" : "HAVE_LOG2"
"union" : "union"
"_method" : "_method"
"__subclasshook__" : "__subclasshook__"
"S_ISFIFO" : "S_ISFIFO"
"file_name" : "file_name"
"vals" : "vals"
"SC_SHRT_MIN" : "SC_SHRT_MIN"
"cache_path" : "cache_path"
"bytes_warning" : "bytes_warning"
"HAVE_LIBRESOLV" : "HAVE_LIBRESOLV"
"_cb" : "_cb"
"max_10_exp" : "max_10_exp"
"BOM_UTF8" : "BOM_UTF8"
"_main" : "_main"
"locked_lock" : "locked_lock"
"abs_srcdir" : "abs_srcdir"
"HAVE_STRDUP" : "HAVE_STRDUP"
"base_exec_prefix" : "base_exec_prefix"
"fxn" : "fxn"
"ibm273" : "ibm273"
"dispatch" : "dispatch"
"HAVE_COPYSIGN" : "HAVE_COPYSIGN"
"HAVE_GETHOSTBYNAME_R_5_ARG" : "HAVE_GETHOSTBYNAME_R_5_ARG"
"cyrillic" : "cyrillic"
"HAVE_STRUCT_STAT_ST_FLAGS" : "HAVE_STRUCT_STAT_ST_FLAGS"
"st_blksize" : "st_blksize"
"frozenset" : "frozenset"
"user_site" : "user_site"
"struct_siginfo" : "struct_siginfo"
"HAVE_SIGWAITINFO" : "HAVE_SIGWAITINFO"
"cache_from_source" : "cache_from_source"
"HAVE_INITGROUPS" : "HAVE_INITGROUPS"
"history" : "history"
"err" : "err"
"CS_XBS5_LP64_OFF64_LINTFLAGS" : "CS_XBS5_LP64_OFF64_LINTFLAGS"
"SIZEOF_LONG" : "SIZEOF_LONG"
"__weakref__" : "__weakref__"
"suffix" : "suffix"
"HAVE_SIGWAIT" : "HAVE_SIGWAIT"
"P_NOWAITO" : "P_NOWAITO"
"_lt_from_gt" : "_lt_from_gt"
"fromlist" : "fromlist"
"OSError" : "OSError"
"HAVE_CONIO_H" : "HAVE_CONIO_H"
"OpenWrapper" : "OpenWrapper"
"iso_ir_100" : "iso_ir_100"
"F_LOCK" : "F_LOCK"
"getter" : "getter"
"QueryValue" : "QueryValue"
"is_builtin" : "is_builtin"
"iso8859" : "iso8859"
"writable" : "writable"
"selfref" : "selfref"
"cycle" : "cycle"
"cache_clear" : "cache_clear"
"HAVE_NDIR_H" : "HAVE_NDIR_H"
"SC_WORD_BIT" : "SC_WORD_BIT"
"default_factory" : "default_factory"
"__slots__" : "__slots__"
"s2" : "s2"
"ASCII" : "ASCII"
"files" : "files"
"1253" : "1253"
"csisolatingreek" : "csisolatingreek"
"CS_XBS5_ILP32_OFFBIG_CFLAGS" : "CS_XBS5_ILP32_OFFBIG_CFLAGS"
"KeyError" : "KeyError"
"ERA" : "ERA"
"line0withoutend" : "line0withoutend"
"_lock_unlock_module" : "_lock_unlock_module"
"dict_keyiterator" : "dict_keyiterator"
"UnicodeWarning" : "UnicodeWarning"
"PATH" : "PATH"
"cp1254" : "cp1254"
"MON_3" : "MON_3"
"iso_2022_jp_2" : "iso_2022_jp_2"
"strerror" : "strerror"
"ebcdic_cp_he" : "ebcdic_cp_he"
"_abc_" : "_abc_"
"QUICKTESTOPTS" : "QUICKTESTOPTS"
"call_args" : "call_args"
"thai" : "thai"
"ibm1140" : "ibm1140"
"lseek" : "lseek"
"S" : "S"
"help" : "help"
"OpenKey" : "OpenKey"
"uname_result" : "uname_result"
"yes" : "yes"
"SIGFPE" : "SIGFPE"
"hp_roman8" : "hp_roman8"
"SC_LOGIN_NAME_MAX" : "SC_LOGIN_NAME_MAX"
"HAVE_NCURSES_H" : "HAVE_NCURSES_H"
"pause" : "pause"
"SIGTRAP" : "SIGTRAP"
"len" : "len"
"HAVE_EXECV" : "HAVE_EXECV"
"min_exp" : "min_exp"
"setresgid" : "setresgid"
"longrange_iterator" : "longrange_iterator"
"os_module" : "os_module"
"_sys" : "_sys"
"iterables" : "iterables"
"HAVE_STAT_TV_NSEC2" : "HAVE_STAT_TV_NSEC2"
"OrderedDict" : "OrderedDict"
"repr_set" : "repr_set"
"cp500" : "cp500"
"closed" : "closed"
"FILE_ATTRIBUTE_INTEGRITY_STREAM" : "FILE_ATTRIBUTE_INTEGRITY_STREAM"
"file_encoding" : "file_encoding"
"BUILDPYTHON" : "BUILDPYTHON"
"FileExistsError" : "FileExistsError"
"BOM_UTF16_LE" : "BOM_UTF16_LE"
"thread_module" : "thread_module"
"HAVE_RL_APPEND_HISTORY" : "HAVE_RL_APPEND_HISTORY"
"java" : "java"
"OBJECT_OBJS" : "OBJECT_OBJS"
"HAVE_FPATHCONF" : "HAVE_FPATHCONF"
"is_package" : "is_package"
"chmod" : "chmod"
"info" : "info"
"HAVE_LINUX_CAN_H" : "HAVE_LINUX_CAN_H"
"APPDATA" : "APPDATA"
"PIPE" : "PIPE"
"iskeyword" : "iskeyword"
"PC_REC_MIN_XFER_SIZE" : "PC_REC_MIN_XFER_SIZE"
"cmp_to_key" : "cmp_to_key"
"iso8859_9" : "iso8859_9"
"hash_bits" : "hash_bits"
"HKEY_LOCAL_MACHINE" : "HKEY_LOCAL_MACHINE"
"PYTHON_OBJS" : "PYTHON_OBJS"
"_lt_from_le" : "_lt_from_le"
"_heapify_max" : "_heapify_max"
"_class_template" : "_class_template"
"SIZEOF_UINTPTR_T" : "SIZEOF_UINTPTR_T"
"_EXEC_PREFIX" : "_EXEC_PREFIX"
"WEXITSTATUS" : "WEXITSTATUS"
"here" : "here"
"_path_finder" : "_path_finder"
"ABMON_6" : "ABMON_6"
"__module__" : "__module__"
"HAVE_STRUCT_STAT_ST_BLOCKS" : "HAVE_STRUCT_STAT_ST_BLOCKS"
"SC_MEMLOCK" : "SC_MEMLOCK"
"local_vars" : "local_vars"
"readlink" : "readlink"
"print_file_and_line" : "print_file_and_line"
"wb" : "wb"
"__truediv__" : "__truediv__"
"file_info" : "file_info"
"HAVE_BUILTIN_ATOMIC" : "HAVE_BUILTIN_ATOMIC"
"_files" : "_files"
"exec_func" : "exec_func"
"HAVE_PREAD" : "HAVE_PREAD"
"size" : "size"
"module_type" : "module_type"
"SUBDIRSTOO" : "SUBDIRSTOO"
"st_rdev" : "st_rdev"
"conjugate" : "conjugate"
"iso8859_7" : "iso8859_7"
"accumulate" : "accumulate"
"SC_MB_LEN_MAX" : "SC_MB_LEN_MAX"
"HAVE_FCHOWNAT" : "HAVE_FCHOWNAT"
"is_frozen" : "is_frozen"
"ABDAY_3" : "ABDAY_3"
"version" : "version"
"HAVE_GETPID" : "HAVE_GETPID"
"tm_hour" : "tm_hour"
"iso_8859_8_1988" : "iso_8859_8_1988"
"irix" : "irix"
"_findvar2_rx" : "_findvar2_rx"
"newpath" : "newpath"
"text" : "text"
"S_IFDOOR" : "S_IFDOOR"
"setgid" : "setgid"
"iso_2022_jp_2004" : "iso_2022_jp_2004"
"HAVE_SEM_OPEN" : "HAVE_SEM_OPEN"
"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" : "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"
"S_IFSOCK" : "S_IFSOCK"
"cache_tag" : "cache_tag"
"_get_spec" : "_get_spec"
"filename2" : "filename2"
"repeat" : "repeat"
"other_dict" : "other_dict"
"_functools" : "_functools"
"cp" : "cp"
"_get_exports_list" : "_get_exports_list"
"look" : "look"
"_cache_bytecode" : "_cache_bytecode"
"collections.abc" : "collections.abc"
"1125" : "1125"
"st_mode" : "st_mode"
"1256" : "1256"
"default" : "default"
"ibm865" : "ibm865"
"_ModuleLockManager" : "_ModuleLockManager"
"getlogin" : "getlogin"
"cached" : "cached"
"source_bytes_readline" : "source_bytes_readline"
"HAVE_GETHOSTBYNAME_R_3_ARG" : "HAVE_GETHOSTBYNAME_R_3_ARG"
"unicode_1_1_utf_7" : "unicode_1_1_utf_7"
"__set__" : "__set__"
"create_module" : "create_module"
"StringIO" : "StringIO"
"korean" : "korean"
"PACKAGE_VERSION" : "PACKAGE_VERSION"
"SIG_UNBLOCK" : "SIG_UNBLOCK"
"deque" : "deque"
"ST_NODIRATIME" : "ST_NODIRATIME"
"HAVE_LCHFLAGS" : "HAVE_LCHFLAGS"
"Mapping" : "Mapping"
"cygwin" : "cygwin"
"jisx0213" : "jisx0213"
"_field_template" : "_field_template"
"DESTLIB" : "DESTLIB"
"HAVE_UNAME" : "HAVE_UNAME"
"_execvpe" : "_execvpe"
"supports_fd" : "supports_fd"
"SC_PII_XTI" : "SC_PII_XTI"
"num_fields" : "num_fields"
"HAVE_STAT_TV_NSEC" : "HAVE_STAT_TV_NSEC"
"SF_NOUNLINK" : "SF_NOUNLINK"
"O_NOFOLLOW" : "O_NOFOLLOW"
"AR" : "AR"
"EOFError" : "EOFError"
"getgrouplist" : "getgrouplist"
"zipimporter" : "zipimporter"
"ImportWarning" : "ImportWarning"
"D_FMT" : "D_FMT"
"ReferenceType" : "ReferenceType"
"SIZEOF_FPOS_T" : "SIZEOF_FPOS_T"
"DAY_1" : "DAY_1"
"is" : "is"
"sitepackages" : "sitepackages"
"warnoptions" : "warnoptions"
"SHELL" : "SHELL"
"__ilshift__" : "__ilshift__"
"pybuilddir" : "pybuilddir"
"HAVE_MKNOD" : "HAVE_MKNOD"
"tuple" : "tuple"
"format_exception" : "format_exception"
"doc" : "doc"
"__format__" : "__format__"
"__floordiv__" : "__floordiv__"
"curdir" : "curdir"
"newchars" : "newchars"
"DISTFILES" : "DISTFILES"
"__bases__" : "__bases__"
"iso2022_jp" : "iso2022_jp"
"pt154" : "pt154"
"get_frozen_object" : "get_frozen_object"
"exec_builtin" : "exec_builtin"
"catch_warnings" : "catch_warnings"
"dircase" : "dircase"
"nsmallest" : "nsmallest"
"kz_1048" : "kz_1048"
"keyword" : "keyword"
"filters" : "filters"
"HAVE_SYS_BSDTTY_H" : "HAVE_SYS_BSDTTY_H"
"decodekey" : "decodekey"
"csibm1026" : "csibm1026"
"_compose_mro" : "_compose_mro"
"HAVE_GETWD" : "HAVE_GETWD"
"_siftup_max" : "_siftup_max"
"__ceil__" : "__ceil__"
"HAVE_STRLCPY" : "HAVE_STRLCPY"
"count" : "count"
"charbuffertype" : "charbuffertype"
"csptcp154" : "csptcp154"
"error" : "error"
"_parse_makefile" : "_parse_makefile"
"marshal" : "marshal"
"HAVE_FACCESSAT" : "HAVE_FACCESSAT"
"USER_SITE" : "USER_SITE"
"HAVE_ACCEPT4" : "HAVE_ACCEPT4"
"_search_registry" : "_search_registry"
"SC_MAPPED_FILES" : "SC_MAPPED_FILES"
"SC_NL_TEXTMAX" : "SC_NL_TEXTMAX"
"_module_repr" : "_module_repr"
"utf8_ucs2" : "utf8_ucs2"
"repr_str" : "repr_str"
"cr_code" : "cr_code"
"head" : "head"
"make_encoding_map" : "make_encoding_map"
"islower" : "islower"
"archive" : "archive"
"supports_bytes_environ" : "supports_bytes_environ"
"HAVE_FUTIMENS" : "HAVE_FUTIMENS"
"irshift" : "irshift"
"_recursive_repr" : "_recursive_repr"
"min_10_exp" : "min_10_exp"
"si_signo" : "si_signo"
"commonpath" : "commonpath"
"HAVE_GETHOSTBYNAME_R" : "HAVE_GETHOSTBYNAME_R"
"lstat" : "lstat"
"latin1" : "latin1"
"T" : "T"
"chars" : "chars"
"getswitchinterval" : "getswitchinterval"
"while" : "while"
"_onceregistry" : "_onceregistry"
"hex" : "hex"
"hz" : "hz"
"alias" : "alias"
"sync" : "sync"
"PY3LIBRARY" : "PY3LIBRARY"
"fdoc" : "fdoc"
"altzone" : "altzone"
"_compile_bytecode" : "_compile_bytecode"
"base_meta" : "base_meta"
"HAVE_SIGTIMEDWAIT" : "HAVE_SIGTIMEDWAIT"
"has_deadlock" : "has_deadlock"
"FILE_ATTRIBUTE_READONLY" : "FILE_ATTRIBUTE_READONLY"
"CallableProxyType" : "CallableProxyType"
"ctermid" : "ctermid"
"_RAW_MAGIC_NUMBER" : "_RAW_MAGIC_NUMBER"
"_abc_cache" : "_abc_cache"
"__rfloordiv__" : "__rfloordiv__"
"nonpositive" : "nonpositive"
"_clear_cache" : "_clear_cache"
"SC_2_UPE" : "SC_2_UPE"
"HAVE_PTY_H" : "HAVE_PTY_H"
"Sequence" : "Sequence"
"SEEK_HOLE" : "SEEK_HOLE"
"LIBDEST" : "LIBDEST"
"EXE" : "EXE"
"candidate_confs" : "candidate_confs"
"tail_module" : "tail_module"
"__flags__" : "__flags__"
"level" : "level"
"HAVE_GAI_STRERROR" : "HAVE_GAI_STRERROR"
"gi_code" : "gi_code"
"WUNTRACED" : "WUNTRACED"
"HAVE_WCSXFRM" : "HAVE_WCSXFRM"
"rk1048" : "rk1048"
"S_IXGRP" : "S_IXGRP"
"keywords" : "keywords"
"_relaxed_path_cache" : "_relaxed_path_cache"
"HAVE_SYS_FILE_H" : "HAVE_SYS_FILE_H"
"HAVE_GETPWENT" : "HAVE_GETPWENT"
"streamwriter" : "streamwriter"
"a" : "a"
"co_consts" : "co_consts"
"SIGUSR2" : "SIGUSR2"
"virtual_conf" : "virtual_conf"
"hash" : "hash"
"pwent" : "pwent"
"getdefaultencoding" : "getdefaultencoding"
"__aiter__" : "__aiter__"
"SC_RTSIG_MAX" : "SC_RTSIG_MAX"
"_last_parent_path" : "_last_parent_path"
"lower" : "lower"
"ino2" : "ino2"
"Writer" : "Writer"
"HAVE_OPENAT" : "HAVE_OPENAT"
"any" : "any"
"debug" : "debug"
"initgroups" : "initgroups"
"recursive_repr" : "recursive_repr"
"SOURCE_SUFFIXES" : "SOURCE_SUFFIXES"
"ProxyType" : "ProxyType"
"tzset" : "tzset"
"to_bytes" : "to_bytes"
"_bootstrap_external" : "_bootstrap_external"
"ibm437" : "ibm437"
"SEEK_DATA" : "SEEK_DATA"
"parse_config_h" : "parse_config_h"
"new_class" : "new_class"
"AM_STR" : "AM_STR"
"O_DIRECTORY" : "O_DIRECTORY"
"StreamRecoder" : "StreamRecoder"
"getresgid" : "getresgid"
"_registry" : "_registry"
"bytes_iterator" : "bytes_iterator"
"getsitepackages" : "getsitepackages"
"punct" : "punct"
"__author__" : "__author__"
"ByteString" : "ByteString"
"S_ISVTX" : "S_ISVTX"
"__dict__" : "__dict__"
"extension" : "extension"
"flags" : "flags"
"HAVE_SETPGRP" : "HAVE_SETPGRP"
"class_definition" : "class_definition"
"NOEXPR" : "NOEXPR"
"LLVM_PROF_FILE" : "LLVM_PROF_FILE"
"sched_get_priority_max" : "sched_get_priority_max"
"u32" : "u32"
"_OrderedDictItemsView" : "_OrderedDictItemsView"
"_ModuleLock" : "_ModuleLock"
"location" : "location"
"HAVE_UCS4_TCL" : "HAVE_UCS4_TCL"
"bz2_codec" : "bz2_codec"
"aRepr" : "aRepr"
"sys_module" : "sys_module"
"MON_9" : "MON_9"
"lockf" : "lockf"
"ST_NOSUID" : "ST_NOSUID"
"_count" : "_count"
"__defaults__" : "__defaults__"
"_find_module_shim" : "_find_module_shim"
"kwlist" : "kwlist"
"SC_THREAD_PRIO_PROTECT" : "SC_THREAD_PRIO_PROTECT"
"pycache" : "pycache"
"SC_TIMERS" : "SC_TIMERS"
"_remove" : "_remove"
"forkpty" : "forkpty"
"S_IFREG" : "S_IFREG"
"deepcopy" : "deepcopy"
"element" : "element"
"ipow" : "ipow"
"DynamicClassAttribute" : "DynamicClassAttribute"
"float_info" : "float_info"
"SIZEOF_VOID_P" : "SIZEOF_VOID_P"
"l5" : "l5"
"l3" : "l3"
"BASECPPFLAGS" : "BASECPPFLAGS"
"mapping" : "mapping"
"filename_base" : "filename_base"
"POSIX_SEMAPHORES_NOT_ENABLED" : "POSIX_SEMAPHORES_NOT_ENABLED"
"HAVE_TERM_H" : "HAVE_TERM_H"
"_script" : "_script"
"csisolatinhebrew" : "csisolatinhebrew"
"iso8859_4" : "iso8859_4"
"HAVE_DECL_ISINF" : "HAVE_DECL_ISINF"
"exec_dynamic" : "exec_dynamic"
"latin6" : "latin6"
"SC_2_C_VERSION" : "SC_2_C_VERSION"
"type_set" : "type_set"
"iso_2022_jp_3" : "iso_2022_jp_3"
"abs_paths" : "abs_paths"
"_checkWritable" : "_checkWritable"
"amd64" : "amd64"
"UNIVERSALSDK" : "UNIVERSALSDK"
"__enter__" : "__enter__"
"rightpos" : "rightpos"
"SC_XOPEN_XPG2" : "SC_XOPEN_XPG2"
"_Helper" : "_Helper"
"serial" : "serial"
"REGISTRY_KEY" : "REGISTRY_KEY"
"_possibly_sorted" : "_possibly_sorted"
"st_dev" : "st_dev"
"l4" : "l4"
"CLOCK_REALTIME" : "CLOCK_REALTIME"
"wrapped" : "wrapped"
"splitlines" : "splitlines"
"bind_textdomain_codeset" : "bind_textdomain_codeset"
"_builtin_from_name" : "_builtin_from_name"
"_install" : "_install"
"csisolatinarabic" : "csisolatinarabic"
"SC_SYNCHRONIZED_IO" : "SC_SYNCHRONIZED_IO"
"_print_dict" : "_print_dict"
"iadd" : "iadd"
"portions" : "portions"
"modulus" : "modulus"
"dict_values" : "dict_values"
"HAVE_TEMPNAM" : "HAVE_TEMPNAM"
"Codec" : "Codec"
"rstrip" : "rstrip"
"LINKFORSHARED" : "LINKFORSHARED"
"cp1256" : "cp1256"
"WSTOPPED" : "WSTOPPED"
"UserWarning" : "UserWarning"
"truediv" : "truediv"
"iso_8859_1" : "iso_8859_1"
"OverflowError" : "OverflowError"
"readable" : "readable"
"p" : "p"
"dict_items" : "dict_items"
"types" : "types"
"HAVE_SOCKETPAIR" : "HAVE_SOCKETPAIR"
"MON_6" : "MON_6"
"HAVE_LIBDL" : "HAVE_LIBDL"
"SC_BC_STRING_MAX" : "SC_BC_STRING_MAX"
"HAVE_KILL" : "HAVE_KILL"
"ST_NOEXEC" : "ST_NOEXEC"
"cutoff" : "cutoff"
"ibm1125" : "ibm1125"
"greek" : "greek"
"SC_XOPEN_SHM" : "SC_XOPEN_SHM"
"LDCXXSHARED" : "LDCXXSHARED"
"SIZEOF_PID_T" : "SIZEOF_PID_T"
"mbcs" : "mbcs"
"PYLONG_BITS_IN_DIGIT" : "PYLONG_BITS_IN_DIGIT"
"seek" : "seek"
"utf_32_decode" : "utf_32_decode"
"HAVE_EPOLL_CREATE1" : "HAVE_EPOLL_CREATE1"
"_calc___package__" : "_calc___package__"
"CodecRegistryError" : "CodecRegistryError"
"no" : "no"
"CPPFLAGS" : "CPPFLAGS"
"co_names" : "co_names"
"_data" : "_data"
"shiftjis2004" : "shiftjis2004"
"cache_module" : "cache_module"
"get_scheme_names" : "get_scheme_names"
"charbuffer" : "charbuffer"
"_osx_support" : "_osx_support"
"HAVE_SYS_SELECT_H" : "HAVE_SYS_SELECT_H"
"tm_wday" : "tm_wday"
"setegid" : "setegid"
"_path_isfile" : "_path_isfile"
"P_PGID" : "P_PGID"
"BINLIBDEST" : "BINLIBDEST"
"l2" : "l2"
"l1" : "l1"
"decoding_map" : "decoding_map"
"nl_langinfo" : "nl_langinfo"
"encodevalue" : "encodevalue"
"quopri" : "quopri"
"userhome" : "userhome"
"CS_XBS5_ILP32_OFF32_LIBS" : "CS_XBS5_ILP32_OFF32_LIBS"
"finally" : "finally"
"MODOBJS" : "MODOBJS"
"samestat" : "samestat"
"ruscii" : "ruscii"
"HAVE_READLINK" : "HAVE_READLINK"
"casefold" : "casefold"
"SC_VERSION" : "SC_VERSION"
"namereplace_errors" : "namereplace_errors"
"BufferedRandom" : "BufferedRandom"
"xmlcharrefreplace_errors" : "xmlcharrefreplace_errors"
"LIBM" : "LIBM"
"decode" : "decode"
"daylight" : "daylight"
"ENSUREPIP" : "ENSUREPIP"
"try" : "try"
"HAVE_SCHED_SETSCHEDULER" : "HAVE_SCHED_SETSCHEDULER"
"removedirs" : "removedirs"
"__build_class__" : "__build_class__"
"override" : "override"
"ownerclass" : "ownerclass"
"struct_time" : "struct_time"
"COREPYTHONPATH" : "COREPYTHONPATH"
"dict_itemiterator" : "dict_itemiterator"
"PTHREAD_SYSTEM_SCHED_SUPPORTED" : "PTHREAD_SYSTEM_SCHED_SUPPORTED"
"fsencode" : "fsencode"
"__getitem__" : "__getitem__"
"return" : "return"
"_write_atomic" : "_write_atomic"
"search" : "search"
"set_iterator" : "set_iterator"
"gb18030" : "gb18030"
"funcname" : "funcname"
"PYTHONVERBOSE" : "PYTHONVERBOSE"
"cwd" : "cwd"
"__objclass__" : "__objclass__"
"iso_8859_8" : "iso_8859_8"
"HAVE_NICE" : "HAVE_NICE"
"insert" : "insert"
"is_file" : "is_file"
"CS_XBS5_LPBIG_OFFBIG_LIBS" : "CS_XBS5_LPBIG_OFFBIG_LIBS"
"iterator" : "iterator"
"submodule_search_locations" : "submodule_search_locations"
"_find_impl" : "_find_impl"
"co_nlocals" : "co_nlocals"
"me" : "me"
"unlink" : "unlink"
"SIGXFSZ" : "SIGXFSZ"
"SYS_SELECT_WITH_SYS_TIME" : "SYS_SELECT_WITH_SYS_TIME"
"CONFINCLUDEPY" : "CONFINCLUDEPY"
"co_firstlineno" : "co_firstlineno"
"cp437" : "cp437"
"strcoll" : "strcoll"
"HAVE_LIBIEEE" : "HAVE_LIBIEEE"
"cp865" : "cp865"
"c" : "c"
"PGENSRCS" : "PGENSRCS"
"_set_fileattr" : "_set_fileattr"
"ST_NODEV" : "ST_NODEV"
"rsplit" : "rsplit"
"AttributeError" : "AttributeError"
"S_ISCHR" : "S_ISCHR"
"upgrade" : "upgrade"
"HAVE_MEMMOVE" : "HAVE_MEMMOVE"
"DOUBLE_IS_BIG_ENDIAN_IEEE754" : "DOUBLE_IS_BIG_ENDIAN_IEEE754"
"filemode" : "filemode"
"_sys_home" : "_sys_home"
"execusercustomize" : "execusercustomize"
"863" : "863"
"base_filename" : "base_filename"
"co_filename" : "co_filename"
"HAVE_SYMLINKAT" : "HAVE_SYMLINKAT"
"typecode" : "typecode"
"MAXLINES" : "MAXLINES"
"ecma_118" : "ecma_118"
"reset" : "reset"
"cls" : "cls"
"MAKESETUP" : "MAKESETUP"
"eucgb2312_cn" : "eucgb2312_cn"
"combinations_with_replacement" : "combinations_with_replacement"
"path_tmp" : "path_tmp"
"self_wr" : "self_wr"
"csibm864" : "csibm864"
"1250" : "1250"
"ebcdic_cp_us" : "ebcdic_cp_us"
"__mro__" : "__mro__"
"peek" : "peek"
"_exists" : "_exists"
"_DummyDirEntry" : "_DummyDirEntry"
"_repr_template" : "_repr_template"
"SIGABRT" : "SIGABRT"
"HAVE_LINUX_CAN_RAW_FD_FRAMES" : "HAVE_LINUX_CAN_RAW_FD_FRAMES"
"co_cellvars" : "co_cellvars"
"CS_LFS64_LIBS" : "CS_LFS64_LIBS"
"w" : "w"
"openpty" : "openpty"
"S_ISREG" : "S_ISREG"
"HAVE_DECL_ISNAN" : "HAVE_DECL_ISNAN"
"sleep" : "sleep"
"iso_8859_3_1988" : "iso_8859_3_1988"
"BASEMODLIBS" : "BASEMODLIBS"
"read_init_file" : "read_init_file"
"s_jis" : "s_jis"
"PC_NO_TRUNC" : "PC_NO_TRUNC"
"INCLUDEPY" : "INCLUDEPY"
"altsepIndex" : "altsepIndex"
"FrameType" : "FrameType"
"SIGSEGV" : "SIGSEGV"
"cb" : "cb"
"__self__" : "__self__"
"float_repr_style" : "float_repr_style"
"spawnlpe" : "spawnlpe"
"reenable_gc" : "reenable_gc"
"InterruptedError" : "InterruptedError"
"SC_2_CHAR_TERM" : "SC_2_CHAR_TERM"
"_POPULATE" : "_POPULATE"
"getstate" : "getstate"
"_io" : "_io"
"HAVE_ALLOCA_H" : "HAVE_ALLOCA_H"
"__xor__" : "__xor__"
"installed_platbase" : "installed_platbase"
"_convert" : "_convert"
"lower_suffix_contents" : "lower_suffix_contents"
"IncrementalEncoder" : "IncrementalEncoder"
"HAVE_FSEEK64" : "HAVE_FSEEK64"
"quit" : "quit"
"HAVE_TZNAME" : "HAVE_TZNAME"
"codecs" : "codecs"
"_heapreplace_max" : "_heapreplace_max"
"HAVE_C99_BOOL" : "HAVE_C99_BOOL"
"SC_THREAD_ATTR_STACKSIZE" : "SC_THREAD_ATTR_STACKSIZE"
"_path_stat" : "_path_stat"
"sched_getparam" : "sched_getparam"
"tp" : "tp"
"L" : "L"
"rpartition" : "rpartition"
"_make" : "_make"
"_abs" : "_abs"
"UF_IMMUTABLE" : "UF_IMMUTABLE"
"start" : "start"
"SHLIB_SUFFIX" : "SHLIB_SUFFIX"
"__invert__" : "__invert__"
"x_mac_trad_chinese" : "x_mac_trad_chinese"
"SC_TTY_NAME_MAX" : "SC_TTY_NAME_MAX"
"XATTR_SIZE_MAX" : "XATTR_SIZE_MAX"
"prev" : "prev"
"PACKAGE_BUGREPORT" : "PACKAGE_BUGREPORT"
"iconcat" : "iconcat"
"s1" : "s1"
"get_coroutine_wrapper" : "get_coroutine_wrapper"
"si_errno" : "si_errno"
"HAVE_LOCKF" : "HAVE_LOCKF"
"1140" : "1140"
"HAVE_DIRFD" : "HAVE_DIRFD"
"_OrderedDictValuesView" : "_OrderedDictValuesView"
"newitem" : "newitem"
"_lru_cache_wrapper" : "_lru_cache_wrapper"
"subclass" : "subclass"
"Quitter" : "Quitter"
"MODLIBS" : "MODLIBS"
"SC_INT_MAX" : "SC_INT_MAX"
"latin_1" : "latin_1"
"confstr_names" : "confstr_names"
"HAVE_BROKEN_POSIX_SEMAPHORES" : "HAVE_BROKEN_POSIX_SEMAPHORES"
"f_back" : "f_back"
"SITEPATH" : "SITEPATH"
"exit" : "exit"
"_CONFIG_VARS" : "_CONFIG_VARS"
"SC_PII" : "SC_PII"
"HAVE_LINUX_NETLINK_H" : "HAVE_LINUX_NETLINK_H"
"indices" : "indices"
"_tee" : "_tee"
"zip_iterator" : "zip_iterator"
"f_flag" : "f_flag"
"sub" : "sub"
"__int__" : "__int__"
"raw" : "raw"
"DEBUG_BUILD" : "DEBUG_BUILD"
"_ge_from_lt" : "_ge_from_lt"
"shift_jisx0213" : "shift_jisx0213"
"RecursionError" : "RecursionError"
"known_paths" : "known_paths"
"st_gid" : "st_gid"
"misses" : "misses"
"_DATE_FMT" : "_DATE_FMT"
"_expand_vars" : "_expand_vars"
"st_ctime" : "st_ctime"
"ConnectionError" : "ConnectionError"
"cp037" : "cp037"
"RuntimeError" : "RuntimeError"
"HAVE_USABLE_WCHAR_T" : "HAVE_USABLE_WCHAR_T"
"SC_SHRT_MAX" : "SC_SHRT_MAX"
"HAVE_SYS_IOCTL_H" : "HAVE_SYS_IOCTL_H"
"S_ISWHT" : "S_ISWHT"
"HAVE_RL_COMPLETION_MATCHES" : "HAVE_RL_COMPLETION_MATCHES"
"user" : "user"
"loader_state" : "loader_state"
"HAVE_SYSEXITS_H" : "HAVE_SYSEXITS_H"
"extensions" : "extensions"
"johab" : "johab"
"HAVE_SIGNAL_H" : "HAVE_SIGNAL_H"
"addusersitepackages" : "addusersitepackages"
"ibm858" : "ibm858"
"encode" : "encode"
"posix_home" : "posix_home"
"confstr" : "confstr"
"ibm775" : "ibm775"
"concat" : "concat"
"TANH_PRESERVES_ZERO_SIGN" : "TANH_PRESERVES_ZERO_SIGN"
"textwrap" : "textwrap"
"_property" : "_property"
"user_base" : "user_base"
"read_history_file" : "read_history_file"
"SIGNED_RIGHT_SHIFT_ZERO_FILLS" : "SIGNED_RIGHT_SHIFT_ZERO_FILLS"
"HAVE_WORKING_TZSET" : "HAVE_WORKING_TZSET"
"WIFSTOPPED" : "WIFSTOPPED"
"f_builtins" : "f_builtins"
"strict_errors" : "strict_errors"
"S_IFDIR" : "S_IFDIR"
"extsep" : "extsep"
"__sub__" : "__sub__"
"obj" : "obj"
"sched_rr_get_interval" : "sched_rr_get_interval"
"traceback" : "traceback"
"getcwd" : "getcwd"
"_INSTALL_SCHEMES" : "_INSTALL_SCHEMES"
"iso_8859_13" : "iso_8859_13"
"__getnewargs__" : "__getnewargs__"
"__abs__" : "__abs__"
"HAVE_ROUND" : "HAVE_ROUND"
"O_PATH" : "O_PATH"
"SIZEOF_INT" : "SIZEOF_INT"
"862" : "862"
"utf_16_le" : "utf_16_le"
"ms936" : "ms936"
"lexists" : "lexists"
"CS_XBS5_LP64_OFF64_CFLAGS" : "CS_XBS5_LP64_OFF64_CFLAGS"
"CodeType" : "CodeType"
"__rmatmul__" : "__rmatmul__"
"S_IXOTH" : "S_IXOTH"
"csisolatin3" : "csisolatin3"
"ENABLE_USER_SITE" : "ENABLE_USER_SITE"
"_HashedSeq" : "_HashedSeq"
"MACHDEP" : "MACHDEP"
"cp863" : "cp863"
"scandir" : "scandir"
"cls_or_self" : "cls_or_self"
"staticmethod" : "staticmethod"
"HAVE_PROCESS_H" : "HAVE_PROCESS_H"
"HAVE_SYS_DIR_H" : "HAVE_SYS_DIR_H"
"_load_module_shim" : "_load_module_shim"
"__name__" : "__name__"
"make_identity_dict" : "make_identity_dict"
"_CASE_INSENSITIVE_PLATFORMS" : "_CASE_INSENSITIVE_PLATFORMS"
"permutations" : "permutations"
"_setup" : "_setup"
"HAVE_DIRENT_H" : "HAVE_DIRENT_H"
"__ne__" : "__ne__"
"set" : "set"
"readlines" : "readlines"
"symlink" : "symlink"
"HAVE_UINT64_T" : "HAVE_UINT64_T"
"__iter__" : "__iter__"
"__index__" : "__index__"
"__self_class__" : "__self_class__"
"csisolatin6" : "csisolatin6"
"char" : "char"
"waitpid" : "waitpid"
"HAVE_LIBINTL_H" : "HAVE_LIBINTL_H"
"data_info" : "data_info"
"RawIOBase" : "RawIOBase"
"HAVE_PWRITE" : "HAVE_PWRITE"
"ascii_decode" : "ascii_decode"
"iso8859_15" : "iso8859_15"
"SRCDIRS" : "SRCDIRS"
"getaliases" : "getaliases"
"ItimerError" : "ItimerError"
"isspace" : "isspace"
"magic" : "magic"
"RESSRCDIR" : "RESSRCDIR"
"ibm863" : "ibm863"
"dict_valueiterator" : "dict_valueiterator"
"CS_PATH" : "CS_PATH"
"ST_SYNCHRONOUS" : "ST_SYNCHRONOUS"
"var" : "var"
"si_uid" : "si_uid"
"PYTHONFRAMEWORK" : "PYTHONFRAMEWORK"
"csibm855" : "csibm855"
"LIBRARY_OBJS" : "LIBRARY_OBJS"
"HAVE_TIMEGM" : "HAVE_TIMEGM"
"_chain" : "_chain"
"_replace" : "_replace"
"_proc" : "_proc"
"latin4" : "latin4"
"alive" : "alive"
"sigpending" : "sigpending"
"__ipow__" : "__ipow__"
"hkscs" : "hkscs"
"DAY_6" : "DAY_6"
"f_bsize" : "f_bsize"
"iso_ir_157" : "iso_ir_157"
"SF_SNAPSHOT" : "SF_SNAPSHOT"
"SIGINT" : "SIGINT"
"HAVE_LINUX_RANDOM_H" : "HAVE_LINUX_RANDOM_H"
"<module>" : "<module>"
"path_hook_for_FileFinder" : "path_hook_for_FileFinder"
"WCOREDUMP" : "WCOREDUMP"
"indexOf" : "indexOf"
"splitext" : "splitext"
"nt" : "nt"
"__func__" : "__func__"
"monotonic" : "monotonic"
"spawnvpe" : "spawnvpe"
"chdir" : "chdir"
"WEXITED" : "WEXITED"
"_acquire_restore" : "_acquire_restore"
"_dealloc_warn" : "_dealloc_warn"
"BaseException" : "BaseException"
"UserString" : "UserString"
"times_result" : "times_result"
"exc_value" : "exc_value"
"BOM32_BE" : "BOM32_BE"
"_generate_posix_vars" : "_generate_posix_vars"
"surrogateescape" : "surrogateescape"
"CS_LFS_CFLAGS" : "CS_LFS_CFLAGS"
"buffering" : "buffering"
"start_new_thread" : "start_new_thread"
"platinclude" : "platinclude"
"bytesdecoded" : "bytesdecoded"
"sizehint" : "sizehint"
"csiso58gb231280" : "csiso58gb231280"
"property" : "property"
"extend" : "extend"
"slice" : "slice"
"isinstance" : "isinstance"
"__rshift__" : "__rshift__"
"time" : "time"
"_find_and_load" : "_find_and_load"
"si_status" : "si_status"
"__rtruediv__" : "__rtruediv__"
"SC_THREAD_SAFE_FUNCTIONS" : "SC_THREAD_SAFE_FUNCTIONS"
"_func_ref" : "_func_ref"
"__interactivehook__" : "__interactivehook__"
"v" : "v"
"signal" : "signal"
"S_IRWXG" : "S_IRWXG"
"heapreplace" : "heapreplace"
"set_inheritable" : "set_inheritable"
"target" : "target"
"HAVE_GETGROUPS" : "HAVE_GETGROUPS"
"__trunc__" : "__trunc__"
"isnumeric" : "isnumeric"
"852" : "852"
"localtime" : "localtime"
"base64" : "base64"
"_heappop_max" : "_heappop_max"
"_abc_negative_cache" : "_abc_negative_cache"
"partialmethod" : "partialmethod"
"__iconcat__" : "__iconcat__"
"HAVE_SIGACTION" : "HAVE_SIGACTION"
"O_ASYNC" : "O_ASYNC"
"tis260" : "tis260"
"_check_name_wrapper" : "_check_name_wrapper"
"HAVE_POLL_H" : "HAVE_POLL_H"
"start_new" : "start_new"
"SC_JOB_CONTROL" : "SC_JOB_CONTROL"
"THREADOBJ" : "THREADOBJ"
"CodecInfo" : "CodecInfo"
"else" : "else"
"_find_spec_legacy" : "_find_spec_legacy"
"_Printer" : "_Printer"
"CFLAGS_NODIST" : "CFLAGS_NODIST"
"CLOCK_MONOTONIC_RAW" : "CLOCK_MONOTONIC_RAW"
"HAVE_ACOSH" : "HAVE_ACOSH"
"O_WRONLY" : "O_WRONLY"
"package" : "package"
"eof" : "eof"
"cache_token" : "cache_token"
"elif" : "elif"
"mod" : "mod"
"incrementaldecoder" : "incrementaldecoder"
"makedev" : "makedev"
"maclatin2" : "maclatin2"
"inspect" : "inspect"
"children_user" : "children_user"
"SCHED_RR" : "SCHED_RR"
"co_kwonlyargcount" : "co_kwonlyargcount"
"BLDLIBRARY" : "BLDLIBRARY"
"ibm037" : "ibm037"
"WRAPPER_ASSIGNMENTS" : "WRAPPER_ASSIGNMENTS"
"HAVE_DIRECT_H" : "HAVE_DIRECT_H"
"PC_ALLOC_SIZE_MIN" : "PC_ALLOC_SIZE_MIN"
"l6" : "l6"
"rot13" : "rot13"
"HAVE_SYS_LOCK_H" : "HAVE_SYS_LOCK_H"
"setregid" : "setregid"
"meth" : "meth"
"__delete__" : "__delete__"
"windows_1253" : "windows_1253"
"WANT_SIGFPE_HANDLER" : "WANT_SIGFPE_HANDLER"
"min" : "min"
"check_enableusersite" : "check_enableusersite"
"utf_16_ex_decode" : "utf_16_ex_decode"
"ibm857" : "ibm857"
"_init_non_posix" : "_init_non_posix"
"callable" : "callable"
"pwd" : "pwd"
"lru_cache" : "lru_cache"
"load_module" : "load_module"
"ABMON_9" : "ABMON_9"
"linesep" : "linesep"
"SC_PII_INTERNET" : "SC_PII_INTERNET"
"EXTRA_CFLAGS" : "EXTRA_CFLAGS"
"utf_16_le_encode" : "utf_16_le_encode"
"_GeneratorWrapper" : "_GeneratorWrapper"
"chain" : "chain"
"modnames" : "modnames"
"right" : "right"
"filenameIndex" : "filenameIndex"
"Hashable" : "Hashable"
"iso2022_kr" : "iso2022_kr"
"WindowsRegistryFinder" : "WindowsRegistryFinder"
"SC_GETPW_R_SIZE_MAX" : "SC_GETPW_R_SIZE_MAX"
"datarootdir" : "datarootdir"
"setrecursionlimit" : "setrecursionlimit"
"LINKCC" : "LINKCC"
"decorating_function" : "decorating_function"
"cp861" : "cp861"
"st" : "st"
"_partialmethod" : "_partialmethod"
"windows_1251" : "windows_1251"
"MON_10" : "MON_10"
"ITIMER_PROF" : "ITIMER_PROF"
"sethelper" : "sethelper"
"HAVE_GETRESGID" : "HAVE_GETRESGID"
"spawnl" : "spawnl"
"__subclasscheck__" : "__subclasscheck__"
"__await__" : "__await__"
"FILE_ATTRIBUTE_REPARSE_POINT" : "FILE_ATTRIBUTE_REPARSE_POINT"
"filename" : "filename"
"__PYVENV_LAUNCHER__" : "__PYVENV_LAUNCHER__"
"_keep_positive" : "_keep_positive"
"commonprefix" : "commonprefix"
"HAVE_KILLPG" : "HAVE_KILLPG"
"credits" : "credits"
"cp866u" : "cp866u"
"dict1" : "dict1"
"__complex__" : "__complex__"
"AssertionError" : "AssertionError"
"Iterable" : "Iterable"
"fdel" : "fdel"
"utf_32" : "utf_32"
"__lshift__" : "__lshift__"
"HAVE_WMEMCMP" : "HAVE_WMEMCMP"
"RuntimeWarning" : "RuntimeWarning"
"_fill_cache" : "_fill_cache"
"_make_key" : "_make_key"
"h_append" : "h_append"
"DLLLIBRARY" : "DLLLIBRARY"
"StreamReaderWriter" : "StreamReaderWriter"
"st_mtime_ns" : "st_mtime_ns"
"path_importer_cache" : "path_importer_cache"
"os" : "os"
"_Printer__name" : "_Printer__name"
"LICENSE" : "LICENSE"
"pathconf" : "pathconf"
"values" : "values"
"ConnectionRefusedError" : "ConnectionRefusedError"
"HAVE_WCHAR_H" : "HAVE_WCHAR_H"
"import_" : "import_"
"HAVE_TGAMMA" : "HAVE_TGAMMA"
"big5_hkscs" : "big5_hkscs"
"mtime" : "mtime"
"HAVE_LINUX_CAN_BCM_H" : "HAVE_LINUX_CAN_BCM_H"
"_fwalk" : "_fwalk"
"MANDIR" : "MANDIR"
"EX_DATAERR" : "EX_DATAERR"
"os_details" : "os_details"
"HAVE_FTRUNCATE" : "HAVE_FTRUNCATE"
"SC_SEM_VALUE_MAX" : "SC_SEM_VALUE_MAX"
"HAVE_MEMRCHR" : "HAVE_MEMRCHR"
"saved_exc" : "saved_exc"
"x_mac_korean" : "x_mac_korean"
"1251" : "1251"
"exe_dir" : "exe_dir"
"f" : "f"
"source_size" : "source_size"
"utf_16_be_encode" : "utf_16_be_encode"
"unknown" : "unknown"
"__rmul__" : "__rmul__"
"eq" : "eq"
"mac_roman" : "mac_roman"
"HAVE_MKFIFO" : "HAVE_MKFIFO"
"release_lock" : "release_lock"
"MON_7" : "MON_7"
"HAVE_DEV_PTC" : "HAVE_DEV_PTC"
"record" : "record"
"renamed_variables" : "renamed_variables"
"entries" : "entries"
"path_stats" : "path_stats"
"dotIndex" : "dotIndex"
"mcls" : "mcls"
"HAVE_CURSES_H" : "HAVE_CURSES_H"
"EncodedFile" : "EncodedFile"
"delitem" : "delitem"
"sysconf_names" : "sysconf_names"
"loader_details" : "loader_details"
"_index_iter" : "_index_iter"
"environ" : "environ"
"sitedircase" : "sitedircase"
"base_path" : "base_path"
"update_wrapper" : "update_wrapper"
"HAVE_LOG1P" : "HAVE_LOG1P"
"cspc775baltic" : "cspc775baltic"
"HAVE_SYS_XATTR_H" : "HAVE_SYS_XATTR_H"
"ne" : "ne"
"l7" : "l7"
"n_sequence_fields" : "n_sequence_fields"
"self_module" : "self_module"
"CS_XBS5_LPBIG_OFFBIG_CFLAGS" : "CS_XBS5_LPBIG_OFFBIG_CFLAGS"
"__cached__" : "__cached__"
"__delattr__" : "__delattr__"
"__mod__" : "__mod__"
"PACKAGE_STRING" : "PACKAGE_STRING"
"cp1257" : "cp1257"
"shift_jis" : "shift_jis"
"858" : "858"
"rotate" : "rotate"
"HAVE_GETITIMER" : "HAVE_GETITIMER"
"itemref" : "itemref"
"_fix_up_module" : "_fix_up_module"
"old" : "old"
"_import_tail" : "_import_tail"
"FileLoader" : "FileLoader"
"get_exec_path" : "get_exec_path"
"ignore_environment" : "ignore_environment"
"DAY_7" : "DAY_7"
"HAVE_INT64_T" : "HAVE_INT64_T"
"cp852" : "cp852"
"SC_THREAD_THREADS_MAX" : "SC_THREAD_THREADS_MAX"
"interactive" : "interactive"
"cp424" : "cp424"
"CC" : "CC"
"_fix_co_filename" : "_fix_co_filename"
"SIGPOLL" : "SIGPOLL"
"currsize" : "currsize"
"fchmod" : "fchmod"
"max_exp" : "max_exp"
"global" : "global"
"getusersitepackages" : "getusersitepackages"
"topdown" : "topdown"
"DEFAULT_BUFFER_SIZE" : "DEFAULT_BUFFER_SIZE"
"data" : "data"
"__matmul__" : "__matmul__"
"getpwnam" : "getpwnam"
"mkdir" : "mkdir"
"HAVE_SETPRIORITY" : "HAVE_SETPRIORITY"
"iso2022kr" : "iso2022kr"
"maxlen" : "maxlen"
"BufferedRWPair" : "BufferedRWPair"
"format_map" : "format_map"
"HAVE_BLUETOOTH_BLUETOOTH_H" : "HAVE_BLUETOOTH_BLUETOOTH_H"
"fullname" : "fullname"
"dict2" : "dict2"
"find_spec" : "find_spec"
"cyrillic_asian" : "cyrillic_asian"
"abcs" : "abcs"
"encodekey" : "encodekey"
"GETTIMEOFDAY_NO_TZ" : "GETTIMEOFDAY_NO_TZ"
"sts" : "sts"
"encodings" : "encodings"
"__getattr__" : "__getattr__"
"parent_path" : "parent_path"
"iso_8859_14_1998" : "iso_8859_14_1998"
"common" : "common"
"__cast" : "__cast"
"ResourceWarning" : "ResourceWarning"
"f_files" : "f_files"
"HAVE_SSIZE_T" : "HAVE_SSIZE_T"
"ranlib" : "ranlib"
"is_integer" : "is_integer"
"maciceland" : "maciceland"
"samefile" : "samefile"
"iso8859_6" : "iso8859_6"
"base_64" : "base_64"
"iso2022_jp_2" : "iso2022_jp_2"
"SIZEOF_TIME_T" : "SIZEOF_TIME_T"
"AsyncIterable" : "AsyncIterable"
"O_DIRECT" : "O_DIRECT"
"INSTALL_SCRIPT" : "INSTALL_SCRIPT"
"root" : "root"
"1026" : "1026"
"PY_CORE_CFLAGS" : "PY_CORE_CFLAGS"
"iso8859_1" : "iso8859_1"
"__weakrefoffset__" : "__weakrefoffset__"
"Sized" : "Sized"
"csisolatin5" : "csisolatin5"
"_get_module_lock" : "_get_module_lock"
"cp858" : "cp858"
"MON_11" : "MON_11"
"other_bases" : "other_bases"
"tilde" : "tilde"
"ABCMeta" : "ABCMeta"
"dont_inherit" : "dont_inherit"
"self_get" : "self_get"
"write_history_file" : "write_history_file"
"gi_running" : "gi_running"
"define_rx" : "define_rx"
"not_" : "not_"
"S_IROTH" : "S_IROTH"
"MutableSequence" : "MutableSequence"
"LLVM_PROF_ERR" : "LLVM_PROF_ERR"
"950" : "950"
"winner" : "winner"
"S_IWUSR" : "S_IWUSR"
"_c3_mro" : "_c3_mro"
"StopAsyncIteration" : "StopAsyncIteration"
"cp949" : "cp949"
"__next__" : "__next__"
"usercustomize" : "usercustomize"
"HAVE_UTIMES" : "HAVE_UTIMES"
"__and__" : "__and__"
"valrepr" : "valrepr"
"iso_8859_4_1988" : "iso_8859_4_1988"
"gb2312_1980" : "gb2312_1980"
"hasbytes" : "hasbytes"
"_collections" : "_collections"
"instance" : "instance"
"sched_getscheduler" : "sched_getscheduler"
"smsl" : "smsl"
"UnicodeTranslateError" : "UnicodeTranslateError"
"iso_8859_7" : "iso_8859_7"
"_heappop" : "_heappop"
"Ellipsis" : "Ellipsis"
"siginterrupt" : "siginterrupt"
"_path_hooks" : "_path_hooks"
"__exit__" : "__exit__"
"lstrip" : "lstrip"
"ms_kanji" : "ms_kanji"
"st_nlink" : "st_nlink"
"S_ISBLK" : "S_ISBLK"
"pprint" : "pprint"
"sched_getaffinity" : "sched_getaffinity"
"__rmod__" : "__rmod__"
"ArithmeticError" : "ArithmeticError"
"_finalizing" : "_finalizing"
"endpos" : "endpos"
"kill" : "kill"
"HAVE_STRUCT_STAT_ST_BIRTHTIME" : "HAVE_STRUCT_STAT_ST_BIRTHTIME"
"LC_COLLATE" : "LC_COLLATE"
"registry_key" : "registry_key"
"mac_cyrillic" : "mac_cyrillic"
"step" : "step"
"throw" : "throw"
"P_PID" : "P_PID"
"closerange" : "closerange"
"HAVE_SELECT" : "HAVE_SELECT"
"GetSetDescriptorType" : "GetSetDescriptorType"
"iso8859_10" : "iso8859_10"
"utf_32_ex_decode" : "utf_32_ex_decode"
"fork" : "fork"
"_path_mtime" : "_path_mtime"
"SC_USHRT_MAX" : "SC_USHRT_MAX"
"device_encoding" : "device_encoding"
"lookup_error" : "lookup_error"
"tail" : "tail"
"config_h" : "config_h"
"_PY_VERSION_SHORT" : "_PY_VERSION_SHORT"
"HAVE_SIGALTSTACK" : "HAVE_SIGALTSTACK"
"itemgetter" : "itemgetter"
"source_stats" : "source_stats"
"cspc862latinhebrew" : "cspc862latinhebrew"
"HAVE_FINITE" : "HAVE_FINITE"
"repr1" : "repr1"
"csibm869" : "csibm869"
"getpid" : "getpid"
"PY_CPPFLAGS" : "PY_CPPFLAGS"
"HAVE_CHROOT" : "HAVE_CHROOT"
"left" : "left"
"HAVE_BROKEN_POLL" : "HAVE_BROKEN_POLL"
"PYTHON" : "PYTHON"
"BuiltinMethodType" : "BuiltinMethodType"
"_heapify" : "_heapify"
"SC_NL_SETMAX" : "SC_NL_SETMAX"
"cache" : "cache"
"IncrementalNewlineDecoder" : "IncrementalNewlineDecoder"
"SC_POLL" : "SC_POLL"
"intern" : "intern"
"repr_int" : "repr_int"
"LIBC" : "LIBC"
"iso_8859_5_1988" : "iso_8859_5_1988"
"cp_is" : "cp_is"
"bytearray" : "bytearray"
"firstline" : "firstline"
"listdir" : "listdir"
"BuiltinFunctionType" : "BuiltinFunctionType"
"co_argcount" : "co_argcount"
"CONFIGURE_CFLAGS" : "CONFIGURE_CFLAGS"
"_dirty_len" : "_dirty_len"
"isdisjoint" : "isdisjoint"
"ABMON_8" : "ABMON_8"
"chroot" : "chroot"
"HAVE_ZLIB_COPY" : "HAVE_ZLIB_COPY"
"PC_NAME_MAX" : "PC_NAME_MAX"
"macroman" : "macroman"
"set_wakeup_fd" : "set_wakeup_fd"
"geteuid" : "geteuid"
"getattr" : "getattr"
"Py_ENABLE_SHARED" : "Py_ENABLE_SHARED"
"__ror__" : "__ror__"
"HAVE_FSTATVFS" : "HAVE_FSTATVFS"
"SCHED_OTHER" : "SCHED_OTHER"
"iso646_us" : "iso646_us"
"Warning" : "Warning"
"utf_32_be_decode" : "utf_32_be_decode"
"_relax_case" : "_relax_case"
"scandir_it" : "scandir_it"
"truncate" : "truncate"
"s_jisx0213" : "s_jisx0213"
"update" : "update"
"_path_is_mode_type" : "_path_is_mode_type"
"csiso2022jp" : "csiso2022jp"
"parentpos" : "parentpos"
"Paths" : "Paths"
"itertools" : "itertools"
"WeakKeyDictionary" : "WeakKeyDictionary"
"SIGSYS" : "SIGSYS"
"config" : "config"
"ilshift" : "ilshift"
"_PY_VERSION_SHORT_NO_DOT" : "_PY_VERSION_SHORT_NO_DOT"
"SystemExit" : "SystemExit"
"abstractclassmethod" : "abstractclassmethod"
"group" : "group"
"BUILDEXE" : "BUILDEXE"
"symmetric_difference_update" : "symmetric_difference_update"
"int_info" : "int_info"
"HAVE_POSIX_FADVISE" : "HAVE_POSIX_FADVISE"
"latin_1_decode" : "latin_1_decode"
"BINDIR" : "BINDIR"
"SC_PAGESIZE" : "SC_PAGESIZE"
"has_location" : "has_location"
"HAVE_SIGINTERRUPT" : "HAVE_SIGINTERRUPT"
"bz2" : "bz2"
"SIGQUIT" : "SIGQUIT"
"SC_XOPEN_REALTIME_THREADS" : "SC_XOPEN_REALTIME_THREADS"
"BlockingIOError" : "BlockingIOError"
"_hash" : "_hash"
"tm_mon" : "tm_mon"
"IndexError" : "IndexError"
"inode" : "inode"
"__setitem__" : "__setitem__"
"SourceFileLoader" : "SourceFileLoader"
"SC_SCHAR_MIN" : "SC_SCHAR_MIN"
"NSIG" : "NSIG"
"_compare_digest" : "_compare_digest"
"HAVE_GETSPENT" : "HAVE_GETSPENT"
"__stdout__" : "__stdout__"
"ST_RDONLY" : "ST_RDONLY"
"HAVE_LIBUTIL_H" : "HAVE_LIBUTIL_H"
"WITH_NEXT_FRAMEWORK" : "WITH_NEXT_FRAMEWORK"
"932" : "932"
"symmetric_difference" : "symmetric_difference"
"SC_OPEN_MAX" : "SC_OPEN_MAX"
"charmap_encode" : "charmap_encode"
"exit_thread" : "exit_thread"
"LDLAST" : "LDLAST"
"abc" : "abc"
"dropwhile" : "dropwhile"
"HAVE_INTTYPES_H" : "HAVE_INTTYPES_H"
"_forget_codec" : "_forget_codec"
"execvpe" : "execvpe"
"is_" : "is_"
"HAVE_GETNAMEINFO" : "HAVE_GETNAMEINFO"
"spawnle" : "spawnle"
"iter" : "iter"
"UnsupportedOperation" : "UnsupportedOperation"
"HAVE_OPENPTY" : "HAVE_OPENPTY"
"WITH_TSC" : "WITH_TSC"
"OPTIMIZED_BYTECODE_SUFFIXES" : "OPTIMIZED_BYTECODE_SUFFIXES"
"__callback__" : "__callback__"
"spec" : "spec"
"zip" : "zip"
"intersection" : "intersection"
"BOM_UTF32_BE" : "BOM_UTF32_BE"
"path_mtime" : "path_mtime"
"__deepcopy__" : "__deepcopy__"
"__cause__" : "__cause__"
"set_data" : "set_data"
"win32" : "win32"
"cp932" : "cp932"
"get_config_vars" : "get_config_vars"
"_cached" : "_cached"
"finder" : "finder"
"ST_MTIME" : "ST_MTIME"
"SETPGRP_HAVE_ARG" : "SETPGRP_HAVE_ARG"
"argrest" : "argrest"
"HAVE_LINKAT" : "HAVE_LINKAT"
"HAVE_SYS_EVENT_H" : "HAVE_SYS_EVENT_H"
"load" : "load"
"fromkeys" : "fromkeys"
"_get_parent_path" : "_get_parent_path"
"get_current_history_length" : "get_current_history_length"
"utf_16_be_decode" : "utf_16_be_decode"
"py_version_short" : "py_version_short"
"re" : "re"
"ENOTDIR" : "ENOTDIR"
"HAVE_SEM_GETVALUE" : "HAVE_SEM_GETVALUE"
"HAVE_SYS_UTSNAME_H" : "HAVE_SYS_UTSNAME_H"
"HAVE_SYS_SENDFILE_H" : "HAVE_SYS_SENDFILE_H"
"HAVE_IPA_PURE_CONST_BUG" : "HAVE_IPA_PURE_CONST_BUG"
"islice" : "islice"
"WIFSIGNALED" : "WIFSIGNALED"
"characters_written" : "characters_written"
"Python" : "Python"
"deleter" : "deleter"
"waiters" : "waiters"
"register" : "register"
"args" : "args"
"subtract" : "subtract"
"SGI_ABI" : "SGI_ABI"
"CS_LFS64_CFLAGS" : "CS_LFS64_CFLAGS"
"__rdivmod__" : "__rdivmod__"
"eval" : "eval"
"euc_cn" : "euc_cn"
"uu_codec" : "uu_codec"
"SC_2_LOCALEDEF" : "SC_2_LOCALEDEF"
"HAVE_FCHMOD" : "HAVE_FCHMOD"
"do_setlocale" : "do_setlocale"
"EXTENSION_SUFFIXES" : "EXTENSION_SUFFIXES"
"PYTHONFRAMEWORKDIR" : "PYTHONFRAMEWORKDIR"
"AIX_GENUINE_CPLUSPLUS" : "AIX_GENUINE_CPLUSPLUS"
"cp857" : "cp857"
"pthread_sigmask" : "pthread_sigmask"
"s_jis_2004" : "s_jis_2004"
"execsitecustomize" : "execsitecustomize"
"CS_XBS5_ILP32_OFF32_LINTFLAGS" : "CS_XBS5_ILP32_OFF32_LINTFLAGS"
"kw" : "kw"
"SCRIPTDIR" : "SCRIPTDIR"
"S_ISPORT" : "S_ISPORT"
"rfind" : "rfind"
"_TextIOBase" : "_TextIOBase"
"elot_928" : "elot_928"
"quopri_codec" : "quopri_codec"
"bits" : "bits"
"register_readline" : "register_readline"
"getweakrefcount" : "getweakrefcount"
"csibm857" : "csibm857"
"DEBUG_BYTECODE_SUFFIXES" : "DEBUG_BYTECODE_SUFFIXES"
"O_NDELAY" : "O_NDELAY"
"LLVM_PROF_MERGER" : "LLVM_PROF_MERGER"
"HAVE_SETRESUID" : "HAVE_SETRESUID"
"HAVE_ASM_TYPES_H" : "HAVE_ASM_TYPES_H"
"PYTHONUSERBASE" : "PYTHONUSERBASE"
"INSTALL" : "INSTALL"
"SC_CHAR_MAX" : "SC_CHAR_MAX"
"SOABI" : "SOABI"
"mro" : "mro"
"follow_symlinks" : "follow_symlinks"
"partition" : "partition"
"HAVE_RL_COMPLETION_APPEND_CHARACTER" : "HAVE_RL_COMPLETION_APPEND_CHARACTER"
"shiftjisx0213" : "shiftjisx0213"
"_PYTHON_HOST_PLATFORM" : "_PYTHON_HOST_PLATFORM"
"PGO_PROF_USE_FLAG" : "PGO_PROF_USE_FLAG"
"BUILD_GNU_TYPE" : "BUILD_GNU_TYPE"
"_debugmallocstats" : "_debugmallocstats"
"setlocale" : "setlocale"
"BufferedIncrementalDecoder" : "BufferedIncrementalDecoder"
"__iand__" : "__iand__"
"MON_4" : "MON_4"
"HAVE_WCSFTIME" : "HAVE_WCSFTIME"
"issubclass" : "issubclass"
"CS_LFS64_LDFLAGS" : "CS_LFS64_LDFLAGS"
"weakref" : "weakref"
"sep" : "sep"
"posix_prefix" : "posix_prefix"
"metaclass" : "metaclass"
"BOM64_LE" : "BOM64_LE"
"HAVE_REALPATH" : "HAVE_REALPATH"
"framework" : "framework"
"HAVE_GCC_UINT128_T" : "HAVE_GCC_UINT128_T"
"issuperset" : "issuperset"
"isdigit" : "isdigit"
"times" : "times"
"_init_posix" : "_init_posix"
"HAVE_WCSCOLL" : "HAVE_WCSCOLL"
"_bootlocale" : "_bootlocale"
"no_user_site" : "no_user_site"
"roots" : "roots"
"pow" : "pow"
"csibm863" : "csibm863"
"followlinks" : "followlinks"
"HAVE_SCHED_H" : "HAVE_SCHED_H"
"discard" : "discard"
"timezone" : "timezone"
"atexit" : "atexit"
"customize_config_vars" : "customize_config_vars"
"raw_unicode_escape_encode" : "raw_unicode_escape_encode"
"ImportError" : "ImportError"
"FILE_ATTRIBUTE_ENCRYPTED" : "FILE_ATTRIBUTE_ENCRYPTED"
"SYSLIBS" : "SYSLIBS"
"builtin_os" : "builtin_os"
"_ManageReload" : "_ManageReload"
"IOBase" : "IOBase"
"_BASE_PREFIX" : "_BASE_PREFIX"
"upper" : "upper"
"imod" : "imod"
"path_hooks" : "path_hooks"
"HAVE_SYS_MKDEV_H" : "HAVE_SYS_MKDEV_H"
"PC_PATH_MAX" : "PC_PATH_MAX"
"devnull" : "devnull"
"WeakSet" : "WeakSet"
"_imp" : "_imp"
"_tee_dataobject" : "_tee_dataobject"
"elapsed" : "elapsed"
"__mul__" : "__mul__"
"_is_python_source_dir" : "_is_python_source_dir"
"__getstate__" : "__getstate__"
"CacheInfo" : "CacheInfo"
"extendleft" : "extendleft"
"bool" : "bool"
"maxsplit" : "maxsplit"
"SC_XOPEN_LEGACY" : "SC_XOPEN_LEGACY"
"S_IFPORT" : "S_IFPORT"
"__import__" : "__import__"
"decode_source" : "decode_source"
"shape" : "shape"
"RTLD_DEEPBIND" : "RTLD_DEEPBIND"
"HAVE_POSIX_FALLOCATE" : "HAVE_POSIX_FALLOCATE"
"SIGWINCH" : "SIGWINCH"
"SyntaxError" : "SyntaxError"
"HAVE_LANGINFO_H" : "HAVE_LANGINFO_H"
"__qualname__" : "__qualname__"
"SourcelessFileLoader" : "SourcelessFileLoader"
"WSTOPSIG" : "WSTOPSIG"
"iso2022jp_2" : "iso2022jp_2"
"PC_SYNC_IO" : "PC_SYNC_IO"
"setpriority" : "setpriority"
"HAVE_LIBSENDFILE" : "HAVE_LIBSENDFILE"
"PC_PIPE_BUF" : "PC_PIPE_BUF"
"fd" : "fd"
"all" : "all"
"HAVE_FSYNC" : "HAVE_FSYNC"
"CONFIGURE_CFLAGS_NODIST" : "CONFIGURE_CFLAGS_NODIST"
"_alive" : "_alive"
"parent" : "parent"
"_commit_removals" : "_commit_removals"
"936" : "936"
"sysname" : "sysname"
"offset" : "offset"
"FileIO" : "FileIO"
"CONFIGFILES" : "CONFIGFILES"
"__dir__" : "__dir__"
"HAVE_MKDIRAT" : "HAVE_MKDIRAT"
"getfilesystemencoding" : "getfilesystemencoding"
"_load_backward_compatible" : "_load_backward_compatible"
"EXEMODE" : "EXEMODE"
"LambdaType" : "LambdaType"
"g" : "g"
"writer" : "writer"
"HAVE_STATVFS" : "HAVE_STATVFS"
"consumed" : "consumed"
"INSTSONAME" : "INSTSONAME"
"Generator" : "Generator"
"_code_type" : "_code_type"
"ksc5601" : "ksc5601"
"delattr" : "delattr"
"EX_IOERR" : "EX_IOERR"
"mac_turkish" : "mac_turkish"
"TESTPYTHONOPTS" : "TESTPYTHONOPTS"
"_spawnvef" : "_spawnvef"
"Reader" : "Reader"
"SC_THREAD_PROCESS_SHARED" : "SC_THREAD_PROCESS_SHARED"
"exec" : "exec"
"path_sep" : "path_sep"
"SC_PII_OSI_CLTS" : "SC_PII_OSI_CLTS"
"iso_8859_2" : "iso_8859_2"
"dict_keys" : "dict_keys"
"SC_2_VERSION" : "SC_2_VERSION"
"KeysView" : "KeysView"
"ibm1026" : "ibm1026"
"home" : "home"
"HAVE_DECL_ISFINITE" : "HAVE_DECL_ISFINITE"
"unicode_escape_encode" : "unicode_escape_encode"
"mknod" : "mknod"
"_module_locks" : "_module_locks"
"HAVE_ALTZONE" : "HAVE_ALTZONE"
"SIGALRM" : "SIGALRM"
"hebrew" : "hebrew"
"_IOBase" : "_IOBase"
"exc_details" : "exc_details"
"GITVERSION" : "GITVERSION"
"INSTALL_PROGRAM" : "INSTALL_PROGRAM"
"ST_SIZE" : "ST_SIZE"
"o" : "o"
"BufferedIOBase" : "BufferedIOBase"
"_NamespaceLoader" : "_NamespaceLoader"
"field_names" : "field_names"
"little" : "little"
"MKDIR_P" : "MKDIR_P"
"CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : "CS_XBS5_LPBIG_OFFBIG_LDFLAGS"
"takewhile" : "takewhile"
"HAVE_SYS_AUDIOIO_H" : "HAVE_SYS_AUDIOIO_H"
"streamreader" : "streamreader"
"setresuid" : "setresuid"
"sjis_2004" : "sjis_2004"
"csibm860" : "csibm860"
"windows_1254" : "windows_1254"
"949" : "949"
"HAVE_SEM_UNLINK" : "HAVE_SEM_UNLINK"
"csiso2022kr" : "csiso2022kr"
"__base__" : "__base__"
"last_exc" : "last_exc"
"utf-8" : "utf-8"
"_MutableMapping__marker" : "_MutableMapping__marker"
"sched_setparam" : "sched_setparam"
"pw_dir" : "pw_dir"
"PYTHON_HEADERS" : "PYTHON_HEADERS"
"FILE_ATTRIBUTE_DIRECTORY" : "FILE_ATTRIBUTE_DIRECTORY"
"O_RSYNC" : "O_RSYNC"
"isprintable" : "isprintable"
"_exitfunc" : "_exitfunc"
"maxunicode" : "maxunicode"
"done" : "done"
"prefixes" : "prefixes"
"gettext" : "gettext"
"CONFIGURE_CPPFLAGS" : "CONFIGURE_CPPFLAGS"
"source_path" : "source_path"
"_UserList__cast" : "_UserList__cast"
"HAVE_GETGROUPLIST" : "HAVE_GETGROUPLIST"
"_m" : "_m"
"iso_8859_1_1987" : "iso_8859_1_1987"
"wrapper" : "wrapper"
"aliasmbcs" : "aliasmbcs"
"subtype" : "subtype"
"855" : "855"
"tm_min" : "tm_min"
"HAVE_HYPOT" : "HAVE_HYPOT"
"tokenize" : "tokenize"
"iso2022jp_1" : "iso2022jp_1"
"PY_LDFLAGS" : "PY_LDFLAGS"
"execlpe" : "execlpe"
"__prepare__" : "__prepare__"
"SIGRTMIN" : "SIGRTMIN"
"get_platform_osx" : "get_platform_osx"
"cp273" : "cp273"
"Py_DEBUG" : "Py_DEBUG"
"HAVE_FCHDIR" : "HAVE_FCHDIR"
"euc_jp" : "euc_jp"
"SC_2_FORT_DEV" : "SC_2_FORT_DEV"
"iso_8859_9_1989" : "iso_8859_9_1989"
"u7" : "u7"
"popleft" : "popleft"
"n_fields" : "n_fields"
"removeduppaths" : "removeduppaths"
"S_IFCHR" : "S_IFCHR"
"sjisx0213" : "sjisx0213"
"_installed_safely" : "_installed_safely"
"T_FMT" : "T_FMT"
"st_atime_ns" : "st_atime_ns"
"_unknown" : "_unknown"
"list_iterator" : "list_iterator"
"PC_CHOWN_RESTRICTED" : "PC_CHOWN_RESTRICTED"
"raw_timestamp" : "raw_timestamp"
"reduce" : "reduce"
"_module" : "_module"
"EX_PROTOCOL" : "EX_PROTOCOL"
"HAVE_GLIBC_MEMMOVE_BUG" : "HAVE_GLIBC_MEMMOVE_BUG"
"PARSER_OBJS" : "PARSER_OBJS"
"get_cache_token" : "get_cache_token"
"swapcase" : "swapcase"
"__imatmul__" : "__imatmul__"
"MODULE_OBJS" : "MODULE_OBJS"
"cp862" : "cp862"
"tabsize" : "tabsize"
"WINDOW_HAS_FLAGS" : "WINDOW_HAS_FLAGS"
"method" : "method"
"SF_IMMUTABLE" : "SF_IMMUTABLE"
"SC_MEMLOCK_RANGE" : "SC_MEMLOCK_RANGE"
"POSIX_FADV_WILLNEED" : "POSIX_FADV_WILLNEED"
"_GeneratorWrapper__isgen" : "_GeneratorWrapper__isgen"
"target_keys" : "target_keys"
"HAVE_LCHMOD" : "HAVE_LCHMOD"
"FunctionType" : "FunctionType"
"itemsize" : "itemsize"
"_PYCACHE" : "_PYCACHE"
"HAVE_GETHOSTBYNAME" : "HAVE_GETHOSTBYNAME"
"ITIMER_VIRTUAL" : "ITIMER_VIRTUAL"
"pydoc" : "pydoc"
"PermissionError" : "PermissionError"
"SIGILL" : "SIGILL"
"execle" : "execle"
"str_iterator" : "str_iterator"
"GITTAG" : "GITTAG"
"_cache" : "_cache"
"HAVE_SIGPENDING" : "HAVE_SIGPENDING"
"True" : "True"
"HAVE_SYS_LOADAVG_H" : "HAVE_SYS_LOADAVG_H"
"bin" : "bin"
"utf_32le" : "utf_32le"
"iso_8859_6" : "iso_8859_6"
"MODNAMES" : "MODNAMES"
"op_result" : "op_result"
"O_NOCTTY" : "O_NOCTTY"
"PC_MAX_CANON" : "PC_MAX_CANON"
"find_loader" : "find_loader"
"utf_16_le_decode" : "utf_16_le_decode"
"SEEK_END" : "SEEK_END"
"in" : "in"
"HAVE_CHFLAGS" : "HAVE_CHFLAGS"
"arg_list" : "arg_list"
"S_ISLNK" : "S_ISLNK"
"SC_PII_SOCKET" : "SC_PII_SOCKET"
"S_ISUID" : "S_ISUID"
"__rsub__" : "__rsub__"
"HAVE_CURSES_RESIZE_TERM" : "HAVE_CURSES_RESIZE_TERM"
"iso2022_jp_ext" : "iso2022_jp_ext"
"csibm273" : "csibm273"
"newlines" : "newlines"
"iso8859_2" : "iso8859_2"
"f_globals" : "f_globals"
"HAVE_SPAWN_H" : "HAVE_SPAWN_H"
"utf_7_decode" : "utf_7_decode"
"gettrace" : "gettrace"
"ibm850" : "ibm850"
"_GeneratorWrapper__wrapped" : "_GeneratorWrapper__wrapped"
"hz_gb_2312" : "hz_gb_2312"
"basename" : "basename"
"simplefilter" : "simplefilter"
"rel_re" : "rel_re"
"_le_from_lt" : "_le_from_lt"
"_repr_iterable" : "_repr_iterable"
"HAVE_RL_PRE_INPUT_HOOK" : "HAVE_RL_PRE_INPUT_HOOK"
"ixor" : "ixor"
"LIBSUBDIRS" : "LIBSUBDIRS"
"zlib_codec" : "zlib_codec"
"False" : "False"
"ln" : "ln"
"__ior__" : "__ior__"
"x_mac_japanese" : "x_mac_japanese"
"cell_contents" : "cell_contents"
"roman8" : "roman8"
"MAJOR_IN_SYSMACROS" : "MAJOR_IN_SYSMACROS"
"newline" : "newline"
"py_version_nodot" : "py_version_nodot"
"F_TEST" : "F_TEST"
"bytes_data" : "bytes_data"
"__basicsize__" : "__basicsize__"
"lt" : "lt"
"heapify" : "heapify"
"TESTOPTS" : "TESTOPTS"
"RTLD_LOCAL" : "RTLD_LOCAL"
"HAVE_STRFTIME" : "HAVE_STRFTIME"
"CLOCK_PROCESS_CPUTIME_ID" : "CLOCK_PROCESS_CPUTIME_ID"
"HAVE_ERRNO_H" : "HAVE_ERRNO_H"
"id" : "id"
"PYTHONFRAMEWORKPREFIX" : "PYTHONFRAMEWORKPREFIX"
"BOM_UTF16" : "BOM_UTF16"
"loader_class" : "loader_class"
"stacklevel" : "stacklevel"
"setpgrp" : "setpgrp"
"Library" : "Library"
"readinto" : "readinto"
"HAVE_ENDIAN_H" : "HAVE_ENDIAN_H"
"HAVE_GETSID" : "HAVE_GETSID"
"repr_running" : "repr_running"
"setcheckinterval" : "setcheckinterval"
"algorithm" : "algorithm"
"HAVE_CURSES_RESIZETERM" : "HAVE_CURSES_RESIZETERM"
"matmul" : "matmul"
"_path_cache" : "_path_cache"
"fp2" : "fp2"
"PYTHONPATH" : "PYTHONPATH"
"fp1" : "fp1"
"filter" : "filter"
"addsitedir" : "addsitedir"
"sorted_items" : "sorted_items"
"MVWDELCH_IS_EXPRESSION" : "MVWDELCH_IS_EXPRESSION"
"merge" : "merge"
"st_size" : "st_size"
"supports_unicode_filenames" : "supports_unicode_filenames"
"Repr" : "Repr"
"ConnectionAbortedError" : "ConnectionAbortedError"
"037" : "037"
"find" : "find"
"countOf" : "countOf"
"wraps" : "wraps"
"HAVE_SYS_RESOURCE_H" : "HAVE_SYS_RESOURCE_H"
"ModuleType" : "ModuleType"
"dispatch_cache" : "dispatch_cache"
"latin" : "latin"
"S_IWOTH" : "S_IWOTH"
"O_EXCL" : "O_EXCL"
"cp1361" : "cp1361"
"title" : "title"
"cp850" : "cp850"
"utf" : "utf"
"argv" : "argv"
"csshiftjis" : "csshiftjis"
"c_contiguous" : "c_contiguous"
"tis_620" : "tis_620"
"iso_2022_jp_1" : "iso_2022_jp_1"
"sys" : "sys"
"HAVE_LARGEFILE_SUPPORT" : "HAVE_LARGEFILE_SUPPORT"
"lines" : "lines"
"pass" : "pass"
"pycache_filename" : "pycache_filename"
"user_function" : "user_function"
"getrecursionlimit" : "getrecursionlimit"
"HAVE_DEV_PTMX" : "HAVE_DEV_PTMX"
"LIPO_32BIT_FLAGS" : "LIPO_32BIT_FLAGS"
"__imul__" : "__imul__"
"cp1255" : "cp1255"
"SC_XOPEN_XPG3" : "SC_XOPEN_XPG3"
"supports_follow_symlinks" : "supports_follow_symlinks"
"__abstractmethods__" : "__abstractmethods__"
"bases" : "bases"
"verbosity" : "verbosity"
"PROFILE_TASK" : "PROFILE_TASK"
"_buffer_decode" : "_buffer_decode"
"SIZEOF_OFF_T" : "SIZEOF_OFF_T"
"file" : "file"
"final" : "final"
"meta_path" : "meta_path"
"_frozen_importlib_external" : "_frozen_importlib_external"
"HAVE_PTHREAD_ATFORK" : "HAVE_PTHREAD_ATFORK"
"f_favail" : "f_favail"
"f_namemax" : "f_namemax"
"HAVE_STDLIB_H" : "HAVE_STDLIB_H"
"fdatasync" : "fdatasync"
"__isabstractmethod__" : "__isabstractmethod__"
"yield" : "yield"
"iterable" : "iterable"
"HAVE_FTELLO" : "HAVE_FTELLO"
"warn" : "warn"
"utf_16le" : "utf_16le"
"NameError" : "NameError"
"st_ino" : "st_ino"
"zlib" : "zlib"
"HAVE_BROKEN_PTHREAD_SIGMASK" : "HAVE_BROKEN_PTHREAD_SIGMASK"
"__add__" : "__add__"
"__rlshift__" : "__rlshift__"
"tag" : "tag"
"perf_counter" : "perf_counter"
"latin_1_encode" : "latin_1_encode"
"exc_info" : "exc_info"
"sunos" : "sunos"
"newset" : "newset"
"RLock" : "RLock"
"BOM32_LE" : "BOM32_LE"
"euc_jisx0213" : "euc_jisx0213"
"iso_2022_jp_ext" : "iso_2022_jp_ext"
"_Printer__filenames" : "_Printer__filenames"
"strxfrm" : "strxfrm"
"origin" : "origin"
"HAVE_DECL_TZNAME" : "HAVE_DECL_TZNAME"
"ord" : "ord"
"line" : "line"
"_deque_iterator" : "_deque_iterator"
"main" : "main"
"CS_XBS5_LP64_OFF64_LIBS" : "CS_XBS5_LP64_OFF64_LIBS"
"encodedkey" : "encodedkey"
"utf16" : "utf16"
"_get_cached" : "_get_cached"
"posix_fallocate" : "posix_fallocate"
"SIG_IGN" : "SIG_IGN"
"decodedbytes" : "decodedbytes"
"norm_encoding" : "norm_encoding"
"__copy__" : "__copy__"
"getgid" : "getgid"
"HAVE_CTERMID_R" : "HAVE_CTERMID_R"
"getreader" : "getreader"
"GETPGRP_HAVE_ARG" : "GETPGRP_HAVE_ARG"
"parents" : "parents"
"nondirs" : "nondirs"
"copyright" : "copyright"
"process_time" : "process_time"
"invalidate_caches" : "invalidate_caches"
"273" : "273"
"MAINCC" : "MAINCC"
"comps" : "comps"
"isalnum" : "isalnum"
"zip_longest" : "zip_longest"
"HAVE_FLOCK" : "HAVE_FLOCK"
"dot_count" : "dot_count"
"sepIndex" : "sepIndex"
"UF_NOUNLINK" : "UF_NOUNLINK"
"srw" : "srw"
"dotdot" : "dotdot"
"HAVE_SETPGID" : "HAVE_SETPGID"
"O_TMPFILE" : "O_TMPFILE"
"spawnve" : "spawnve"
"charmap_build" : "charmap_build"
"HAVE_LINUX_TIPC_H" : "HAVE_LINUX_TIPC_H"
"data_encoding" : "data_encoding"
"lock_held" : "lock_held"
"SC_CHILD_MAX" : "SC_CHILD_MAX"
"typename" : "typename"
"gi_frame" : "gi_frame"
"F_OK" : "F_OK"
"getatime" : "getatime"
"_wrap" : "_wrap"
"part" : "part"
"SC_CHAR_MIN" : "SC_CHAR_MIN"
"32bit" : "32bit"
"HAVE_MREMAP" : "HAVE_MREMAP"
"DESTSHARED" : "DESTSHARED"
"getweakrefs" : "getweakrefs"
"readelf" : "readelf"
"backslashreplace" : "backslashreplace"
"readbuffer_encode" : "readbuffer_encode"
"pathname" : "pathname"
"surrogatepass" : "surrogatepass"
"ibm869" : "ibm869"
"LIBPC" : "LIBPC"
"_cls" : "_cls"
"O_NOATIME" : "O_NOATIME"
"repr_frozenset" : "repr_frozenset"
"865" : "865"
"func" : "func"
"P_ALL" : "P_ALL"
"ansi_x3_4_1968" : "ansi_x3_4_1968"
"nan" : "nan"
"O_ACCMODE" : "O_ACCMODE"
"_siftdown" : "_siftdown"
"HAVE_UTIL_H" : "HAVE_UTIL_H"
"csibm865" : "csibm865"
"__length_hint__" : "__length_hint__"
"ABMON_7" : "ABMON_7"
"_ge_from_gt" : "_ge_from_gt"
"__thisclass__" : "__thisclass__"
"assert" : "assert"
"S_ISDIR" : "S_ISDIR"
"iso_ir_138" : "iso_ir_138"
"PACKAGE_NAME" : "PACKAGE_NAME"
"n_unnamed_fields" : "n_unnamed_fields"
"mul" : "mul"
"opfunc" : "opfunc"
"SIGIOT" : "SIGIOT"
"closefd" : "closefd"
"maccyrillic" : "maccyrillic"
"AC_APPLE_UNIVERSAL_BUILD" : "AC_APPLE_UNIVERSAL_BUILD"
"RTLD_NOLOAD" : "RTLD_NOLOAD"
"HAVE_CTERMID" : "HAVE_CTERMID"
"userbase" : "userbase"
"or_" : "or_"
"get_terminal_size" : "get_terminal_size"
"_le_from_gt" : "_le_from_gt"
"HAVE_KQUEUE" : "HAVE_KQUEUE"
"expandtabs" : "expandtabs"
"seekable" : "seekable"
"PY_FORMAT_LONG_LONG" : "PY_FORMAT_LONG_LONG"
"HAVE_SOCKADDR_STORAGE" : "HAVE_SOCKADDR_STORAGE"
"write" : "write"
"__package__" : "__package__"
"PGOBJS" : "PGOBJS"
"arabic" : "arabic"
"ibm819" : "ibm819"
"__sizeof__" : "__sizeof__"
"ABDAY_7" : "ABDAY_7"
"encoder" : "encoder"
"hex_codec" : "hex_codec"
"clock_gettime" : "clock_gettime"
"_gt_from_le" : "_gt_from_le"
"get_source" : "get_source"
"unicode_escape_decode" : "unicode_escape_decode"
"addpackage" : "addpackage"
"BytesWarning" : "BytesWarning"
"_init_module_attrs" : "_init_module_attrs"
"NotImplemented" : "NotImplemented"
"unicode_internal_encode" : "unicode_internal_encode"
"SC_IOV_MAX" : "SC_IOV_MAX"
"pwrite" : "pwrite"
"iso_8859_16_2001" : "iso_8859_16_2001"
"DESTPATH" : "DESTPATH"
"." : "."
"tis_620_2529_0" : "tis_620_2529_0"
"updated" : "updated"
"_checkSeekable" : "_checkSeekable"
"HAVE_LONG_LONG" : "HAVE_LONG_LONG"
"exc" : "exc"
"HAVE_TM_ZONE" : "HAVE_TM_ZONE"
"other_count" : "other_count"
"LIBFFI_INCLUDEDIR" : "LIBFFI_INCLUDEDIR"
"iso_8859_15" : "iso_8859_15"
"sitedir" : "sitedir"
"_get_sep" : "_get_sep"
"get_blocking" : "get_blocking"
"EX_OSERR" : "EX_OSERR"
"utf_16_decode" : "utf_16_decode"
"hashvalue" : "hashvalue"
"compress" : "compress"
"wpid" : "wpid"
"646" : "646"
"send" : "send"
"Modules" : "Modules"
"sigwaitinfo" : "sigwaitinfo"
"strict" : "strict"
"SIGPIPE" : "SIGPIPE"
"CONFIG_LINE" : "CONFIG_LINE"
"getresuid" : "getresuid"
"SIGKILL" : "SIGKILL"
"SIGUSR1" : "SIGUSR1"
"abs_builddir" : "abs_builddir"
"ismount" : "ismount"
"posix_fadvise" : "posix_fadvise"
"ks_c_5601_1987" : "ks_c_5601_1987"
"HAVE_SYS_NDIR_H" : "HAVE_SYS_NDIR_H"
"__excepthook__" : "__excepthook__"
"SC_NL_MSGMAX" : "SC_NL_MSGMAX"
"SC_XOPEN_VERSION" : "SC_XOPEN_VERSION"
"is_namespace" : "is_namespace"
"_os" : "_os"
"HAVE_LUTIMES" : "HAVE_LUTIMES"
"latin7" : "latin7"
"_zip_directory_cache" : "_zip_directory_cache"
"almost_filename" : "almost_filename"
"source_bytes" : "source_bytes"
"RTLD_LAZY" : "RTLD_LAZY"
"continue" : "continue"
"SystemError" : "SystemError"
"imul" : "imul"
"SC_NL_ARGMAX" : "SC_NL_ARGMAX"
"front" : "front"
"POSIX_FADV_SEQUENTIAL" : "POSIX_FADV_SEQUENTIAL"
"_xoptions" : "_xoptions"
"SC_MESSAGE_PASSING" : "SC_MESSAGE_PASSING"
"other_c3_mros" : "other_c3_mros"
"io" : "io"
"prepare_class" : "prepare_class"
"i" : "i"
"HAVE_READLINKAT" : "HAVE_READLINKAT"
"key" : "key"
"_make_relax_case" : "_make_relax_case"
"BuiltinImporter" : "BuiltinImporter"
"implementation" : "implementation"
"ABMON_1" : "ABMON_1"
"registry" : "registry"
"line0withend" : "line0withend"
"_USER_BASE" : "_USER_BASE"
"__alloc__" : "__alloc__"
"LIBOBJS" : "LIBOBJS"
"SC_NPROCESSORS_CONF" : "SC_NPROCESSORS_CONF"
"value" : "value"
"HAVE_GRP_H" : "HAVE_GRP_H"
"UserList" : "UserList"
"mode" : "mode"
"rshift" : "rshift"
"VA_LIST_IS_ARRAY" : "VA_LIST_IS_ARRAY"
"__or__" : "__or__"
"spawnv" : "spawnv"
"pipe2" : "pipe2"
"HAVE_PATHCONF" : "HAVE_PATHCONF"
"setprofile" : "setprofile"
"clear" : "clear"
"CS_GNU_LIBPTHREAD_VERSION" : "CS_GNU_LIBPTHREAD_VERSION"
"SIGTTIN" : "SIGTTIN"
"FrozenImporter" : "FrozenImporter"
"LC_MESSAGES" : "LC_MESSAGES"
"isupper" : "isupper"
"PC_REC_INCR_XFER_SIZE" : "PC_REC_INCR_XFER_SIZE"
"SC_SHARED_MEMORY_OBJECTS" : "SC_SHARED_MEMORY_OBJECTS"
"Counter" : "Counter"
"__isub__" : "__isub__"
"BOM_UTF32_LE" : "BOM_UTF32_LE"
"ReferenceError" : "ReferenceError"
"HAVE_FUTIMES" : "HAVE_FUTIMES"
"HAVE_GETENTROPY" : "HAVE_GETENTROPY"
"x" : "x"
"iso8859_3" : "iso8859_3"
"path_parts" : "path_parts"
"urandom" : "urandom"
"HAVE_SYS_PARAM_H" : "HAVE_SYS_PARAM_H"
"setgroups" : "setgroups"
"abstracts" : "abstracts"
"__reversed__" : "__reversed__"
"repr_list" : "repr_list"
"__rrshift__" : "__rrshift__"
"HAVE_IEEEFP_H" : "HAVE_IEEEFP_H"
"SIZEOF_LONG_LONG" : "SIZEOF_LONG_LONG"
"defaultdict" : "defaultdict"
"locals" : "locals"
"P_WAIT" : "P_WAIT"
"PRIO_PGRP" : "PRIO_PGRP"
"macintosh" : "macintosh"
"f_lineno" : "f_lineno"
"IncrementalDecoder" : "IncrementalDecoder"
"getincrementaldecoder" : "getincrementaldecoder"
"detach" : "detach"
"BOM_BE" : "BOM_BE"
"posix_user" : "posix_user"
"iso_ir_166" : "iso_ir_166"
"_defaultaction" : "_defaultaction"
"PYTHONFRAMEWORKINSTALLDIR" : "PYTHONFRAMEWORKINSTALLDIR"
"HAVE_GCC_ASM_FOR_X64" : "HAVE_GCC_ASM_FOR_X64"
"input" : "input"
"chown" : "chown"
"D_T_FMT" : "D_T_FMT"
"asctime" : "asctime"
"item" : "item"
"contents" : "contents"
"MACHDEP_OBJS" : "MACHDEP_OBJS"
"P_NOWAIT" : "P_NOWAIT"
"f_locals" : "f_locals"
"get_path_names" : "get_path_names"
"capitalize" : "capitalize"
"__about__" : "__about__"
"ABMON_11" : "ABMON_11"
"_STRUCT_TM_ITEMS" : "_STRUCT_TM_ITEMS"
"DISTDIRS" : "DISTDIRS"
"path_hook" : "path_hook"
"epsilon" : "epsilon"
"strptime" : "strptime"
"ABMON_5" : "ABMON_5"
"complex" : "complex"
"get_filename" : "get_filename"
"HOST_GNU_TYPE" : "HOST_GNU_TYPE"
"euc_kr" : "euc_kr"
"dig" : "dig"
"osx_framework_user" : "osx_framework_user"
"message" : "message"
"addsitepackages" : "addsitepackages"
"supports_dir_fd" : "supports_dir_fd"
"set_blocking" : "set_blocking"
"__code__" : "__code__"
"modname" : "modname"
"ST_GID" : "ST_GID"
"st_mtime" : "st_mtime"
"parent_module" : "parent_module"
"ChainMap" : "ChainMap"
"hkey" : "hkey"
"getxattr" : "getxattr"
"config_line" : "config_line"
"spec_from_loader" : "spec_from_loader"
"O_DSYNC" : "O_DSYNC"
"SC_THREAD_KEYS_MAX" : "SC_THREAD_KEYS_MAX"
"new" : "new"
"iand" : "iand"
"THOUSEP" : "THOUSEP"
"__class__" : "__class__"
"saved_tb" : "saved_tb"
"HAVE_LCHOWN" : "HAVE_LCHOWN"
"_c3_merge" : "_c3_merge"
"O_NONBLOCK" : "O_NONBLOCK"
"tid" : "tid"
"_variable_rx" : "_variable_rx"
"ftruncate" : "ftruncate"
"_bootstrap" : "_bootstrap"
"DAY_2" : "DAY_2"
"STRICT_SYSV_CURSES" : "STRICT_SYSV_CURSES"
"HAVE_UNISTD_H" : "HAVE_UNISTD_H"
"sendfile" : "sendfile"
"oct" : "oct"
"HAVE_TCSETPGRP" : "HAVE_TCSETPGRP"
"__pos__" : "__pos__"
"SC_COLL_WEIGHTS_MAX" : "SC_COLL_WEIGHTS_MAX"
"tis_620_0" : "tis_620_0"
"sameopenfile" : "sameopenfile"
"HAVE_GETPRIORITY" : "HAVE_GETPRIORITY"
"k" : "k"
"setdlopenflags" : "setdlopenflags"
"fsync" : "fsync"
"after" : "after"
"__concat__" : "__concat__"
"euc_jis_2004" : "euc_jis_2004"
"PACKAGE_TARNAME" : "PACKAGE_TARNAME"
"DIRMODE" : "DIRMODE"
"_gcd_import" : "_gcd_import"
"CCSHARED" : "CCSHARED"
"_sanity_check" : "_sanity_check"
"dir_fd" : "dir_fd"
"TIMEOUT_MAX" : "TIMEOUT_MAX"
"MAJOR_IN_MKDEV" : "MAJOR_IN_MKDEV"
"ljust" : "ljust"
"getmtime" : "getmtime"
"suboffsets" : "suboffsets"
"_dummy_scandir" : "_dummy_scandir"
"ascii" : "ascii"
"HAVE_GETSPNAM" : "HAVE_GETSPNAM"
"HAVE_POLL" : "HAVE_POLL"
"869" : "869"
"iso_ir_144" : "iso_ir_144"
"cskoi8r" : "cskoi8r"
"mant_dig" : "mant_dig"
"co_varnames" : "co_varnames"
"is_finalizing" : "is_finalizing"
"HAVE_SYS_UIO_H" : "HAVE_SYS_UIO_H"
"MON_5" : "MON_5"
"other" : "other"
"861" : "861"
"EX_NOHOST" : "EX_NOHOST"
"SC_SEMAPHORES" : "SC_SEMAPHORES"
"utf_32_le" : "utf_32_le"
"WNOWAIT" : "WNOWAIT"
"_lstat" : "_lstat"
"__debug__" : "__debug__"
"SIGTTOU" : "SIGTTOU"
"hx" : "hx"
"l9" : "l9"
"pid" : "pid"
"dedent" : "dedent"
"ABMON_4" : "ABMON_4"
"sorted" : "sorted"
"_recalculate" : "_recalculate"
"HAVE_BLUETOOTH_H" : "HAVE_BLUETOOTH_H"
"iso_ir_101" : "iso_ir_101"
"_SCHEME_KEYS" : "_SCHEME_KEYS"
"__contains__" : "__contains__"
"exec_prefix" : "exec_prefix"
"cp154" : "cp154"
"HAVE_UTIME_H" : "HAVE_UTIME_H"
"_name" : "_name"
"SIGPWR" : "SIGPWR"
"HAVE_PTHREAD_SIGMASK" : "HAVE_PTHREAD_SIGMASK"
"TESTTIMEOUT" : "TESTTIMEOUT"
"paths" : "paths"
"pending" : "pending"
"proxy" : "proxy"
"co_freevars" : "co_freevars"
"SC_PAGE_SIZE" : "SC_PAGE_SIZE"
"iso_8859_2_1987" : "iso_8859_2_1987"
"dev1" : "dev1"
"HAVE_GETTIMEOFDAY" : "HAVE_GETTIMEOFDAY"
"SC_NL_LANGMAX" : "SC_NL_LANGMAX"
"Callable" : "Callable"
"UF_OPAQUE" : "UF_OPAQUE"
"generator" : "generator"
"WTERMSIG" : "WTERMSIG"
"SIGTSTP" : "SIGTSTP"
"range" : "range"
"HAVE_PTHREAD_H" : "HAVE_PTHREAD_H"
"makedirs" : "makedirs"
"SIGSTOP" : "SIGSTOP"
"iso_8859_11" : "iso_8859_11"
"SIZEOF_FLOAT" : "SIZEOF_FLOAT"
"include" : "include"
"HAVE_PLOCK" : "HAVE_PLOCK"
"tm_zone" : "tm_zone"
"_loaders" : "_loaders"
"Variables" : "Variables"
"tm_gmtoff" : "tm_gmtoff"
"empty" : "empty"
"quoted_printable" : "quoted_printable"
"POBJS" : "POBJS"
"MULTIARCH" : "MULTIARCH"
"HAVE_RENAMEAT" : "HAVE_RENAMEAT"
"m2" : "m2"
"abstract_bases" : "abstract_bases"
"codecaliases" : "codecaliases"
"invert" : "invert"
"Popen" : "Popen"
"_set_sentinel" : "_set_sentinel"
"_spec" : "_spec"
"mkfifo" : "mkfifo"
"items" : "items"
"decodevalue" : "decodevalue"
"itruediv" : "itruediv"
"CoroutineType" : "CoroutineType"
"S_IFIFO" : "S_IFIFO"
"iso_ir_58" : "iso_ir_58"
"__str__" : "__str__"
"posixpath" : "posixpath"
"HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK" : "HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK"
"ns" : "ns"
"path_separators" : "path_separators"
"SC_MQ_PRIO_MAX" : "SC_MQ_PRIO_MAX"
"_path_isdir" : "_path_isdir"
"UserDict" : "UserDict"
"_asdict" : "_asdict"
"realpath" : "realpath"
".0" : ".0"
"ebcdic_cp_ch" : "ebcdic_cp_ch"
"builtin_module" : "builtin_module"
"scls" : "scls"
"HAVE_TMPNAM" : "HAVE_TMPNAM"
"hzgb" : "hzgb"
"copy" : "copy"
"ABDAY_6" : "ABDAY_6"
"__floor__" : "__floor__"
"SC_XOPEN_UNIX" : "SC_XOPEN_UNIX"
"py" : "py"
"_frozen_importlib" : "_frozen_importlib"
"pread" : "pread"
"HAVE_SETREGID" : "HAVE_SETREGID"
"u_jis" : "u_jis"
"_stat" : "_stat"
"_ORIGIN" : "_ORIGIN"
"CXX" : "CXX"
"pos" : "pos"
"MutableSet" : "MutableSet"
"LIBDIR" : "LIBDIR"
"macgreek" : "macgreek"
"HAVE_SIGRELSE" : "HAVE_SIGRELSE"
"StopIteration" : "StopIteration"
"kwds" : "kwds"
"REGISTRY_KEY_DEBUG" : "REGISTRY_KEY_DEBUG"
"HAVE_PRLIMIT" : "HAVE_PRLIMIT"
"platbase" : "platbase"
"SIGIO" : "SIGIO"
"HAVE_SYNC" : "HAVE_SYNC"
"fn" : "fn"
"setattr" : "setattr"
"isfile" : "isfile"
"ifloordiv" : "ifloordiv"
"_atomic_removal" : "_atomic_removal"
"maxfrozenset" : "maxfrozenset"
"SC_T_IOV_MAX" : "SC_T_IOV_MAX"
"HAVE_MMAP" : "HAVE_MMAP"
"HAVE_PROTOTYPES" : "HAVE_PROTOTYPES"
"winreg" : "winreg"
"HAVE_WAIT4" : "HAVE_WAIT4"
"setitem" : "setitem"
"SC_FSYNC" : "SC_FSYNC"
"iso_ir_148" : "iso_ir_148"
"getregentry" : "getregentry"
"ABDAY_2" : "ABDAY_2"
"f_ffree" : "f_ffree"
"SC_ATEXIT_MAX" : "SC_ATEXIT_MAX"
"__iadd__" : "__iadd__"
"WIFCONTINUED" : "WIFCONTINUED"
"ST_RELATIME" : "ST_RELATIME"
"_calculate_meta" : "_calculate_meta"
"__stderr__" : "__stderr__"
"latin3" : "latin3"
"debug_override" : "debug_override"
"keyrepr" : "keyrepr"
"_ERR_MSG_PREFIX" : "_ERR_MSG_PREFIX"
"_registered_with_atexit" : "_registered_with_atexit"
"setter" : "setter"
"super" : "super"
"api_version" : "api_version"
"dir" : "dir"
"SC_SELECT" : "SC_SELECT"
"length_hint" : "length_hint"
"wr" : "wr"
"HAVE_DLOPEN" : "HAVE_DLOPEN"
"supports_effective_ids" : "supports_effective_ids"
"getsignal" : "getsignal"
"rc" : "rc"
"HAVE_STROPTS_H" : "HAVE_STROPTS_H"
"ignore_errors" : "ignore_errors"
"tb_lasti" : "tb_lasti"
"source_from_cache" : "source_from_cache"
"ChildProcessError" : "ChildProcessError"
"HAVE_STRUCT_STAT_ST_GEN" : "HAVE_STRUCT_STAT_ST_GEN"
"WeakMethod" : "WeakMethod"
"__setformat__" : "__setformat__"
"HAVE_CURSES_IS_TERM_RESIZED" : "HAVE_CURSES_IS_TERM_RESIZED"
"latin2" : "latin2"
"FLOCK_NEEDS_LIBBSD" : "FLOCK_NEEDS_LIBBSD"
"StreamConverter" : "StreamConverter"
"ior" : "ior"
"create_dynamic" : "create_dynamic"
"ST_MODE" : "ST_MODE"
"HAVE__GETPTY" : "HAVE__GETPTY"
"XATTR_REPLACE" : "XATTR_REPLACE"
"no_site" : "no_site"
"split_paths" : "split_paths"
"WeakValueDictionary" : "WeakValueDictionary"
"putenv" : "putenv"
"_splitext" : "_splitext"
"_exec" : "_exec"
"HAVE_UTIMENSAT" : "HAVE_UTIMENSAT"
"ks_x_1001" : "ks_x_1001"
"linebuffer" : "linebuffer"
"_subst_vars" : "_subst_vars"
"nt_user" : "nt_user"
"_putenv" : "_putenv"
"sysconf" : "sysconf"
"SIGURG" : "SIGURG"
"partial" : "partial"
"gt" : "gt"
"EXTRATESTOPTS" : "EXTRATESTOPTS"
"l" : "l"
"csisolatincyrillic" : "csisolatincyrillic"
"writelines" : "writelines"
"_DeadlockError" : "_DeadlockError"
"get_makefile_filename" : "get_makefile_filename"
"isenabled" : "isenabled"
"TCLTK_INCLUDES" : "TCLTK_INCLUDES"
"PC_SYMLINK_MAX" : "PC_SYMLINK_MAX"
"isidentifier" : "isidentifier"
"FILEMODE" : "FILEMODE"
"ibm864" : "ibm864"
"__bool__" : "__bool__"
"setswitchinterval" : "setswitchinterval"
"HAVE_GETPGID" : "HAVE_GETPGID"
"subprocess" : "subprocess"
"S_IFWHT" : "S_IFWHT"
"move_to_end" : "move_to_end"
"getrefcount" : "getrefcount"
"utf8" : "utf8"
"SC_AVPHYS_PAGES" : "SC_AVPHYS_PAGES"
"shiftjis" : "shiftjis"
"r8" : "r8"
"from_bytes" : "from_bytes"
"BYTECODE_SUFFIXES" : "BYTECODE_SUFFIXES"
"_Link" : "_Link"
"DAY_5" : "DAY_5"
"PC" : "PC"
"S_ENFMT" : "S_ENFMT"
"ERA_T_FMT" : "ERA_T_FMT"
"iso8859_14" : "iso8859_14"
"d" : "d"
"HAVE_GCC_ASM_FOR_X87" : "HAVE_GCC_ASM_FOR_X87"
"HAVE_SYS_TIME_H" : "HAVE_SYS_TIME_H"
"stdin" : "stdin"
"verbose" : "verbose"
"EX_OK" : "EX_OK"
"maxstring" : "maxstring"
"popen" : "popen"
"CRNCYSTR" : "CRNCYSTR"
"trail" : "trail"
"readsize" : "readsize"
"tup" : "tup"
"kz1048" : "kz1048"
"ino1" : "ino1"
"and" : "and"
"_PYTHON_BUILD" : "_PYTHON_BUILD"
"HAVE_SETGROUPS" : "HAVE_SETGROUPS"
"stdout" : "stdout"
"gb2312_80" : "gb2312_80"
"iso2022_jp_3" : "iso2022_jp_3"
"get_inheritable" : "get_inheritable"
"raw_unicode_escape_decode" : "raw_unicode_escape_decode"
"CLOCK_MONOTONIC" : "CLOCK_MONOTONIC"
"combinations" : "combinations"
"reason" : "reason"
"getcheckinterval" : "getcheckinterval"
"S_IREAD" : "S_IREAD"
"singledispatch" : "singledispatch"
"__itruediv__" : "__itruediv__"
"spawnlp" : "spawnlp"
"mac_latin2" : "mac_latin2"
"repr_instance" : "repr_instance"
"PREFIXES" : "PREFIXES"
"VERSION" : "VERSION"
"CLD_EXITED" : "CLD_EXITED"
"pthread_kill" : "pthread_kill"
"HAVE_SYS_SOCKET_H" : "HAVE_SYS_SOCKET_H"
"get_data" : "get_data"
"full_path" : "full_path"
"PARSER_HEADERS" : "PARSER_HEADERS"
"ERA_D_T_FMT" : "ERA_D_T_FMT"
"locked" : "locked"
"CFLAGS" : "CFLAGS"
"_eq" : "_eq"
"SRC_GDB_HOOKS" : "SRC_GDB_HOOKS"
"HAVE_SYS_TIMES_H" : "HAVE_SYS_TIMES_H"
"SC_CHAR_BIT" : "SC_CHAR_BIT"
"csibm500" : "csibm500"
"O_CREAT" : "O_CREAT"
"S_ISGID" : "S_ISGID"
"EnvironmentError" : "EnvironmentError"
"HAVE_FTIME" : "HAVE_FTIME"
"HAVE_GETC_UNLOCKED" : "HAVE_GETC_UNLOCKED"
"_find_spec" : "_find_spec"
"SIZEOF_SIZE_T" : "SIZEOF_SIZE_T"
"SC_PRIORITIZED_IO" : "SC_PRIORITIZED_IO"
"fdopen" : "fdopen"
"_ge_from_le" : "_ge_from_le"
"tis_620_2529_1" : "tis_620_2529_1"
"register_error" : "register_error"
"optimize" : "optimize"
"ST_NOATIME" : "ST_NOATIME"
"SCHED_FIFO" : "SCHED_FIFO"
"fileno" : "fileno"
"__new__" : "__new__"
"__float__" : "__float__"
"SC_TIMER_MAX" : "SC_TIMER_MAX"
"settrace" : "settrace"
"CS_XBS5_ILP32_OFFBIG_LDFLAGS" : "CS_XBS5_ILP32_OFFBIG_LDFLAGS"
"SC_UINT_MAX" : "SC_UINT_MAX"
"iso_ir_109" : "iso_ir_109"
"FILE_ATTRIBUTE_SYSTEM" : "FILE_ATTRIBUTE_SYSTEM"
"_CASE_INSENSITIVE_PLATFORMS_STR_KEY" : "_CASE_INSENSITIVE_PLATFORMS_STR_KEY"
"l8" : "l8"
"getenvb" : "getenvb"
"environb" : "environb"
"ST_NLINK" : "ST_NLINK"
"SEEK_SET" : "SEEK_SET"
"_meth_type" : "_meth_type"
"destfile" : "destfile"
"HAVE_STRUCT_TM_TM_ZONE" : "HAVE_STRUCT_TM_TM_ZONE"
"_dump_registry" : "_dump_registry"
"HAVE_HTOLE64" : "HAVE_HTOLE64"
"HAVE_GETPAGESIZE" : "HAVE_GETPAGESIZE"
"HAVE_SYS_SYS_DOMAIN_H" : "HAVE_SYS_SYS_DOMAIN_H"
"WITH_PYMALLOC" : "WITH_PYMALLOC"
"SourceLoader" : "SourceLoader"
"valuerefs" : "valuerefs"
"ms949" : "ms949"
"HAVE_MKFIFOAT" : "HAVE_MKFIFOAT"
"_grouper" : "_grouper"
"abiflags" : "abiflags"
"BASECFLAGS" : "BASECFLAGS"
"sizeof_digit" : "sizeof_digit"
"HAVE_LIBREADLINE" : "HAVE_LIBREADLINE"
"utf_7" : "utf_7"
"from" : "from"
"Py_HASH_ALGORITHM" : "Py_HASH_ALGORITHM"
"csibm858" : "csibm858"
"SC_XOPEN_REALTIME" : "SC_XOPEN_REALTIME"
"LDSHARED" : "LDSHARED"
"python" : "python"
"bytes" : "bytes"
"makefile" : "makefile"
"shift_jis_2004" : "shift_jis_2004"
"S_IRWXO" : "S_IRWXO"
"access" : "access"
"_requires_frozen" : "_requires_frozen"
"_path_importer_cache" : "_path_importer_cache"
"ALT_DIGITS" : "ALT_DIGITS"
"py_version" : "py_version"
"ujis" : "ujis"
"utf_16_be" : "utf_16_be"
"Coroutine" : "Coroutine"
"base_prefix" : "base_prefix"
"HAVE_FCNTL_H" : "HAVE_FCNTL_H"
"sched_setscheduler" : "sched_setscheduler"
"module" : "module"
"string" : "string"
"iso_ir_110" : "iso_ir_110"
"SC_PII_OSI" : "SC_PII_OSI"
"utime" : "utime"
"base64_codec" : "base64_codec"
"HAVE_GETLOADAVG" : "HAVE_GETLOADAVG"
"tb_lineno" : "tb_lineno"
"64bit" : "64bit"
"FILE_ATTRIBUTE_SPARSE_FILE" : "FILE_ATTRIBUTE_SPARSE_FILE"
"maxlist" : "maxlist"
"_r_long" : "_r_long"
"LC_NUMERIC" : "LC_NUMERIC"
"genericpath" : "genericpath"
"_legacy_get_spec" : "_legacy_get_spec"
"HAVE_OSX105_SDK" : "HAVE_OSX105_SDK"
"ST_WRITE" : "ST_WRITE"
"greek8" : "greek8"
"iso_8859_4" : "iso_8859_4"
"WITH_THREAD" : "WITH_THREAD"
"parts" : "parts"
"terminal_size" : "terminal_size"
"ndim" : "ndim"
"ctime" : "ctime"
"setstate" : "setstate"
"HAVE_FCHMODAT" : "HAVE_FCHMODAT"
"seq" : "seq"
"initial_slashes" : "initial_slashes"
"gc" : "gc"
"fpathconf" : "fpathconf"
"dirfd" : "dirfd"
"Error" : "Error"
"__anext__" : "__anext__"
"INCLUDEDIR" : "INCLUDEDIR"
"clock_getres" : "clock_getres"
"USER_BASE" : "USER_BASE"
"__divmod__" : "__divmod__"
"_locale" : "_locale"
"LC_CTYPE" : "LC_CTYPE"
"PY_" : "PY_"
"isub" : "isub"
"_siftdown_max" : "_siftdown_max"
"winreg_module" : "winreg_module"
"HAVE_PIPE2" : "HAVE_PIPE2"
"K" : "K"
"builtins" : "builtins"
"HAVE_LGAMMA" : "HAVE_LGAMMA"
"dirpath" : "dirpath"
"latin9" : "latin9"
"iso_8859_14" : "iso_8859_14"
"isalpha" : "isalpha"
"repr_" : "repr_"
"cpathname" : "cpathname"
"PGSRCS" : "PGSRCS"
"top" : "top"
"DAY_4" : "DAY_4"
"errno" : "errno"
"USE_INLINE" : "USE_INLINE"
"READELF" : "READELF"
"SC_2_FORT_RUN" : "SC_2_FORT_RUN"
"CS_GNU_LIBC_VERSION" : "CS_GNU_LIBC_VERSION"
"HOME" : "HOME"
"utf8_ucs4" : "utf8_ucs4"
"cp866" : "cp866"
"mskanji" : "mskanji"
"_filters_mutated" : "_filters_mutated"
"get_code" : "get_code"
"allocate_lock" : "allocate_lock"
"ok" : "ok"
"cp869" : "cp869"
"max" : "max"
"__builtins__" : "__builtins__"
"statvfs_result" : "statvfs_result"
"HAVE_DLFCN_H" : "HAVE_DLFCN_H"
"start_list" : "start_list"
"_source" : "_source"
"MACHDEPPATH" : "MACHDEPPATH"
"t" : "t"
"cp864" : "cp864"
"builtin_module_names" : "builtin_module_names"
"onerror" : "onerror"
"dump" : "dump"
"itanium" : "itanium"
"eucjisx0213" : "eucjisx0213"
"SIZEOF_PTHREAD_T" : "SIZEOF_PTHREAD_T"
"utf_16" : "utf_16"
"nbytes" : "nbytes"
"ibm367" : "ibm367"
"cp775" : "cp775"
"acquire" : "acquire"
"unicodebigunmarked" : "unicodebigunmarked"
"MACHDESTLIB" : "MACHDESTLIB"
"abstractproperty" : "abstractproperty"
"float" : "float"
"op" : "op"
"ebcdic_cp_wt" : "ebcdic_cp_wt"
"__displayhook__" : "__displayhook__"
"replace" : "replace"
"heappush" : "heappush"
"HAVE_PUTENV" : "HAVE_PUTENV"
"output" : "output"
"ST_CTIME" : "ST_CTIME"
"link" : "link"
"utf_8_encode" : "utf_8_encode"
"CLOCK_THREAD_CPUTIME_ID" : "CLOCK_THREAD_CPUTIME_ID"
"filepath" : "filepath"
"_load_unlocked" : "_load_unlocked"
"sys_version" : "sys_version"
"iso_ir_6" : "iso_ir_6"
"f1" : "f1"
"nonlocal" : "nonlocal"
"assigned" : "assigned"
"HAVE_UNSETENV" : "HAVE_UNSETENV"
"iso_2022_jp" : "iso_2022_jp"
"_path" : "_path"
"UnicodeEncodeError" : "UnicodeEncodeError"
"sched_priority" : "sched_priority"
"if" : "if"
"TIMEMODULE_LIB" : "TIMEMODULE_LIB"
"HAVE_HSTRERROR" : "HAVE_HSTRERROR"
"HAVE_CONFSTR" : "HAVE_CONFSTR"
"license" : "license"
"import" : "import"
"PRIO_USER" : "PRIO_USER"
"LOG1P_DROPS_ZERO_SIGN" : "LOG1P_DROPS_ZERO_SIGN"
"HAVE_SYS_TYPES_H" : "HAVE_SYS_TYPES_H"
"tactis" : "tactis"
"displayhook" : "displayhook"
"TMP_MAX" : "TMP_MAX"
"ibm862" : "ibm862"
"WIFEXITED" : "WIFEXITED"
"LN" : "LN"
"typ" : "typ"
"repr" : "repr"
"HAVE_TCGETPGRP" : "HAVE_TCGETPGRP"
"ST_DEV" : "ST_DEV"
"TESTRUNNER" : "TESTRUNNER"
"chinese" : "chinese"
"fwalk" : "fwalk"
"COVERAGE_REPORT" : "COVERAGE_REPORT"
"rename" : "rename"
"PC_REC_MAX_XFER_SIZE" : "PC_REC_MAX_XFER_SIZE"
"_resolve_name" : "_resolve_name"
"_unsetenv" : "_unsetenv"
"translate" : "translate"
"ar" : "ar"
"HAVE_GETRANDOM" : "HAVE_GETRANDOM"
"exec_body" : "exec_body"
"detect_encoding" : "detect_encoding"
"HAVE_DYNAMIC_LOADING" : "HAVE_DYNAMIC_LOADING"
"SC_AIO_PRIO_DELTA_MAX" : "SC_AIO_PRIO_DELTA_MAX"
"newline_decoder" : "newline_decoder"
"ERA_D_FMT" : "ERA_D_FMT"
"SC_INT_MIN" : "SC_INT_MIN"
"rel_list" : "rel_list"
"X_OK" : "X_OK"
"1258" : "1258"
"attr" : "attr"
"optimization" : "optimization"
"abstractstaticmethod" : "abstractstaticmethod"
"state" : "state"
"_empty_charbuffer" : "_empty_charbuffer"
"_count_elements" : "_count_elements"
"getencoder" : "getencoder"
"gmtime" : "gmtime"
"SHLIBS" : "SHLIBS"
"topfd" : "topfd"
"SCHED_BATCH" : "SCHED_BATCH"
"tb" : "tb"
"exists" : "exists"
"defpath" : "defpath"
"SC_ARG_MAX" : "SC_ARG_MAX"
"_find_parent_path_names" : "_find_parent_path_names"
"st_uid" : "st_uid"
"_DummyModuleLock" : "_DummyModuleLock"
"LOCALMODLIBS" : "LOCALMODLIBS"
"_starmap" : "_starmap"
"__reduce__" : "__reduce__"
"PYTHON_FOR_REGEN" : "PYTHON_FOR_REGEN"
"iso8859_8" : "iso8859_8"
"iptfile" : "iptfile"
"GeneratorExit" : "GeneratorExit"
"getpreferredencoding" : "getpreferredencoding"
"LC_ALL" : "LC_ALL"
"S_IEXEC" : "S_IEXEC"
"PSRCS" : "PSRCS"
"SIG_BLOCK" : "SIG_BLOCK"
"_get_supported_file_loaders" : "_get_supported_file_loaders"
"PGEN" : "PGEN"
"lineno" : "lineno"
"BufferedIncrementalEncoder" : "BufferedIncrementalEncoder"
"imag" : "imag"
"conffile" : "conffile"
"uname" : "uname"
"env" : "env"
"rounds" : "rounds"
"None" : "None"
"venv" : "venv"
"HAVE_INET_PTON" : "HAVE_INET_PTON"
"platlib" : "platlib"
"from_name" : "from_name"
"ENABLE_IPV6" : "ENABLE_IPV6"
"HAVE_BROKEN_NICE" : "HAVE_BROKEN_NICE"
"_ERR_MSG" : "_ERR_MSG"
"iso_ir_127" : "iso_ir_127"
"entry" : "entry"
"SC_TZNAME_MAX" : "SC_TZNAME_MAX"
"SC_AIO_MAX" : "SC_AIO_MAX"
"enable" : "enable"
"HAVE_SYS_TERMIO_H" : "HAVE_SYS_TERMIO_H"
"path_attr_name" : "path_attr_name"
"sr" : "sr"
"getprofile" : "getprofile"
"__getattribute__" : "__getattribute__"
"extension_suffixes" : "extension_suffixes"
"tb_frame" : "tb_frame"
"ob" : "ob"
"st_blocks" : "st_blocks"
"relpath" : "relpath"
"class" : "class"
"HAVE_TERMIOS_H" : "HAVE_TERMIOS_H"
"supported_loaders" : "supported_loaders"
"UF_APPEND" : "UF_APPEND"
"sequences" : "sequences"
"_checkClosed" : "_checkClosed"
"impl" : "impl"
"_RawIOBase" : "_RawIOBase"
"_Printer__setup" : "_Printer__setup"
"seed_bits" : "seed_bits"
"PC_VDISABLE" : "PC_VDISABLE"
"_sysconfigdata" : "_sysconfigdata"
"hasattr" : "hasattr"
"tcsetpgrp" : "tcsetpgrp"
"u16" : "u16"
"maxarray" : "maxarray"
"__annotations__" : "__annotations__"
"HAVE_SYS_WAIT_H" : "HAVE_SYS_WAIT_H"
"ABMON_12" : "ABMON_12"
"site_prefix" : "site_prefix"
"utf_32_encode" : "utf_32_encode"
"HAVE_TMPFILE" : "HAVE_TMPFILE"
"HAVE_INT32_T" : "HAVE_INT32_T"
"BrokenPipeError" : "BrokenPipeError"
"FILE_ATTRIBUTE_DEVICE" : "FILE_ATTRIBUTE_DEVICE"
"lib" : "lib"
"SC_XBS5_LP64_OFF64" : "SC_XBS5_LP64_OFF64"
"ibm852" : "ibm852"
"iso8859_11" : "iso8859_11"
"Iterator" : "Iterator"
"iso_8859_3" : "iso_8859_3"
"IndentationError" : "IndentationError"
"keyrefs" : "keyrefs"
"SC_LONG_BIT" : "SC_LONG_BIT"
"__traceback__" : "__traceback__"
"abspath" : "abspath"
"getgroups" : "getgroups"
"HAVE_NET_IF_H" : "HAVE_NET_IF_H"
"charmap_decode" : "charmap_decode"
"SC_BC_BASE_MAX" : "SC_BC_BASE_MAX"
"dirname" : "dirname"
"__path__" : "__path__"
"ZeroDivisionError" : "ZeroDivisionError"
"PY_CFLAGS_NODIST" : "PY_CFLAGS_NODIST"
"__suppress_context__" : "__suppress_context__"
"TESTPYTHON" : "TESTPYTHON"
"<string>" : "<string>"
"byteorder" : "byteorder"
"rcls" : "rcls"
"cp1125" : "cp1125"
"with" : "with"
"notdone" : "notdone"
"SC_SAVED_IDS" : "SC_SAVED_IDS"
"FILE_ATTRIBUTE_HIDDEN" : "FILE_ATTRIBUTE_HIDDEN"
"or" : "or"
"ascii_encode" : "ascii_encode"
"micro" : "micro"
"get_config_h_filename" : "get_config_h_filename"
"cp950" : "cp950"
"PC_SOCK_MAXBUF" : "PC_SOCK_MAXBUF"
"_requires_builtin" : "_requires_builtin"
"iso8859_5" : "iso8859_5"
"HAVE_SCHED_RR_GET_INTERVAL" : "HAVE_SCHED_RR_GET_INTERVAL"
"_PY_VERSION" : "_PY_VERSION"
"weakref_module" : "weakref_module"
"intersection_update" : "intersection_update"
"bytebuffer" : "bytebuffer"
"SIGTERM" : "SIGTERM"
"_PROJECT_BASE" : "_PROJECT_BASE"
"comp" : "comp"
"HAVE_COMPUTED_GOTOS" : "HAVE_COMPUTED_GOTOS"
"CS_XBS5_LP64_OFF64_LDFLAGS" : "CS_XBS5_LP64_OFF64_LDFLAGS"
"get_ident" : "get_ident"
"__getformat__" : "__getformat__"
"groupby" : "groupby"
"HAVE_WAITPID" : "HAVE_WAITPID"
"HAVE_STRINGS_H" : "HAVE_STRINGS_H"
"heap" : "heap"
"_clear_type_cache" : "_clear_type_cache"
"cut_off" : "cut_off"
"ValueError" : "ValueError"
"HAVE_GETPGRP" : "HAVE_GETPGRP"
"writev" : "writev"
"BufferedReader" : "BufferedReader"
"total_ordering" : "total_ordering"
"isdecimal" : "isdecimal"
"void" : "void"
"_thread" : "_thread"
"TCLTK_LIBS" : "TCLTK_LIBS"
"HAVE_SYS_UN_H" : "HAVE_SYS_UN_H"
"PC_FILESIZEBITS" : "PC_FILESIZEBITS"
"modules" : "modules"
"860" : "860"
"HAVE_SCHED_GET_PRIORITY_MAX" : "HAVE_SCHED_GET_PRIORITY_MAX"
"S_IWRITE" : "S_IWRITE"
"CONFIG_ARGS" : "CONFIG_ARGS"
"_initializing" : "_initializing"
"zfill" : "zfill"
"csisolatin4" : "csisolatin4"
"864" : "864"
"tuple_iterator" : "tuple_iterator"
"cp855" : "cp855"
"get_paths" : "get_paths"
"866" : "866"
"callstats" : "callstats"
"HAVE_FORKPTY" : "HAVE_FORKPTY"
"HAVE_SETVBUF" : "HAVE_SETVBUF"
"_path_split" : "_path_split"
"sum" : "sum"
"val" : "val"
"RADIXCHAR" : "RADIXCHAR"
"purelib" : "purelib"
"config_dir_name" : "config_dir_name"
"renames" : "renames"
"MACHDEPS" : "MACHDEPS"
"cp367" : "cp367"
"parent_module_name" : "parent_module_name"
"HAVE_FDATASYNC" : "HAVE_FDATASYNC"
"SCHED_IDLE" : "SCHED_IDLE"
"__subclasses__" : "__subclasses__"
"namereplace" : "namereplace"
"setdefault" : "setdefault"
"EX_NOUSER" : "EX_NOUSER"
"cr_running" : "cr_running"
"SEEK_CUR" : "SEEK_CUR"
"_BASE_EXEC_PREFIX" : "_BASE_EXEC_PREFIX"
"lock" : "lock"
"CHAR_MAX" : "CHAR_MAX"
"search_function" : "search_function"
"lookup" : "lookup"
"cspcp852" : "cspcp852"
"callback" : "callback"
"_from_iterable" : "_from_iterable"
"SIGRTMAX" : "SIGRTMAX"
"ValuesView" : "ValuesView"
"__kwdefaults__" : "__kwdefaults__"
"field_defs" : "field_defs"
"MACOSX_DEPLOYMENT_TARGET" : "MACOSX_DEPLOYMENT_TARGET"
"S_IFLNK" : "S_IFLNK"
"__itemsize__" : "__itemsize__"
"childpos" : "childpos"
"HAVE_CLOCK" : "HAVE_CLOCK"
"dup" : "dup"
"big5_tw" : "big5_tw"
"_imp_module" : "_imp_module"
"HAVE_DIRENT_D_TYPE" : "HAVE_DIRENT_D_TYPE"
"RUNSHARED" : "RUNSHARED"
"MappingProxyType" : "MappingProxyType"
"_pending_removals" : "_pending_removals"
"returncode" : "returncode"
"HAVE_SYS_STAT_H" : "HAVE_SYS_STAT_H"
"difference_update" : "difference_update"
"st_atime" : "st_atime"
"call_tracing" : "call_tracing"
"ENOENT" : "ENOENT"
"heapq" : "heapq"
"raise" : "raise"
"cspc850multilingual" : "cspc850multilingual"
"default_int_handler" : "default_int_handler"
"format" : "format"
"_stream" : "_stream"
"meta" : "meta"
"csHPRoman8" : "csHPRoman8"
"newcount" : "newcount"
"j" : "j"
"print" : "print"
"code" : "code"
"execvp" : "execvp"
"srcdir" : "srcdir"
"HAVE_PAUSE" : "HAVE_PAUSE"
"HAVE_ATANH" : "HAVE_ATANH"
"_warnings" : "_warnings"
"errors" : "errors"
"csibm866" : "csibm866"
"ibm855" : "ibm855"
"YESEXPR" : "YESEXPR"
"
" : "
"
"S_IXUSR" : "S_IXUSR"
"_have_functions" : "_have_functions"
"setsid" : "setsid"
"EXTRAMACHDEPPATH" : "EXTRAMACHDEPPATH"
"iterdecode" : "iterdecode"
"TracebackType" : "TracebackType"
"HAVE_FDOPENDIR" : "HAVE_FDOPENDIR"
"co" : "co"
"XMLLIBSUBDIRS" : "XMLLIBSUBDIRS"
"exec_module" : "exec_module"
"_operator" : "_operator"
"osname" : "osname"
"find_module" : "find_module"
"f_bavail" : "f_bavail"
"nice" : "nice"
"windows_1255" : "windows_1255"
"__all__" : "__all__"
"HAVE_INET_ATON" : "HAVE_INET_ATON"
"HAVE_GETPEERNAME" : "HAVE_GETPEERNAME"
"groupdict" : "groupdict"
"coroutine" : "coroutine"
"AsyncIterator" : "AsyncIterator"
"f_trace" : "f_trace"
"S_ISDOOR" : "S_ISDOOR"
"setquit" : "setquit"
"HAVE_BROKEN_SEM_GETVALUE" : "HAVE_BROKEN_SEM_GETVALUE"
"cast" : "cast"
"SIZEOF_DOUBLE" : "SIZEOF_DOUBLE"
"__context__" : "__context__"
"acquire_lock" : "acquire_lock"
"CS_LFS_LIBS" : "CS_LFS_LIBS"
"enumerate" : "enumerate"
"csibm424" : "csibm424"
"HAVE_CLOCK_GETTIME" : "HAVE_CLOCK_GETTIME"
"projectbase" : "projectbase"
"HAVE_RL_COMPLETION_SUPPRESS_APPEND" : "HAVE_RL_COMPLETION_SUPPRESS_APPEND"
"HAVE_IO_H" : "HAVE_IO_H"
"get_clock_info" : "get_clock_info"
"_OPT" : "_OPT"
"ibm039" : "ibm039"
"MON_12" : "MON_12"
"DeprecationWarning" : "DeprecationWarning"
"getuserbase" : "getuserbase"
"f2" : "f2"
"__file__" : "__file__"
"dont_write_bytecode" : "dont_write_bytecode"
"bytearray_iterator" : "bytearray_iterator"
"LDVERSION" : "LDVERSION"
"csbig5" : "csbig5"
"repr_dict" : "repr_dict"
"abstractmethod" : "abstractmethod"
"dcgettext" : "dcgettext"
"SC_DELAYTIMER_MAX" : "SC_DELAYTIMER_MAX"
"istitle" : "istitle"
"HAVE_LONG_DOUBLE" : "HAVE_LONG_DOUBLE"
"collections" : "collections"
"_lt_from_ge" : "_lt_from_ge"
"tmpv" : "tmpv"
"WITH_DYLD" : "WITH_DYLD"
"sched_yield" : "sched_yield"
"LDLIBRARY" : "LDLIBRARY"
"WNOHANG" : "WNOHANG"
"warnings" : "warnings"
"exist_ok" : "exist_ok"
"cp1250" : "cp1250"
"HAVE_SNPRINTF" : "HAVE_SNPRINTF"
"_scrub_removals" : "_scrub_removals"
"rot_13" : "rot_13"
"ibm866" : "ibm866"
"tail_name" : "tail_name"
"UNICODE_DEPS" : "UNICODE_DEPS"
"tm_isdst" : "tm_isdst"
"__call__" : "__call__"
"sjis" : "sjis"
"heappushpop" : "heappushpop"
"machine" : "machine"
"_handle_fromlist" : "_handle_fromlist"
"popitem" : "popitem"
"raw_size" : "raw_size"
"cdir" : "cdir"
"HAVE_READV" : "HAVE_READV"
"PRIO_PROCESS" : "PRIO_PROCESS"
"isabs" : "isabs"
"errorcode" : "errorcode"
"TabError" : "TabError"
"stack_size" : "stack_size"
"SF_ARCHIVED" : "SF_ARCHIVED"
"_select_for_exit" : "_select_for_exit"
"iso_8859_16" : "iso_8859_16"
"8859" : "8859"
"SC_PASS_MAX" : "SC_PASS_MAX"
"_weakrefset" : "_weakrefset"
"setpgid" : "setpgid"
"TextIOWrapper" : "TextIOWrapper"
"_filemode_table" : "_filemode_table"
"getitimer" : "getitimer"
"HAVE_DEVICE_MACROS" : "HAVE_DEVICE_MACROS"
"HAVE_WAIT3" : "HAVE_WAIT3"
"EX_CONFIG" : "EX_CONFIG"
"HAVE_WRITEV" : "HAVE_WRITEV"
"ms1361" : "ms1361"
"setxattr" : "setxattr"
"builtin_name" : "builtin_name"
"utf_16_encode" : "utf_16_encode"
"as" : "as"
"ebcdic_cp_ca" : "ebcdic_cp_ca"
"initlist" : "initlist"
"kwd_mark" : "kwd_mark"
"spawnvp" : "spawnvp"
"PC_LINK_MAX" : "PC_LINK_MAX"
"truth" : "truth"
"operator" : "operator"
"csibm861" : "csibm861"
"LIBOBJDIR" : "LIBOBJDIR"
"rindex" : "rindex"
"SC_PHYS_PAGES" : "SC_PHYS_PAGES"
"module_from_spec" : "module_from_spec"
"real" : "real"
"it" : "it"
"IsADirectoryError" : "IsADirectoryError"
"sentinel" : "sentinel"
"iso_ir_226" : "iso_ir_226"
"normpath" : "normpath"
"bindtextdomain" : "bindtextdomain"
"is_reload" : "is_reload"
"SIZEOF_WCHAR_T" : "SIZEOF_WCHAR_T"
"tolist" : "tolist"
"HAVE_PTHREAD_INIT" : "HAVE_PTHREAD_INIT"
"unicode_internal_decode" : "unicode_internal_decode"
"HAVE_GETADDRINFO" : "HAVE_GETADDRINFO"
"inf" : "inf"
"abstract_c3_mros" : "abstract_c3_mros"
"_blksize" : "_blksize"
"cr_await" : "cr_await"
"HAVE_FORK" : "HAVE_FORK"
"ExtensionFileLoader" : "ExtensionFileLoader"
"call_keywords" : "call_keywords"
"dgettext" : "dgettext"
"_dirty" : "_dirty"
"MON_2" : "MON_2"
"SC_THREAD_PRIORITY_SCHEDULING" : "SC_THREAD_PRIORITY_SCHEDULING"
"SC_THREAD_ATTR_STACKADDR" : "SC_THREAD_ATTR_STACKADDR"
"INSTALL_DATA" : "INSTALL_DATA"
"HAVE_GAMMA" : "HAVE_GAMMA"
"readline_doc" : "readline_doc"
"getitem" : "getitem"
"_w_long" : "_w_long"
"HAVE_RL_RESIZE_TERMINAL" : "HAVE_RL_RESIZE_TERMINAL"
"__gt__" : "__gt__"
"PM_STR" : "PM_STR"
"POSIX_FADV_RANDOM" : "POSIX_FADV_RANDOM"
"enc" : "enc"
"quiet" : "quiet"
"us" : "us"
"<lambda>" : "<lambda>"
"uhc" : "uhc"
"ABDAY_4" : "ABDAY_4"
"code_object" : "code_object"
"HAVE_FCHOWN" : "HAVE_FCHOWN"
"SIGNAL_OBJS" : "SIGNAL_OBJS"
"__rpow__" : "__rpow__"
"getloadavg" : "getloadavg"
"ItemsView" : "ItemsView"
"__irshift__" : "__irshift__"
"dict" : "dict"
"BOM" : "BOM"
"CLD_CONTINUED" : "CLD_CONTINUED"
"__instancecheck__" : "__instancecheck__"
"FILE_ATTRIBUTE_TEMPORARY" : "FILE_ATTRIBUTE_TEMPORARY"
"FileNotFoundError" : "FileNotFoundError"
"warn_explicit" : "warn_explicit"
"LIBRARY" : "LIBRARY"
"SC_PII_INTERNET_STREAM" : "SC_PII_INTERNET_STREAM"
"RTLD_NOW" : "RTLD_NOW"
"_calc_mode" : "_calc_mode"
"unicodelittleunmarked" : "unicodelittleunmarked"
"coro" : "coro"
"_check_bytes" : "_check_bytes"
"1257" : "1257"
"f_code" : "f_code"
"__reduce_ex__" : "__reduce_ex__"
"ProxyTypes" : "ProxyTypes"
"__le__" : "__le__"
"maketrans" : "maketrans"
"alarm" : "alarm"
"HAVE_GETRANDOM_SYSCALL" : "HAVE_GETRANDOM_SYSCALL"
"TIME_WITH_SYS_TIME" : "TIME_WITH_SYS_TIME"
"euckr" : "euckr"
"del" : "del"
"hz_gb" : "hz_gb"
"SIGHUP" : "SIGHUP"
"denominator" : "denominator"
"CFLAGS_ALIASING" : "CFLAGS_ALIASING"
"names" : "names"
"HAVE_DUP2" : "HAVE_DUP2"
"LC_MONETARY" : "LC_MONETARY"
"SC_XBS5_ILP32_OFFBIG" : "SC_XBS5_ILP32_OFFBIG"
"f_contiguous" : "f_contiguous"
"LIBRARY_OBJS_OMIT_FROZEN" : "LIBRARY_OBJS_OMIT_FROZEN"
"CS_XBS5_ILP32_OFFBIG_LIBS" : "CS_XBS5_ILP32_OFFBIG_LIBS"
"_NamespacePath" : "_NamespacePath"
"SIGXCPU" : "SIGXCPU"
"_varprogb" : "_varprogb"
"_abc_registry" : "_abc_registry"
"KeyedRef" : "KeyedRef"
"O_TRUNC" : "O_TRUNC"
"PGENOBJS" : "PGENOBJS"
"execl" : "execl"
"_new_module" : "_new_module"
"fchdir" : "fchdir"
"UF_HIDDEN" : "UF_HIDDEN"
"S_IRUSR" : "S_IRUSR"
"source_mtime" : "source_mtime"
"maxlong" : "maxlong"
"_is_reload" : "_is_reload"
"HAVE_SYSCONF" : "HAVE_SYSCONF"
"SC_AIO_LISTIO_MAX" : "SC_AIO_LISTIO_MAX"
"FILE_ATTRIBUTE_OFFLINE" : "FILE_ATTRIBUTE_OFFLINE"
"HAVE_SYS_RANDOM_H" : "HAVE_SYS_RANDOM_H"
"HAVE_SYS_DEVPOLL_H" : "HAVE_SYS_DEVPOLL_H"
"startswith" : "startswith"
"keepends" : "keepends"
"getpgid" : "getpgid"
"__ixor__" : "__ixor__"
"base" : "base"
"get_config_var" : "get_config_var"
"reversed" : "reversed"
"850" : "850"
"SC_ASYNCHRONOUS_IO" : "SC_ASYNCHRONOUS_IO"
"HAVE_WAITID" : "HAVE_WAITID"
"utf_32_be" : "utf_32_be"
"expandvars" : "expandvars"
"ge" : "ge"
"EX_TEMPFAIL" : "EX_TEMPFAIL"
"platform" : "platform"
"MASK" : "MASK"
"utf7" : "utf7"
"SC_UCHAR_MAX" : "SC_UCHAR_MAX"
"repr_array" : "repr_array"
"HAVE_SETUID" : "HAVE_SETUID"
"ITIMER_REAL" : "ITIMER_REAL"
"reader" : "reader"
"hash_info" : "hash_info"
"_varprog" : "_varprog"
"koi8_r" : "koi8_r"
"tb_next" : "tb_next"
"_buffer_encode" : "_buffer_encode"
"FloatingPointError" : "FloatingPointError"
"F_TLOCK" : "F_TLOCK"
"build_time_vars" : "build_time_vars"
"source_to_code" : "source_to_code"
"MutableMapping" : "MutableMapping"
"_" : "_"
"co_stacksize" : "co_stacksize"
"HAVE_TRUNCATE" : "HAVE_TRUNCATE"
"interrupt_main" : "interrupt_main"
"iso2022jp_3" : "iso2022jp_3"
"BOM64_BE" : "BOM64_BE"
"*" : "*"
"SC_THREAD_DESTRUCTOR_ITERATIONS" : "SC_THREAD_DESTRUCTOR_ITERATIONS"
"HAVE_SYS_SYSCALL_H" : "HAVE_SYS_SYSCALL_H"
"getcwdb" : "getcwdb"
"437" : "437"
"1252" : "1252"
"allocate" : "allocate"
"memoryview" : "memoryview"
"loads" : "loads"
"new_child" : "new_child"
"is_symlink" : "is_symlink"
"utf32" : "utf32"
"pipe" : "pipe"
"sched_get_priority_min" : "sched_get_priority_min"
"_heapq" : "_heapq"
"POSIX_FADV_NOREUSE" : "POSIX_FADV_NOREUSE"
"is_python_build" : "is_python_build"
"getbuffer" : "getbuffer"
"is_related" : "is_related"
"f_frsize" : "f_frsize"
"iso_8859_10" : "iso_8859_10"
"loaders" : "loaders"
"def" : "def"
"ProcessLookupError" : "ProcessLookupError"
"path_list" : "path_list"
"HAVE_STRING_H" : "HAVE_STRING_H"
"ST_ATIME" : "ST_ATIME"
"B" : "B"
"DIST" : "DIST"
"SIGBUS" : "SIGBUS"
"GNULD" : "GNULD"
"lambda" : "lambda"
"maxiter" : "maxiter"
"bytesencoded" : "bytesencoded"
"executable" : "executable"
"SC_SIGQUEUE_MAX" : "SC_SIGQUEUE_MAX"
"maxsize" : "maxsize"
"classmethod" : "classmethod"
"filterfalse" : "filterfalse"
"hook" : "hook"
"getdecoder" : "getdecoder"
"new_comps" : "new_comps"
"HAVE_ASINH" : "HAVE_ASINH"
"shell" : "shell"
"SIZEOF__BOOL" : "SIZEOF__BOOL"
"SC_XBS5_ILP32_OFF32" : "SC_XBS5_ILP32_OFF32"
"str" : "str"
"_aliases" : "_aliases"
"_home" : "_home"
"weakcontainer" : "weakcontainer"
"_BufferedIOBase" : "_BufferedIOBase"
"utf_32be" : "utf_32be"
"iso_celtic" : "iso_celtic"
"CODESET" : "CODESET"
"PGO_PROF_GEN_FLAG" : "PGO_PROF_GEN_FLAG"
"TimeoutError" : "TimeoutError"
"HAVE_ALIGNED_REQUIRED" : "HAVE_ALIGNED_REQUIRED"

619 allocations use 0xc36a0 (800,416) bytes.
